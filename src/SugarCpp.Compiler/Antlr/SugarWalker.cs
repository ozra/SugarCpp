//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2014-12-06 21:22:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Declare", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'extern'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'thread_local'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Declare=43;
	public const int Func_Def=44;
	public const int Generic_Patameters=45;
	public const int Global_Block=46;
	public const int IDENT=47;
	public const int INDENT=48;
	public const int Ident_List=49;
	public const int Import=50;
	public const int Left_Bracket=51;
	public const int LineComment=52;
	public const int Match_Expr=53;
	public const int Match_Expr_Item=54;
	public const int Match_Tuple=55;
	public const int NEWLINE=56;
	public const int NUMBER=57;
	public const int Namespace=58;
	public const int Right_Bracket=59;
	public const int Root=60;
	public const int SP=61;
	public const int STRING=62;
	public const int Stmt_Block=63;
	public const int Stmt_Defer=64;
	public const int Stmt_Finally=65;
	public const int Stmt_For=66;
	public const int Stmt_If=67;
	public const int Stmt_Loop=68;
	public const int Stmt_Return=69;
	public const int Stmt_Switch=70;
	public const int Stmt_Try=71;
	public const int Stmt_Typedef=72;
	public const int Stmt_Unless=73;
	public const int Stmt_Until=74;
	public const int Stmt_Using=75;
	public const int Stmt_While=76;
	public const int Switch_Item=77;
	public const int Type_Array=78;
	public const int Type_Func=79;
	public const int Type_Ident=80;
	public const int Type_List=81;
	public const int Type_Ref=82;
	public const int Type_Star=83;
	public const int Type_Template=84;
	public const int WS=85;
	public const int DOUBLE=187;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op)
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			if (op == "not") return "!";
			if (op == "uint") return "unsigned int";
			if (op == "uchar") return "unsigned char";
			if (op == "schar") return "signed char";
			if (op == "int8") return "int8_t";
			if (op == "int16") return "int16_t";
			if (op == "int32") return "int32_t";
			if (op == "int64") return "int64_t";
			if (op == "uint8") return "uint8_t";
			if (op == "uint16") return "uint16_t";
			if (op == "uint32") return "uint32_t";
			if (op == "uint64") return "uint64_t";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:44:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(44, 1);
		try
		{
			// SugarWalker.g:45:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: ^( Root a= global_block )
			{
			DebugLocation(45, 4);
			DebugLocation(45, 6);
			Match(input,Root,Follow._Root_in_root71); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(45, 12);
			PushFollow(Follow._global_block_in_root75);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(46, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:51:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(51, 1);
		try
		{
			// SugarWalker.g:56:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:56:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(56, 4);
			DebugLocation(56, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block100); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(56, 19);
				// SugarWalker.g:56:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==113))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:56:20: a= node
						{
						DebugLocation(56, 21);
						PushFollow(Follow._node_in_global_block105);
						a=node();
						PopFollow();

						DebugLocation(56, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:59:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(59, 1);
		try
		{
			// SugarWalker.g:64:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 113:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:64:4: a= func_def
				{
				DebugLocation(64, 6);
				PushFollow(Follow._func_def_in_node134);
				a=func_def();
				PopFollow();

				DebugLocation(64, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:65:4: b= import_def
				{
				DebugLocation(65, 6);
				PushFollow(Follow._import_def_in_node145);
				b=import_def();
				PopFollow();

				DebugLocation(65, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:66:4: c= enum_def
				{
				DebugLocation(66, 6);
				PushFollow(Follow._enum_def_in_node156);
				c=enum_def();
				PopFollow();

				DebugLocation(66, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:67:4: d= class_def
				{
				DebugLocation(67, 6);
				PushFollow(Follow._class_def_in_node167);
				d=class_def();
				PopFollow();

				DebugLocation(67, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:68:4: e= global_alloc
				{
				DebugLocation(68, 6);
				PushFollow(Follow._global_alloc_in_node178);
				e=global_alloc();
				PopFollow();

				DebugLocation(68, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:69:4: f= global_using
				{
				DebugLocation(69, 6);
				PushFollow(Follow._global_using_in_node189);
				f=global_using();
				PopFollow();

				DebugLocation(69, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:70:4: g= global_typedef
				{
				DebugLocation(70, 6);
				PushFollow(Follow._global_typedef_in_node200);
				g=global_typedef();
				PopFollow();

				DebugLocation(70, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:71:4: h= namespace_def
				{
				DebugLocation(71, 6);
				PushFollow(Follow._namespace_def_in_node211);
				h=namespace_def();
				PopFollow();

				DebugLocation(71, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:74:1: global_using returns [GlobalUsing value] : ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		CommonTree b = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);


			value = new GlobalUsing();

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:79:2: ( ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:79:4: ^( Stmt_Using (attr= attribute )? (a= ident |b= 'namespace' )* )
			{
			DebugLocation(79, 4);
			DebugLocation(79, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_global_using233); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 17);
				// SugarWalker.g:79:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:79:18: attr= attribute
					{
					DebugLocation(79, 22);
					PushFollow(Follow._attribute_in_global_using238);
					attr=attribute();
					PopFollow();

					DebugLocation(79, 33);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(79, 65);
				// SugarWalker.g:79:65: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=3;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENT))
					{
						alt4 = 1;
					}
					else if ((LA4_0==159))
					{
						alt4 = 2;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:79:67: a= ident
						{
						DebugLocation(79, 68);
						PushFollow(Follow._ident_in_global_using249);
						a=ident();
						PopFollow();

						DebugLocation(79, 75);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:80:22: b= 'namespace'
						{
						DebugLocation(80, 23);
						b=(CommonTree)Match(input,159,Follow._159_in_global_using276); 
						DebugLocation(80, 36);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:83:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		CommonTree has_extern = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();
			GlobalAlloc item;

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(83, 1);
		try
		{
			// SugarWalker.g:89:2: ( ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list ) | ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list ) )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt11 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt11 = 2;
				}
				break;
			case 113:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:89:4: ^( Expr_Alloc_Equal (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(89, 4);
				DebugLocation(89, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc302); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(89, 23);
				// SugarWalker.g:89:23: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:89:24: attr= attribute
					{
					DebugLocation(89, 28);
					PushFollow(Follow._attribute_in_global_alloc307);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(89, 41);
				// SugarWalker.g:89:41: (has_extern= 'extern' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==147))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:89:42: has_extern= 'extern'
					{
					DebugLocation(89, 52);
					has_extern=(CommonTree)Match(input,147,Follow._147_in_global_alloc314); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(89, 65);
				PushFollow(Follow._type_name_in_global_alloc320);
				a=type_name();
				PopFollow();

				DebugLocation(89, 77);
				PushFollow(Follow._ident_list_in_global_alloc324);
				b=ident_list();
				PopFollow();

				DebugLocation(89, 90);
				PushFollow(Follow._expr_list_in_global_alloc328);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(90, 2);

						if (c != null && c.Count > 0)
						{
							item = new GlobalAlloc(a, b, c, attr, AllocType.Equal);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
						}
						else
						{
							item = new GlobalAlloc(a, b, c, attr, AllocType.Declare);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:104:4: ^( Expr_Alloc_Bracket (attr= attribute )? (has_extern= 'extern' )? a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(104, 4);
				DebugLocation(104, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc338); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(104, 25);
				// SugarWalker.g:104:25: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:104:26: attr= attribute
					{
					DebugLocation(104, 30);
					PushFollow(Follow._attribute_in_global_alloc343);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(104, 43);
				// SugarWalker.g:104:43: (has_extern= 'extern' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==147))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:104:44: has_extern= 'extern'
					{
					DebugLocation(104, 54);
					has_extern=(CommonTree)Match(input,147,Follow._147_in_global_alloc350); 

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(104, 67);
				PushFollow(Follow._type_name_in_global_alloc356);
				a=type_name();
				PopFollow();

				DebugLocation(104, 79);
				PushFollow(Follow._ident_list_in_global_alloc360);
				b=ident_list();
				PopFollow();

				DebugLocation(104, 92);
				PushFollow(Follow._expr_list_in_global_alloc364);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(105, 2);

						item = new GlobalAlloc(a, b, c, attr, AllocType.Bracket);
						if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
						value.Add(item);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:110:4: ^( ':=' (attr= attribute )? (has_extern= 'extern' )? d= ident_list e= expr_list )
				{
				DebugLocation(110, 4);
				DebugLocation(110, 6);
				Match(input,113,Follow._113_in_global_alloc374); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(110, 11);
				// SugarWalker.g:110:11: (attr= attribute )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:110:12: attr= attribute
					{
					DebugLocation(110, 16);
					PushFollow(Follow._attribute_in_global_alloc379);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(9); }

				DebugLocation(110, 29);
				// SugarWalker.g:110:29: (has_extern= 'extern' )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==147))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:110:30: has_extern= 'extern'
					{
					DebugLocation(110, 40);
					has_extern=(CommonTree)Match(input,147,Follow._147_in_global_alloc386); 

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(110, 53);
				PushFollow(Follow._ident_list_in_global_alloc392);
				d=ident_list();
				PopFollow();

				DebugLocation(110, 66);
				PushFollow(Follow._expr_list_in_global_alloc396);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(111, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							item = new GlobalAlloc(new AutoType(), d[i], e[k], attr, AllocType.Equal);
							if (has_extern != null) item.Attribute.Add(new Attr { Name = "extern" });
							value.Add(item);
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:123:1: global_typedef returns [GlobalTypeDef value] : ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(123, 1);
		try
		{
			// SugarWalker.g:124:2: ( ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:124:4: ^( Stmt_Typedef (attr= attribute )? a= type_name b= ident )
			{
			DebugLocation(124, 4);
			DebugLocation(124, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_global_typedef416); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(124, 19);
			// SugarWalker.g:124:19: (attr= attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Attribute))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:124:20: attr= attribute
				{
				DebugLocation(124, 24);
				PushFollow(Follow._attribute_in_global_typedef421);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(124, 38);
			PushFollow(Follow._type_name_in_global_typedef427);
			a=type_name();
			PopFollow();

			DebugLocation(124, 50);
			PushFollow(Follow._ident_in_global_typedef431);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(125, 2);

					value = new GlobalTypeDef(a, b);
					if (attr != null) value.Attribute = attr;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:131:1: attribute_args returns [string value] : (a= NUMBER |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(131, 1);
		try
		{
			// SugarWalker.g:132:2: (a= NUMBER |a= STRING |b= ident )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt13 = 1;
				}
				break;
			case STRING:
				{
				alt13 = 2;
				}
				break;
			case IDENT:
				{
				alt13 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:4: a= NUMBER
				{
				DebugLocation(132, 5);
				a=(CommonTree)Match(input,NUMBER,Follow._NUMBER_in_attribute_args452); 
				DebugLocation(133, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:136:4: a= STRING
				{
				DebugLocation(136, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args462); 
				DebugLocation(137, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:140:4: b= ident
				{
				DebugLocation(140, 5);
				PushFollow(Follow._ident_in_attribute_args472);
				b=ident();
				PopFollow();

				DebugLocation(141, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:146:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		CommonTree d = default(CommonTree);
		CommonTree e = default(CommonTree);
		CommonTree f = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(146, 1);
		try
		{
			// SugarWalker.g:151:2: ( ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:151:4: ^( Attribute (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' ) (b= attribute_args )* )
			{
			DebugLocation(151, 4);
			DebugLocation(151, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item496); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(151, 16);
			// SugarWalker.g:151:16: (a= ident |c= 'const' |d= 'static' |e= 'public' |f= 'virtual' )
			int alt14=5;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt14 = 1;
				}
				break;
			case 142:
				{
				alt14 = 2;
				}
				break;
			case 166:
				{
				alt14 = 3;
				}
				break;
			case 163:
				{
				alt14 = 4;
				}
				break;
			case 178:
				{
				alt14 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:151:17: a= ident
				{
				DebugLocation(151, 18);
				PushFollow(Follow._ident_in_attribute_item501);
				a=ident();
				PopFollow();

				DebugLocation(151, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:151:48: c= 'const'
				{
				DebugLocation(151, 49);
				c=(CommonTree)Match(input,142,Follow._142_in_attribute_item509); 
				DebugLocation(151, 58);
				 value.Name = "const"; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:151:87: d= 'static'
				{
				DebugLocation(151, 88);
				d=(CommonTree)Match(input,166,Follow._166_in_attribute_item517); 
				DebugLocation(151, 98);
				 value.Name = "static"; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:151:128: e= 'public'
				{
				DebugLocation(151, 129);
				e=(CommonTree)Match(input,163,Follow._163_in_attribute_item525); 
				DebugLocation(151, 139);
				 value.Name = "public"; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:151:169: f= 'virtual'
				{
				DebugLocation(151, 170);
				f=(CommonTree)Match(input,178,Follow._178_in_attribute_item533); 
				DebugLocation(151, 181);
				 value.Name = "virtual"; 

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(151, 211);
			// SugarWalker.g:151:211: (b= attribute_args )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENT||LA15_0==NUMBER||LA15_0==STRING))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:151:212: b= attribute_args
					{
					DebugLocation(151, 213);
					PushFollow(Follow._attribute_args_in_attribute_item541);
					b=attribute_args();
					PopFollow();

					DebugLocation(151, 229);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:154:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(154, 1);
		try
		{
			// SugarWalker.g:159:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:159:4: (a= attribute_item )+
			{
			DebugLocation(159, 4);
			// SugarWalker.g:159:4: (a= attribute_item )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==Attribute))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:159:5: a= attribute_item
					{
					DebugLocation(159, 6);
					PushFollow(Follow._attribute_item_in_attribute569);
					a=attribute_item();
					PopFollow();

					DebugLocation(159, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:162:1: namespace_def returns [Namespace value] : ^( Namespace a= ident (b= global_block )? ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(162, 1);
		try
		{
			// SugarWalker.g:163:2: ( ^( Namespace a= ident (b= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:163:4: ^( Namespace a= ident (b= global_block )? )
			{
			DebugLocation(163, 4);
			DebugLocation(163, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def590); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(163, 17);
			PushFollow(Follow._ident_in_namespace_def594);
			a=ident();
			PopFollow();

			DebugLocation(163, 24);
			// SugarWalker.g:163:24: (b= global_block )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Global_Block))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:163:25: b= global_block
				{
				DebugLocation(163, 26);
				PushFollow(Follow._global_block_in_namespace_def599);
				b=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(164, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:169:1: import_def returns [Import value] : ^( Import (attr= attribute )? (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		List<Attr> attr = default(List<Attr>);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(169, 1);
		try
		{
			// SugarWalker.g:174:2: ( ^( Import (attr= attribute )? (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:174:4: ^( Import (attr= attribute )? (a= STRING )* )
			{
			DebugLocation(174, 4);
			DebugLocation(174, 6);
			Match(input,Import,Follow._Import_in_import_def626); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(174, 13);
				// SugarWalker.g:174:13: (attr= attribute )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==Attribute))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:174:14: attr= attribute
					{
					DebugLocation(174, 18);
					PushFollow(Follow._attribute_in_import_def631);
					attr=attribute();
					PopFollow();

					DebugLocation(174, 29);
					 value.Attribute = attr; 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(174, 61);
				// SugarWalker.g:174:61: (a= STRING )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==STRING))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:174:62: a= STRING
						{
						DebugLocation(174, 63);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def641); 
						DebugLocation(174, 71);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:177:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(177, 1);
		try
		{
			// SugarWalker.g:178:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:178:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(178, 4);
			DebugLocation(178, 6);
			Match(input,Enum,Follow._Enum_in_enum_def662); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(178, 11);
			// SugarWalker.g:178:11: (attr= attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Attribute))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:178:12: attr= attribute
				{
				DebugLocation(178, 16);
				PushFollow(Follow._attribute_in_enum_def667);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(178, 30);
			PushFollow(Follow._ident_in_enum_def673);
			a=ident();
			PopFollow();

			DebugLocation(178, 38);
			PushFollow(Follow._ident_list_in_enum_def677);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(179, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:184:1: class_def returns [Class value] : ^( Class (case_class= 'case' )? (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		CommonTree case_class = default(CommonTree);
		CommonTree pub = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<SugarType> b = default(List<SugarType>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(184, 1);
		try
		{
			// SugarWalker.g:185:2: ( ^( Class (case_class= 'case' )? (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:185:4: ^( Class (case_class= 'case' )? (pub= 'public' )? (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(185, 4);
			DebugLocation(185, 6);
			Match(input,Class,Follow._Class_in_class_def697); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(185, 12);
			// SugarWalker.g:185:12: (case_class= 'case' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==139))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:13: case_class= 'case'
				{
				DebugLocation(185, 23);
				case_class=(CommonTree)Match(input,139,Follow._139_in_class_def702); 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(185, 33);
			// SugarWalker.g:185:33: (pub= 'public' )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==163))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:34: pub= 'public'
				{
				DebugLocation(185, 37);
				pub=(CommonTree)Match(input,163,Follow._163_in_class_def709); 

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(185, 49);
			// SugarWalker.g:185:49: (attr= attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Attribute))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:50: attr= attribute
				{
				DebugLocation(185, 54);
				PushFollow(Follow._attribute_in_class_def716);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(185, 68);
			PushFollow(Follow._ident_in_class_def722);
			a=ident();
			PopFollow();

			DebugLocation(185, 75);
			// SugarWalker.g:185:75: (b= generic_parameter )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Generic_Patameters))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:76: b= generic_parameter
				{
				DebugLocation(185, 77);
				PushFollow(Follow._generic_parameter_in_class_def727);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(185, 98);
			// SugarWalker.g:185:98: (c= func_args )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Func_Args))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:99: c= func_args
				{
				DebugLocation(185, 100);
				PushFollow(Follow._func_args_in_class_def734);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(185, 113);
			// SugarWalker.g:185:113: (d= ident_list )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Ident_List))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:114: d= ident_list
				{
				DebugLocation(185, 115);
				PushFollow(Follow._ident_list_in_class_def741);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(185, 129);
			// SugarWalker.g:185:129: (e= global_block )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Global_Block))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:185:130: e= global_block
				{
				DebugLocation(185, 131);
				PushFollow(Follow._global_block_in_class_def748);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(186, 2);

					value = new Class(a, b, c, d, e, attr);
					if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
					if (case_class != null) value.Attribute.Add(new Attr { Name = "case" });
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarWalker.g:193:1: type_ident returns [SugarType value] : ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' | 'thread_local' |a= ident )* ) ;
	[GrammarRule("type_ident")]
	private SugarType type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 14);
		TraceIn("type_ident", 14);
		SugarType value = default(SugarType);


		string a = default(string);


			string type = "";

		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(193, 1);
		try
		{
			// SugarWalker.g:198:2: ( ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' | 'thread_local' |a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:198:4: ^( Type_Ident ( 'const' | 'static' | 'long' | 'struct' | 'thread_local' |a= ident )* )
			{
			DebugLocation(198, 4);
			DebugLocation(198, 6);
			Match(input,Type_Ident,Follow._Type_Ident_in_type_ident775); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(198, 17);
				// SugarWalker.g:198:17: ( 'const' | 'static' | 'long' | 'struct' | 'thread_local' |a= ident )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=7;
					try { DebugEnterDecision(28, false);
					switch (input.LA(1))
					{
					case 142:
						{
						alt28 = 1;
						}
						break;
					case 166:
						{
						alt28 = 2;
						}
						break;
					case 156:
						{
						alt28 = 3;
						}
						break;
					case 167:
						{
						alt28 = 4;
						}
						break;
					case 170:
						{
						alt28 = 5;
						}
						break;
					case IDENT:
						{
						alt28 = 6;
						}
						break;
					}

					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:198:19: 'const'
						{
						DebugLocation(198, 19);
						Match(input,142,Follow._142_in_type_ident779); 
						DebugLocation(198, 27);
						 type+="const "; 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:199:10: 'static'
						{
						DebugLocation(199, 10);
						Match(input,166,Follow._166_in_type_ident792); 
						DebugLocation(199, 19);
						 type+="static "; 

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarWalker.g:200:10: 'long'
						{
						DebugLocation(200, 10);
						Match(input,156,Follow._156_in_type_ident805); 
						DebugLocation(200, 18);
						 type+="long "; 

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarWalker.g:201:10: 'struct'
						{
						DebugLocation(201, 10);
						Match(input,167,Follow._167_in_type_ident819); 
						DebugLocation(201, 19);
						 type+="struct "; 

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// SugarWalker.g:202:10: 'thread_local'
						{
						DebugLocation(202, 10);
						Match(input,170,Follow._170_in_type_ident832); 
						DebugLocation(202, 25);
						 type+="thread_local "; 

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// SugarWalker.g:203:10: a= ident
						{
						DebugLocation(203, 11);
						PushFollow(Follow._ident_in_type_ident847);
						a=ident();
						PopFollow();

						DebugLocation(203, 18);
						 type+=Alias(a); 

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(205, 2);

					value = new IdentType(type.Trim());
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ident", 14);
			LeaveRule("type_ident", 14);
			LeaveRule_type_ident();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return value;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_type_template();
	partial void LeaveRule_type_template();

	// $ANTLR start "type_template"
	// SugarWalker.g:210:1: type_template returns [SugarType value] : ^( Type_Template a= type_name (b= type_name )* ) ;
	[GrammarRule("type_template")]
	private SugarType type_template()
	{
		EnterRule_type_template();
		EnterRule("type_template", 15);
		TraceIn("type_template", 15);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		SugarType b = default(SugarType);


			List<SugarType> list = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_template");
		DebugLocation(210, 1);
		try
		{
			// SugarWalker.g:215:2: ( ^( Type_Template a= type_name (b= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:215:4: ^( Type_Template a= type_name (b= type_name )* )
			{
			DebugLocation(215, 4);
			DebugLocation(215, 6);
			Match(input,Type_Template,Follow._Type_Template_in_type_template884); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(215, 21);
			PushFollow(Follow._type_name_in_type_template888);
			a=type_name();
			PopFollow();

			DebugLocation(215, 32);
			// SugarWalker.g:215:32: (b= type_name )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if (((LA29_0>=Type_Array && LA29_0<=Type_Ident)||(LA29_0>=Type_Ref && LA29_0<=Type_Template)))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:215:33: b= type_name
					{
					DebugLocation(215, 34);
					PushFollow(Follow._type_name_in_type_template893);
					b=type_name();
					PopFollow();

					DebugLocation(215, 45);
					list.Add(b);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(216, 2);

					value = new TemplateType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_template", 15);
			LeaveRule("type_template", 15);
			LeaveRule_type_template();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template"); }
		return value;

	}
	// $ANTLR end "type_template"

	partial void EnterRule_type_array();
	partial void LeaveRule_type_array();

	// $ANTLR start "type_array"
	// SugarWalker.g:221:1: type_array returns [SugarType value] : ^( Type_Array a= type_name (b= expr )+ ) ;
	[GrammarRule("type_array")]
	private SugarType type_array()
	{
		EnterRule_type_array();
		EnterRule("type_array", 16);
		TraceIn("type_array", 16);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);
		Expr b = default(Expr);


			List<Expr> list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "type_array");
		DebugLocation(221, 1);
		try
		{
			// SugarWalker.g:226:2: ( ^( Type_Array a= type_name (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:226:4: ^( Type_Array a= type_name (b= expr )+ )
			{
			DebugLocation(226, 4);
			DebugLocation(226, 6);
			Match(input,Type_Array,Follow._Type_Array_in_type_array922); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(226, 18);
			PushFollow(Follow._type_name_in_type_array926);
			a=type_name();
			PopFollow();

			DebugLocation(226, 29);
			// SugarWalker.g:226:29: (b= expr )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if (((LA30_0>=Expr_Access && LA30_0<=Expr_Alloc_Equal)||(LA30_0>=Expr_Bin && LA30_0<=Expr_Where)||LA30_0==IDENT||LA30_0==Match_Expr||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||LA30_0==89||LA30_0==92||LA30_0==96||LA30_0==99||LA30_0==104||LA30_0==110||LA30_0==113||LA30_0==118||LA30_0==121||LA30_0==128||LA30_0==131||LA30_0==135||LA30_0==183||LA30_0==DOUBLE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:226:30: b= expr
					{
					DebugLocation(226, 31);
					PushFollow(Follow._expr_in_type_array931);
					b=expr();
					PopFollow();

					DebugLocation(226, 37);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(227, 2);

					value = new ArrayType(a, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_array", 16);
			LeaveRule("type_array", 16);
			LeaveRule_type_array();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "type_array"); }
		return value;

	}
	// $ANTLR end "type_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarWalker.g:232:1: type_star returns [SugarType value] : ^( Type_Star a= type_name '*' ( '*' )* ) ;
	[GrammarRule("type_star")]
	private SugarType type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 17);
		TraceIn("type_star", 17);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(232, 1);
		try
		{
			// SugarWalker.g:233:2: ( ^( Type_Star a= type_name '*' ( '*' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:233:4: ^( Type_Star a= type_name '*' ( '*' )* )
			{
			DebugLocation(233, 4);
			DebugLocation(233, 6);
			Match(input,Type_Star,Follow._Type_Star_in_type_star955); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(233, 17);
			PushFollow(Follow._type_name_in_type_star959);
			a=type_name();
			PopFollow();

			DebugLocation(233, 28);
			Match(input,95,Follow._95_in_type_star961); 
			DebugLocation(233, 32);
			 value = new StarType(a); 
			DebugLocation(233, 62);
			// SugarWalker.g:233:62: ( '*' )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==95))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:233:63: '*'
					{
					DebugLocation(233, 63);
					Match(input,95,Follow._95_in_type_star966); 
					DebugLocation(233, 67);
					 value = new StarType(value); 

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_star", 17);
			LeaveRule("type_star", 17);
			LeaveRule_type_star();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return value;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_ref();
	partial void LeaveRule_type_ref();

	// $ANTLR start "type_ref"
	// SugarWalker.g:237:1: type_ref returns [SugarType value] : ^( Type_Ref a= type_name ) ;
	[GrammarRule("type_ref")]
	private SugarType type_ref()
	{
		EnterRule_type_ref();
		EnterRule("type_ref", 18);
		TraceIn("type_ref", 18);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_ref");
		DebugLocation(237, 1);
		try
		{
			// SugarWalker.g:238:2: ( ^( Type_Ref a= type_name ) )
			DebugEnterAlt(1);
			// SugarWalker.g:238:4: ^( Type_Ref a= type_name )
			{
			DebugLocation(238, 4);
			DebugLocation(238, 6);
			Match(input,Type_Ref,Follow._Type_Ref_in_type_ref988); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(238, 16);
			PushFollow(Follow._type_name_in_type_ref992);
			a=type_name();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(239, 2);

					value = new RefType(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_ref", 18);
			LeaveRule("type_ref", 18);
			LeaveRule_type_ref();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ref"); }
		return value;

	}
	// $ANTLR end "type_ref"

	partial void EnterRule_type_func();
	partial void LeaveRule_type_func();

	// $ANTLR start "type_func"
	// SugarWalker.g:244:1: type_func returns [SugarType value] : ^( Type_Func (a= type_list )? (b= type_name )? ) ;
	[GrammarRule("type_func")]
	private SugarType type_func()
	{
		EnterRule_type_func();
		EnterRule("type_func", 19);
		TraceIn("type_func", 19);
		SugarType value = default(SugarType);


		List<SugarType> a = default(List<SugarType>);
		SugarType b = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_func");
		DebugLocation(244, 1);
		try
		{
			// SugarWalker.g:245:2: ( ^( Type_Func (a= type_list )? (b= type_name )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:245:4: ^( Type_Func (a= type_list )? (b= type_name )? )
			{
			DebugLocation(245, 4);
			DebugLocation(245, 6);
			Match(input,Type_Func,Follow._Type_Func_in_type_func1012); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(245, 16);
				// SugarWalker.g:245:16: (a= type_list )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==Type_List))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:245:17: a= type_list
					{
					DebugLocation(245, 18);
					PushFollow(Follow._type_list_in_type_func1017);
					a=type_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(245, 31);
				// SugarWalker.g:245:31: (b= type_name )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if (((LA33_0>=Type_Array && LA33_0<=Type_Ident)||(LA33_0>=Type_Ref && LA33_0<=Type_Template)))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:245:32: b= type_name
					{
					DebugLocation(245, 33);
					PushFollow(Follow._type_name_in_type_func1024);
					b=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(246, 2);

					value = new FuncType(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_func", 19);
			LeaveRule("type_func", 19);
			LeaveRule_type_func();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "type_func"); }
		return value;

	}
	// $ANTLR end "type_func"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarWalker.g:251:1: type_list returns [List<SugarType> value] : ^( Type_List (a= type_name )* ) ;
	[GrammarRule("type_list")]
	private List<SugarType> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 20);
		TraceIn("type_list", 20);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(251, 1);
		try
		{
			// SugarWalker.g:256:2: ( ^( Type_List (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:256:4: ^( Type_List (a= type_name )* )
			{
			DebugLocation(256, 4);
			DebugLocation(256, 6);
			Match(input,Type_List,Follow._Type_List_in_type_list1050); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(256, 16);
				// SugarWalker.g:256:16: (a= type_name )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if (((LA34_0>=Type_Array && LA34_0<=Type_Ident)||(LA34_0>=Type_Ref && LA34_0<=Type_Template)))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:256:17: a= type_name
						{
						DebugLocation(256, 18);
						PushFollow(Follow._type_name_in_type_list1055);
						a=type_name();
						PopFollow();

						DebugLocation(256, 29);
						 value.Add(a); 

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_list", 20);
			LeaveRule("type_list", 20);
			LeaveRule_type_list();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return value;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:259:1: type_name returns [SugarType value] : (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func );
	[GrammarRule("type_name")]
	private SugarType type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 21);
		TraceIn("type_name", 21);
		SugarType value = default(SugarType);


		SugarType a = default(SugarType);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(259, 1);
		try
		{
			// SugarWalker.g:260:2: (a= type_array |a= type_ref |a= type_star |a= type_template |a= type_ident |a= type_func )
			int alt35=6;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case Type_Array:
				{
				alt35 = 1;
				}
				break;
			case Type_Ref:
				{
				alt35 = 2;
				}
				break;
			case Type_Star:
				{
				alt35 = 3;
				}
				break;
			case Type_Template:
				{
				alt35 = 4;
				}
				break;
			case Type_Ident:
				{
				alt35 = 5;
				}
				break;
			case Type_Func:
				{
				alt35 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:260:4: a= type_array
				{
				DebugLocation(260, 5);
				PushFollow(Follow._type_array_in_type_name1078);
				a=type_array();
				PopFollow();

				DebugLocation(260, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:261:4: a= type_ref
				{
				DebugLocation(261, 5);
				PushFollow(Follow._type_ref_in_type_name1087);
				a=type_ref();
				PopFollow();

				DebugLocation(261, 15);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:262:4: a= type_star
				{
				DebugLocation(262, 5);
				PushFollow(Follow._type_star_in_type_name1096);
				a=type_star();
				PopFollow();

				DebugLocation(262, 16);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:263:4: a= type_template
				{
				DebugLocation(263, 5);
				PushFollow(Follow._type_template_in_type_name1105);
				a=type_template();
				PopFollow();

				DebugLocation(263, 20);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:264:4: a= type_ident
				{
				DebugLocation(264, 5);
				PushFollow(Follow._type_ident_in_type_name1114);
				a=type_ident();
				PopFollow();

				DebugLocation(264, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:265:4: a= type_func
				{
				DebugLocation(265, 5);
				PushFollow(Follow._type_func_in_type_name1123);
				a=type_func();
				PopFollow();

				DebugLocation(265, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 21);
			LeaveRule("type_name", 21);
			LeaveRule_type_name();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:268:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= alloc_expr )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 22);
		TraceIn("func_args", 22);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		ExprAlloc a = default(ExprAlloc);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(268, 1);
		try
		{
			// SugarWalker.g:273:2: ( ^( Func_Args (a= alloc_expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:273:4: ^( Func_Args (a= alloc_expr )* )
			{
			DebugLocation(273, 4);
			DebugLocation(273, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args1146); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(273, 16);
				// SugarWalker.g:273:16: (a= alloc_expr )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if (((LA36_0>=Expr_Alloc_Bracket && LA36_0<=Expr_Alloc_Equal)))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:273:17: a= alloc_expr
						{
						DebugLocation(273, 18);
						PushFollow(Follow._alloc_expr_in_func_args1151);
						a=alloc_expr();
						PopFollow();

						DebugLocation(274, 2);

								value.Add(a);
							

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 22);
			LeaveRule("func_args", 22);
			LeaveRule_func_args();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:279:1: generic_parameter returns [List<SugarType> value] : ^( Generic_Patameters (a= type_name )* ) ;
	[GrammarRule("generic_parameter")]
	private List<SugarType> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		List<SugarType> value = default(List<SugarType>);


		SugarType a = default(SugarType);


			value = new List<SugarType>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(279, 1);
		try
		{
			// SugarWalker.g:284:2: ( ^( Generic_Patameters (a= type_name )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:284:4: ^( Generic_Patameters (a= type_name )* )
			{
			DebugLocation(284, 4);
			DebugLocation(284, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter1178); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(284, 25);
				// SugarWalker.g:284:25: (a= type_name )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if (((LA37_0>=Type_Array && LA37_0<=Type_Ident)||(LA37_0>=Type_Ref && LA37_0<=Type_Template)))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:284:26: a= type_name
						{
						DebugLocation(284, 27);
						PushFollow(Follow._type_name_in_generic_parameter1183);
						a=type_name();
						PopFollow();

						DebugLocation(284, 38);
						 value.Add(a); 

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:287:1: func_def returns [FuncDef value] : ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		FuncDef value = default(FuncDef);


		CommonTree pub = default(CommonTree);
		CommonTree vir = default(CommonTree);
		CommonTree deconstructor = default(CommonTree);
		CommonTree op = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		SugarType a = default(SugarType);
		string b = default(string);
		List<SugarType> x = default(List<SugarType>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(287, 1);
		try
		{
			// SugarWalker.g:292:2: ( ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:292:4: ^( Func_Def (pub= 'public' )? (vir= 'virtual' )? (attr= attribute )? (a= type_name )? (deconstructor= '~' )? (b= ident |op= ( '+' | '-' | '*' | '/' ) )? (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr | Func_Declare ) )
			{
			DebugLocation(292, 4);
			DebugLocation(292, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def1209); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(292, 15);
			// SugarWalker.g:292:15: (pub= 'public' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==163))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:16: pub= 'public'
				{
				DebugLocation(292, 19);
				pub=(CommonTree)Match(input,163,Follow._163_in_func_def1214); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(292, 31);
			// SugarWalker.g:292:31: (vir= 'virtual' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==178))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:32: vir= 'virtual'
				{
				DebugLocation(292, 35);
				vir=(CommonTree)Match(input,178,Follow._178_in_func_def1221); 

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(292, 48);
			// SugarWalker.g:292:48: (attr= attribute )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Attribute))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:49: attr= attribute
				{
				DebugLocation(292, 53);
				PushFollow(Follow._attribute_in_func_def1228);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(292, 65);
			// SugarWalker.g:292:65: (a= type_name )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if (((LA41_0>=Type_Array && LA41_0<=Type_Ident)||(LA41_0>=Type_Ref && LA41_0<=Type_Template)))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:66: a= type_name
				{
				DebugLocation(292, 67);
				PushFollow(Follow._type_name_in_func_def1234);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(292, 80);
			// SugarWalker.g:292:80: (deconstructor= '~' )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==186))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:81: deconstructor= '~'
				{
				DebugLocation(292, 94);
				deconstructor=(CommonTree)Match(input,186,Follow._186_in_func_def1241); 

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(292, 101);
			// SugarWalker.g:292:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?
			int alt43=3;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			try
			{
				alt43 = dfa43.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:102: b= ident
				{
				DebugLocation(292, 103);
				PushFollow(Follow._ident_in_func_def1248);
				b=ident();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:292:112: op= ( '+' | '-' | '*' | '/' )
				{
				DebugLocation(292, 114);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(292, 135);
			// SugarWalker.g:292:135: (x= generic_parameter )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==Generic_Patameters))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:136: x= generic_parameter
				{
				DebugLocation(292, 137);
				PushFollow(Follow._generic_parameter_in_func_def1269);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(292, 159);
			// SugarWalker.g:292:159: (args= func_args )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==Func_Args))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:292:160: args= func_args
				{
				DebugLocation(292, 164);
				PushFollow(Follow._func_args_in_func_def1277);
				args=func_args();
				PopFollow();

				DebugLocation(292, 175);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(293, 2);
			// SugarWalker.g:293:2: (e= stmt_block |f= expr | Func_Declare )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case Stmt_Block:
				{
				alt46 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 113:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 183:
			case DOUBLE:
				{
				alt46 = 2;
				}
				break;
			case Func_Declare:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:293:4: e= stmt_block
				{
				DebugLocation(293, 5);
				PushFollow(Follow._stmt_block_in_func_def1288);
				e=stmt_block();
				PopFollow();

				DebugLocation(294, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null)
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:310:4: f= expr
				{
				DebugLocation(310, 5);
				PushFollow(Follow._expr_in_func_def1298);
				f=expr();
				PopFollow();

				DebugLocation(311, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null)
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:336:4: Func_Declare
				{
				DebugLocation(336, 4);
				Match(input,Func_Declare,Follow._Func_Declare_in_func_def1306); 
				DebugLocation(337, 2);

						if (attr != null) value.Attribute = attr;
						if (pub != null) value.Attribute.Add(new Attr { Name = "public" });
						if (vir != null) value.Attribute.Add(new Attr { Name = "virtual" });
						value.Attribute.Add(new Attr { Name = "extern" });
						value.Type = a;
						value.Name = b != null ? b : "operator" + op.Text;
						if (deconstructor != null)
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if ((a is IdentType && ((IdentType)a).Type=="void") || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = null;
					

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:366:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 25);
		TraceIn("stmt_block", 25);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(366, 4);
		try
		{
			// SugarWalker.g:371:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:371:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(371, 4);
			DebugLocation(371, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block1334); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(371, 17);
				// SugarWalker.g:371:17: (a= stmt )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if (((LA47_0>=Expr_Access && LA47_0<=Expr_Alloc_Equal)||(LA47_0>=Expr_Bin && LA47_0<=Expr_Where)||LA47_0==IDENT||LA47_0==Match_Expr||LA47_0==Match_Tuple||LA47_0==NUMBER||LA47_0==STRING||(LA47_0>=Stmt_Defer && LA47_0<=Stmt_While)||LA47_0==89||LA47_0==92||LA47_0==96||LA47_0==99||LA47_0==104||LA47_0==110||LA47_0==113||(LA47_0>=117 && LA47_0<=118)||LA47_0==121||LA47_0==128||(LA47_0>=130 && LA47_0<=131)||LA47_0==135||LA47_0==183||LA47_0==DOUBLE))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:371:18: a= stmt
						{
						DebugLocation(371, 19);
						PushFollow(Follow._stmt_in_stmt_block1339);
						a=stmt();
						PopFollow();

						DebugLocation(371, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 25);
			LeaveRule("stmt_block", 25);
			LeaveRule_stmt_block();
		}
		DebugLocation(372, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:374:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 26);
		TraceIn("stmt", 26);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(374, 1);
		try
		{
			// SugarWalker.g:379:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_switch |a= stmt_defer |b= stmt_translate )
			int alt48=9;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 183:
			case DOUBLE:
				{
				alt48 = 1;
				}
				break;
			case 113:
				{
				int LA48_2 = input.LA(2);

				if ((LA48_2==DOWN))
				{
					int LA48_11 = input.LA(3);

					if (((LA48_11>=Expr_Access && LA48_11<=Expr_Alloc_Equal)||(LA48_11>=Expr_Bin && LA48_11<=Expr_Where)||LA48_11==IDENT||LA48_11==Match_Expr||LA48_11==Match_Tuple||LA48_11==NUMBER||LA48_11==STRING||LA48_11==89||LA48_11==92||LA48_11==96||LA48_11==99||LA48_11==104||LA48_11==110||LA48_11==113||LA48_11==118||LA48_11==121||LA48_11==128||LA48_11==131||LA48_11==135||LA48_11==183||LA48_11==DOUBLE))
					{
						alt48 = 1;
					}
					else if ((LA48_11==Ident_List))
					{
						alt48 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt48 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt48 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt48 = 4;
				}
				break;
			case Stmt_For:
				{
				alt48 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt48 = 6;
				}
				break;
			case Stmt_Switch:
				{
				alt48 = 7;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt48 = 8;
				}
				break;
			case 117:
			case 130:
				{
				alt48 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:379:4: a= stmt_expr
				{
				DebugLocation(379, 5);
				PushFollow(Follow._stmt_expr_in_stmt1369);
				a=stmt_expr();
				PopFollow();

				DebugLocation(379, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:380:4: a= stmt_return
				{
				DebugLocation(380, 5);
				PushFollow(Follow._stmt_return_in_stmt1378);
				a=stmt_return();
				PopFollow();

				DebugLocation(380, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:381:4: a= stmt_if
				{
				DebugLocation(381, 5);
				PushFollow(Follow._stmt_if_in_stmt1387);
				a=stmt_if();
				PopFollow();

				DebugLocation(381, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:382:4: a= stmt_while
				{
				DebugLocation(382, 5);
				PushFollow(Follow._stmt_while_in_stmt1396);
				a=stmt_while();
				PopFollow();

				DebugLocation(382, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:383:4: a= stmt_for
				{
				DebugLocation(383, 5);
				PushFollow(Follow._stmt_for_in_stmt1405);
				a=stmt_for();
				PopFollow();

				DebugLocation(383, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:384:4: a= stmt_try
				{
				DebugLocation(384, 5);
				PushFollow(Follow._stmt_try_in_stmt1414);
				a=stmt_try();
				PopFollow();

				DebugLocation(384, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:385:4: a= stmt_switch
				{
				DebugLocation(385, 5);
				PushFollow(Follow._stmt_switch_in_stmt1423);
				a=stmt_switch();
				PopFollow();

				DebugLocation(385, 18);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:386:4: a= stmt_defer
				{
				DebugLocation(386, 5);
				PushFollow(Follow._stmt_defer_in_stmt1432);
				a=stmt_defer();
				PopFollow();

				DebugLocation(386, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:387:4: b= stmt_translate
				{
				DebugLocation(387, 5);
				PushFollow(Follow._stmt_translate_in_stmt1441);
				b=stmt_translate();
				PopFollow();

				DebugLocation(387, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 26);
			LeaveRule("stmt", 26);
			LeaveRule_stmt();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:390:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 27);
		TraceIn("stmt_translate", 27);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(390, 1);
		try
		{
			// SugarWalker.g:395:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) | ^( '<<' a= expr b= expr ) )
			int alt49=3;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case 130:
				{
				alt49 = 1;
				}
				break;
			case 113:
				{
				alt49 = 2;
				}
				break;
			case 117:
				{
				alt49 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:395:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(395, 4);
				DebugLocation(395, 6);
				Match(input,130,Follow._130_in_stmt_translate1464); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(395, 12);
				PushFollow(Follow._expr_in_stmt_translate1468);
				a=expr();
				PopFollow();

				DebugLocation(395, 19);
				PushFollow(Follow._expr_in_stmt_translate1472);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(396, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:402:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(402, 4);
				DebugLocation(402, 6);
				Match(input,113,Follow._113_in_stmt_translate1482); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(402, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1486);
				d=ident_list();
				PopFollow();

				DebugLocation(402, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1490);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(403, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc(new AutoType(), d[i], e[k], AllocType.Equal)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:411:4: ^( '<<' a= expr b= expr )
				{
				DebugLocation(411, 4);
				DebugLocation(411, 6);
				Match(input,117,Follow._117_in_stmt_translate1500); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(411, 12);
				PushFollow(Follow._expr_in_stmt_translate1504);
				a=expr();
				PopFollow();

				DebugLocation(411, 19);
				PushFollow(Follow._expr_in_stmt_translate1508);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 27);
			LeaveRule("stmt_translate", 27);
			LeaveRule_stmt_translate();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_switch_item_list();
	partial void LeaveRule_stmt_switch_item_list();

	// $ANTLR start "stmt_switch_item_list"
	// SugarWalker.g:414:1: stmt_switch_item_list returns [List<StmtSwitchItem> value] : ( ^( Switch_Item a= expr_list b= stmt_block ) )* ;
	[GrammarRule("stmt_switch_item_list")]
	private List<StmtSwitchItem> stmt_switch_item_list()
	{
		EnterRule_stmt_switch_item_list();
		EnterRule("stmt_switch_item_list", 28);
		TraceIn("stmt_switch_item_list", 28);
		List<StmtSwitchItem> value = default(List<StmtSwitchItem>);


		List<Expr> a = default(List<Expr>);
		StmtBlock b = default(StmtBlock);


			value = new List<StmtSwitchItem>();

		try { DebugEnterRule(GrammarFileName, "stmt_switch_item_list");
		DebugLocation(414, 1);
		try
		{
			// SugarWalker.g:419:2: ( ( ^( Switch_Item a= expr_list b= stmt_block ) )* )
			DebugEnterAlt(1);
			// SugarWalker.g:419:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			{
			DebugLocation(419, 4);
			// SugarWalker.g:419:4: ( ^( Switch_Item a= expr_list b= stmt_block ) )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==Switch_Item))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:420:3: ^( Switch_Item a= expr_list b= stmt_block )
					{
					DebugLocation(420, 3);
					DebugLocation(420, 5);
					Match(input,Switch_Item,Follow._Switch_Item_in_stmt_switch_item_list1533); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(420, 18);
					PushFollow(Follow._expr_list_in_stmt_switch_item_list1537);
					a=expr_list();
					PopFollow();

					DebugLocation(420, 30);
					PushFollow(Follow._stmt_block_in_stmt_switch_item_list1541);
					b=stmt_block();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(421, 3);

								value.Add(new StmtSwitchItem(a, b));
							

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch_item_list", 28);
			LeaveRule("stmt_switch_item_list", 28);
			LeaveRule_stmt_switch_item_list();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch_item_list"); }
		return value;

	}
	// $ANTLR end "stmt_switch_item_list"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarWalker.g:427:1: stmt_switch returns [Stmt value] : ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private Stmt stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 29);
		TraceIn("stmt_switch", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		List<StmtSwitchItem> b = default(List<StmtSwitchItem>);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(427, 1);
		try
		{
			// SugarWalker.g:428:2: ( ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:428:4: ^( Stmt_Switch (a= expr )? b= stmt_switch_item_list (c= stmt_block )? )
			{
			DebugLocation(428, 4);
			DebugLocation(428, 6);
			Match(input,Stmt_Switch,Follow._Stmt_Switch_in_stmt_switch1568); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(428, 18);
				// SugarWalker.g:428:18: (a= expr )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if (((LA51_0>=Expr_Access && LA51_0<=Expr_Alloc_Equal)||(LA51_0>=Expr_Bin && LA51_0<=Expr_Where)||LA51_0==IDENT||LA51_0==Match_Expr||LA51_0==Match_Tuple||LA51_0==NUMBER||LA51_0==STRING||LA51_0==89||LA51_0==92||LA51_0==96||LA51_0==99||LA51_0==104||LA51_0==110||LA51_0==113||LA51_0==118||LA51_0==121||LA51_0==128||LA51_0==131||LA51_0==135||LA51_0==183||LA51_0==DOUBLE))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:428:19: a= expr
					{
					DebugLocation(428, 20);
					PushFollow(Follow._expr_in_stmt_switch1573);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(51); }

				DebugLocation(428, 29);
				PushFollow(Follow._stmt_switch_item_list_in_stmt_switch1579);
				b=stmt_switch_item_list();
				PopFollow();

				DebugLocation(428, 52);
				// SugarWalker.g:428:52: (c= stmt_block )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==Stmt_Block))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:428:53: c= stmt_block
					{
					DebugLocation(428, 54);
					PushFollow(Follow._stmt_block_in_stmt_switch1584);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(429, 2);

					value = new StmtSwitch(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_switch", 29);
			LeaveRule("stmt_switch", 29);
			LeaveRule_stmt_switch();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return value;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:434:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(434, 1);
		try
		{
			// SugarWalker.g:435:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Stmt_Defer))
			{
				alt53 = 1;
			}
			else if ((LA53_0==Stmt_Finally))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:435:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(435, 4);
				DebugLocation(435, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1606); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(435, 18);
				PushFollow(Follow._stmt_in_stmt_defer1610);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(436, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:439:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(439, 4);
				DebugLocation(439, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1620); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(439, 20);
				PushFollow(Follow._stmt_in_stmt_defer1624);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(440, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:445:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 31);
		TraceIn("stmt_expr", 31);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(445, 1);
		try
		{
			// SugarWalker.g:446:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt54 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_List_Generation:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case Expr_Where:
			case IDENT:
			case Match_Expr:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 113:
			case 118:
			case 121:
			case 128:
			case 131:
			case 135:
			case 183:
			case DOUBLE:
				{
				alt54 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:446:4: a= stmt_using
				{
				DebugLocation(446, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1645);
				a=stmt_using();
				PopFollow();

				DebugLocation(446, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:447:4: b= expr
				{
				DebugLocation(447, 5);
				PushFollow(Follow._expr_in_stmt_expr1654);
				b=expr();
				PopFollow();

				DebugLocation(447, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:448:4: c= stmt_typedef
				{
				DebugLocation(448, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1663);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(448, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 31);
			LeaveRule("stmt_expr", 31);
			LeaveRule_stmt_expr();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:451:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 32);
		TraceIn("stmt_using", 32);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(451, 1);
		try
		{
			// SugarWalker.g:456:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:456:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(456, 4);
			DebugLocation(456, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1686); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(456, 17);
				// SugarWalker.g:456:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=3;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==IDENT))
					{
						alt55 = 1;
					}
					else if ((LA55_0==159))
					{
						alt55 = 2;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:456:19: a= ident
						{
						DebugLocation(456, 20);
						PushFollow(Follow._ident_in_stmt_using1692);
						a=ident();
						PopFollow();

						DebugLocation(456, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:457:10: b= 'namespace'
						{
						DebugLocation(457, 11);
						b=(CommonTree)Match(input,159,Follow._159_in_stmt_using1707); 
						DebugLocation(457, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 32);
			LeaveRule("stmt_using", 32);
			LeaveRule_stmt_using();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:460:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		StmtTypeDef value = default(StmtTypeDef);


		SugarType a = default(SugarType);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(460, 1);
		try
		{
			// SugarWalker.g:461:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:461:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(461, 4);
			DebugLocation(461, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1728); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(461, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1732);
			a=type_name();
			PopFollow();

			DebugLocation(461, 32);
			PushFollow(Follow._ident_in_stmt_typedef1736);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(462, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:467:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(467, 1);
		try
		{
			// SugarWalker.g:468:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:468:4: a= expr
			{
			DebugLocation(468, 5);
			PushFollow(Follow._expr_in_stmt_alloc1757);
			a=expr();
			PopFollow();

			DebugLocation(468, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:471:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 35);
		TraceIn("stmt_if", 35);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(471, 1);
		try
		{
			// SugarWalker.g:472:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==Stmt_If))
			{
				alt58 = 1;
			}
			else if ((LA58_0==Stmt_Unless))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:472:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(472, 4);
				DebugLocation(472, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1775); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(472, 15);
				PushFollow(Follow._expr_in_stmt_if1779);
				a=expr();
				PopFollow();

				DebugLocation(472, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1783);
				b=stmt_block();
				PopFollow();

				DebugLocation(472, 34);
				// SugarWalker.g:472:34: (c= stmt_block )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==Stmt_Block))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:472:35: c= stmt_block
					{
					DebugLocation(472, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1788);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(473, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:476:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(476, 4);
				DebugLocation(476, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1800); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(476, 19);
				PushFollow(Follow._expr_in_stmt_if1804);
				a=expr();
				PopFollow();

				DebugLocation(476, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1808);
				b=stmt_block();
				PopFollow();

				DebugLocation(476, 38);
				// SugarWalker.g:476:38: (c= stmt_block )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==Stmt_Block))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:476:39: c= stmt_block
					{
					DebugLocation(476, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1813);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(477, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 35);
			LeaveRule("stmt_if", 35);
			LeaveRule_stmt_if();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:482:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 36);
		TraceIn("stmt_while", 36);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(482, 1);
		try
		{
			// SugarWalker.g:483:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt60=3;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt60 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt60 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:483:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(483, 4);
				DebugLocation(483, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1835); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(483, 18);
				PushFollow(Follow._expr_in_stmt_while1839);
				a=expr();
				PopFollow();

				DebugLocation(483, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1843);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(484, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:487:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(487, 4);
				DebugLocation(487, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1853); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(487, 18);
				PushFollow(Follow._expr_in_stmt_while1857);
				a=expr();
				PopFollow();

				DebugLocation(487, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1861);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(488, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:491:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(491, 4);
				DebugLocation(491, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1871); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(491, 16);
				// SugarWalker.g:491:16: (a= expr )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if (((LA59_0>=Expr_Access && LA59_0<=Expr_Alloc_Equal)||(LA59_0>=Expr_Bin && LA59_0<=Expr_Where)||LA59_0==IDENT||LA59_0==Match_Expr||LA59_0==Match_Tuple||LA59_0==NUMBER||LA59_0==STRING||LA59_0==89||LA59_0==92||LA59_0==96||LA59_0==99||LA59_0==104||LA59_0==110||LA59_0==113||LA59_0==118||LA59_0==121||LA59_0==128||LA59_0==131||LA59_0==135||LA59_0==183||LA59_0==DOUBLE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:491:17: a= expr
					{
					DebugLocation(491, 18);
					PushFollow(Follow._expr_in_stmt_while1876);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(59); }

				DebugLocation(491, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1882);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(492, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc(new AutoType(), "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 36);
			LeaveRule("stmt_while", 36);
			LeaveRule_stmt_while();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:509:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 37);
		TraceIn("for_item", 37);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(509, 1);
		try
		{
			// SugarWalker.g:510:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Til a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_Map a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt64=6;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt64 = 1;
				}
				break;
			case For_Item_Til:
				{
				alt64 = 2;
				}
				break;
			case For_Item_Down_To:
				{
				alt64 = 3;
				}
				break;
			case For_Item_Each:
				{
				alt64 = 4;
				}
				break;
			case For_Item_Map:
				{
				alt64 = 5;
				}
				break;
			case For_Item_When:
				{
				alt64 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:510:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(510, 4);
				DebugLocation(510, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1902); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(510, 19);
				PushFollow(Follow._ident_in_for_item1906);
				a=ident();
				PopFollow();

				DebugLocation(510, 27);
				PushFollow(Follow._expr_in_for_item1910);
				b=expr();
				PopFollow();

				DebugLocation(510, 34);
				PushFollow(Follow._expr_in_for_item1914);
				c=expr();
				PopFollow();

				DebugLocation(510, 40);
				// SugarWalker.g:510:40: (d= expr )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if (((LA61_0>=Expr_Access && LA61_0<=Expr_Alloc_Equal)||(LA61_0>=Expr_Bin && LA61_0<=Expr_Where)||LA61_0==IDENT||LA61_0==Match_Expr||LA61_0==Match_Tuple||LA61_0==NUMBER||LA61_0==STRING||LA61_0==89||LA61_0==92||LA61_0==96||LA61_0==99||LA61_0==104||LA61_0==110||LA61_0==113||LA61_0==118||LA61_0==121||LA61_0==128||LA61_0==131||LA61_0==135||LA61_0==183||LA61_0==DOUBLE))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:510:41: d= expr
					{
					DebugLocation(510, 42);
					PushFollow(Follow._expr_in_for_item1919);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(511, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.To);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:514:4: ^( For_Item_Til a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(514, 4);
				DebugLocation(514, 6);
				Match(input,For_Item_Til,Follow._For_Item_Til_in_for_item1931); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(514, 20);
				PushFollow(Follow._ident_in_for_item1935);
				a=ident();
				PopFollow();

				DebugLocation(514, 28);
				PushFollow(Follow._expr_in_for_item1939);
				b=expr();
				PopFollow();

				DebugLocation(514, 35);
				PushFollow(Follow._expr_in_for_item1943);
				c=expr();
				PopFollow();

				DebugLocation(514, 41);
				// SugarWalker.g:514:41: (d= expr )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if (((LA62_0>=Expr_Access && LA62_0<=Expr_Alloc_Equal)||(LA62_0>=Expr_Bin && LA62_0<=Expr_Where)||LA62_0==IDENT||LA62_0==Match_Expr||LA62_0==Match_Tuple||LA62_0==NUMBER||LA62_0==STRING||LA62_0==89||LA62_0==92||LA62_0==96||LA62_0==99||LA62_0==104||LA62_0==110||LA62_0==113||LA62_0==118||LA62_0==121||LA62_0==128||LA62_0==131||LA62_0==135||LA62_0==183||LA62_0==DOUBLE))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:514:42: d= expr
					{
					DebugLocation(514, 43);
					PushFollow(Follow._expr_in_for_item1948);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(515, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.Til);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:518:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(518, 4);
				DebugLocation(518, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1960); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(518, 24);
				PushFollow(Follow._ident_in_for_item1964);
				a=ident();
				PopFollow();

				DebugLocation(518, 32);
				PushFollow(Follow._expr_in_for_item1968);
				b=expr();
				PopFollow();

				DebugLocation(518, 39);
				PushFollow(Follow._expr_in_for_item1972);
				c=expr();
				PopFollow();

				DebugLocation(518, 45);
				// SugarWalker.g:518:45: (d= expr )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if (((LA63_0>=Expr_Access && LA63_0<=Expr_Alloc_Equal)||(LA63_0>=Expr_Bin && LA63_0<=Expr_Where)||LA63_0==IDENT||LA63_0==Match_Expr||LA63_0==Match_Tuple||LA63_0==NUMBER||LA63_0==STRING||LA63_0==89||LA63_0==92||LA63_0==96||LA63_0==99||LA63_0==104||LA63_0==110||LA63_0==113||LA63_0==118||LA63_0==121||LA63_0==128||LA63_0==131||LA63_0==135||LA63_0==183||LA63_0==DOUBLE))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:518:46: d= expr
					{
					DebugLocation(518, 47);
					PushFollow(Follow._expr_in_for_item1977);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(519, 2);

						value = new ForItemRange(a, b, c, d, ForItemRangeType.DownTo);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:522:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(522, 4);
				DebugLocation(522, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1989); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(522, 21);
				PushFollow(Follow._ident_in_for_item1993);
				a=ident();
				PopFollow();

				DebugLocation(522, 29);
				PushFollow(Follow._expr_in_for_item1997);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(523, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:526:4: ^( For_Item_Map a= ident b= expr )
				{
				DebugLocation(526, 4);
				DebugLocation(526, 6);
				Match(input,For_Item_Map,Follow._For_Item_Map_in_for_item2007); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(526, 20);
				PushFollow(Follow._ident_in_for_item2011);
				a=ident();
				PopFollow();

				DebugLocation(526, 28);
				PushFollow(Follow._expr_in_for_item2015);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(527, 2);

						value = new ForItemMap(a, b);
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:530:4: ^( For_Item_When b= expr )
				{
				DebugLocation(530, 4);
				DebugLocation(530, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item2025); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(530, 21);
				PushFollow(Follow._expr_in_for_item2029);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(531, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 37);
			LeaveRule("for_item", 37);
			LeaveRule_for_item();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:536:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 38);
		TraceIn("for_item_list", 38);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(536, 1);
		try
		{
			// SugarWalker.g:541:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:541:4: (a= for_item )+
			{
			DebugLocation(541, 4);
			// SugarWalker.g:541:4: (a= for_item )+
			int cnt65=0;
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if (((LA65_0>=For_Item_Down_To && LA65_0<=For_Item_When)))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:541:5: a= for_item
					{
					DebugLocation(541, 6);
					PushFollow(Follow._for_item_in_for_item_list2056);
					a=for_item();
					PopFollow();

					DebugLocation(541, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt65 >= 1)
						goto loop65;

					EarlyExitException eee65 = new EarlyExitException( 65, input );
					DebugRecognitionException(eee65);
					throw eee65;
				}
				cnt65++;
			}
			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 38);
			LeaveRule("for_item_list", 38);
			LeaveRule_for_item_list();
		}
		DebugLocation(542, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:544:1: stmt_for returns [StmtFor value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 39);
		TraceIn("stmt_for", 39);
		StmtFor value = default(StmtFor);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(544, 1);
		try
		{
			// SugarWalker.g:545:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:545:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(545, 4);
			DebugLocation(545, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for2077); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(545, 16);
			PushFollow(Follow._for_item_list_in_stmt_for2081);
			a=for_item_list();
			PopFollow();

			DebugLocation(545, 32);
			PushFollow(Follow._stmt_block_in_stmt_for2085);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(546, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 39);
			LeaveRule("stmt_for", 39);
			LeaveRule_stmt_for();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:551:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 40);
		TraceIn("stmt_try", 40);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(551, 1);
		try
		{
			// SugarWalker.g:552:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:552:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(552, 4);
			DebugLocation(552, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try2105); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(552, 16);
			PushFollow(Follow._stmt_block_in_stmt_try2109);
			a=stmt_block();
			PopFollow();

			DebugLocation(552, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2113);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(552, 42);
			PushFollow(Follow._stmt_block_in_stmt_try2117);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(553, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 40);
			LeaveRule("stmt_try", 40);
			LeaveRule_stmt_try();
		}
		DebugLocation(556, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:558:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(558, 1);
		try
		{
			// SugarWalker.g:559:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:559:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(559, 4);
			DebugLocation(559, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return2137); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(559, 18);
				// SugarWalker.g:559:18: (a= expr )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if (((LA66_0>=Expr_Access && LA66_0<=Expr_Alloc_Equal)||(LA66_0>=Expr_Bin && LA66_0<=Expr_Where)||LA66_0==IDENT||LA66_0==Match_Expr||LA66_0==Match_Tuple||LA66_0==NUMBER||LA66_0==STRING||LA66_0==89||LA66_0==92||LA66_0==96||LA66_0==99||LA66_0==104||LA66_0==110||LA66_0==113||LA66_0==118||LA66_0==121||LA66_0==128||LA66_0==131||LA66_0==135||LA66_0==183||LA66_0==DOUBLE))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:559:19: a= expr
					{
					DebugLocation(559, 20);
					PushFollow(Follow._expr_in_stmt_return2142);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(560, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:565:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 42);
		TraceIn("ident", 42);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(565, 1);
		try
		{
			// SugarWalker.g:570:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:570:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(570, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2170); 
			DebugLocation(570, 12);
			 value += a.Text; 
			DebugLocation(570, 34);
			// SugarWalker.g:570:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==112))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:570:35: '::' a= IDENT
					{
					DebugLocation(570, 35);
					Match(input,112,Follow._112_in_ident2175); 
					DebugLocation(570, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident2179); 
					DebugLocation(570, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(571, 2);

					if (value.StartsWith("global::")) value = value.Substring(6);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 42);
			LeaveRule("ident", 42);
			LeaveRule_ident();
		}
		DebugLocation(574, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:576:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 43);
		TraceIn("ident_list", 43);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(576, 1);
		try
		{
			// SugarWalker.g:581:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:581:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(581, 4);
			DebugLocation(581, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list2207); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(581, 17);
				// SugarWalker.g:581:17: (a= ident )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==IDENT))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:581:18: a= ident
						{
						DebugLocation(581, 19);
						PushFollow(Follow._ident_in_ident_list2212);
						a=ident();
						PopFollow();

						DebugLocation(581, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 43);
			LeaveRule("ident_list", 43);
			LeaveRule_ident_list();
		}
		DebugLocation(582, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:584:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 44);
		TraceIn("alloc_expr", 44);
		ExprAlloc value = default(ExprAlloc);


		SugarType a = default(SugarType);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(584, 1);
		try
		{
			// SugarWalker.g:585:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==Expr_Alloc_Equal))
			{
				alt69 = 1;
			}
			else if ((LA69_0==Expr_Alloc_Bracket))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:585:4: ^( Expr_Alloc_Equal a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(585, 4);
				DebugLocation(585, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr2233); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(585, 24);
				PushFollow(Follow._type_name_in_alloc_expr2237);
				a=type_name();
				PopFollow();

				DebugLocation(585, 36);
				PushFollow(Follow._ident_list_in_alloc_expr2241);
				b=ident_list();
				PopFollow();

				DebugLocation(585, 49);
				PushFollow(Follow._expr_list_in_alloc_expr2245);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(586, 2);

						if (c != null && c.Count > 0)
						{
							value = new ExprAlloc(a, b, c, AllocType.Equal);
						}
						else
						{
							value = new ExprAlloc(a, b, c, AllocType.Declare);
						}
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:596:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list c= expr_list )
				{
				DebugLocation(596, 4);
				DebugLocation(596, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr2255); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(596, 26);
				PushFollow(Follow._type_name_in_alloc_expr2259);
				a=type_name();
				PopFollow();

				DebugLocation(596, 38);
				PushFollow(Follow._ident_list_in_alloc_expr2263);
				b=ident_list();
				PopFollow();

				DebugLocation(596, 51);
				PushFollow(Follow._expr_list_in_alloc_expr2267);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(597, 2);

						value = new ExprAlloc(a, b, c, AllocType.Bracket);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 44);
			LeaveRule("alloc_expr", 44);
			LeaveRule_alloc_expr();
		}
		DebugLocation(600, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:602:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 45);
		TraceIn("expr_tuple", 45);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(602, 1);
		try
		{
			// SugarWalker.g:607:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:607:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(607, 4);
			DebugLocation(607, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple2292); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(607, 17);
			// SugarWalker.g:607:17: (a= expr )+
			int cnt70=0;
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if (((LA70_0>=Expr_Access && LA70_0<=Expr_Alloc_Equal)||(LA70_0>=Expr_Bin && LA70_0<=Expr_Where)||LA70_0==IDENT||LA70_0==Match_Expr||LA70_0==Match_Tuple||LA70_0==NUMBER||LA70_0==STRING||LA70_0==89||LA70_0==92||LA70_0==96||LA70_0==99||LA70_0==104||LA70_0==110||LA70_0==113||LA70_0==118||LA70_0==121||LA70_0==128||LA70_0==131||LA70_0==135||LA70_0==183||LA70_0==DOUBLE))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:607:18: a= expr
					{
					DebugLocation(607, 19);
					PushFollow(Follow._expr_in_expr_tuple2297);
					a=expr();
					PopFollow();

					DebugLocation(607, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt70 >= 1)
						goto loop70;

					EarlyExitException eee70 = new EarlyExitException( 70, input );
					DebugRecognitionException(eee70);
					throw eee70;
				}
				cnt70++;
			}
			loop70:
				;

			} finally { DebugExitSubRule(70); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 45);
			LeaveRule("expr_tuple", 45);
			LeaveRule_expr_tuple();
		}
		DebugLocation(608, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:610:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 46);
		TraceIn("match_tuple", 46);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(610, 1);
		try
		{
			// SugarWalker.g:615:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:615:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(615, 4);
			DebugLocation(615, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple2324); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(615, 18);
				// SugarWalker.g:615:18: (a= expr )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_0 = input.LA(1);

					if (((LA71_0>=Expr_Access && LA71_0<=Expr_Alloc_Equal)||(LA71_0>=Expr_Bin && LA71_0<=Expr_Where)||LA71_0==IDENT||LA71_0==Match_Expr||LA71_0==Match_Tuple||LA71_0==NUMBER||LA71_0==STRING||LA71_0==89||LA71_0==92||LA71_0==96||LA71_0==99||LA71_0==104||LA71_0==110||LA71_0==113||LA71_0==118||LA71_0==121||LA71_0==128||LA71_0==131||LA71_0==135||LA71_0==183||LA71_0==DOUBLE))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:615:19: a= expr
						{
						DebugLocation(615, 20);
						PushFollow(Follow._expr_in_match_tuple2329);
						a=expr();
						PopFollow();

						DebugLocation(615, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 46);
			LeaveRule("match_tuple", 46);
			LeaveRule_match_tuple();
		}
		DebugLocation(616, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:618:1: expr_list returns [List<Expr> value] : ^( Expr_Args (a= expr )* ) ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 47);
		TraceIn("expr_list", 47);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(618, 1);
		try
		{
			// SugarWalker.g:623:2: ( ^( Expr_Args (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:623:4: ^( Expr_Args (a= expr )* )
			{
			DebugLocation(623, 4);
			DebugLocation(623, 6);
			Match(input,Expr_Args,Follow._Expr_Args_in_expr_list2355); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(623, 16);
				// SugarWalker.g:623:16: (a= expr )*
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if (((LA72_0>=Expr_Access && LA72_0<=Expr_Alloc_Equal)||(LA72_0>=Expr_Bin && LA72_0<=Expr_Where)||LA72_0==IDENT||LA72_0==Match_Expr||LA72_0==Match_Tuple||LA72_0==NUMBER||LA72_0==STRING||LA72_0==89||LA72_0==92||LA72_0==96||LA72_0==99||LA72_0==104||LA72_0==110||LA72_0==113||LA72_0==118||LA72_0==121||LA72_0==128||LA72_0==131||LA72_0==135||LA72_0==183||LA72_0==DOUBLE))
					{
						alt72 = 1;
					}


					} finally { DebugExitDecision(72); }
					switch ( alt72 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:623:17: a= expr
						{
						DebugLocation(623, 18);
						PushFollow(Follow._expr_in_expr_list2360);
						a=expr();
						PopFollow();

						DebugLocation(623, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop72;
					}
				}

				loop72:
					;

				} finally { DebugExitSubRule(72); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 47);
			LeaveRule("expr_list", 47);
			LeaveRule_expr_list();
		}
		DebugLocation(624, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:626:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 48);
		TraceIn("call_expr", 48);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<SugarType> b = default(List<SugarType>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(626, 1);
		try
		{
			// SugarWalker.g:627:2: ( ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:627:4: ^( Expr_Call a= expr (b= generic_parameter )? c= expr_list )
			{
			DebugLocation(627, 4);
			DebugLocation(627, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr2381); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(627, 17);
			PushFollow(Follow._expr_in_call_expr2385);
			a=expr();
			PopFollow();

			DebugLocation(627, 23);
			// SugarWalker.g:627:23: (b= generic_parameter )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==Generic_Patameters))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:627:24: b= generic_parameter
				{
				DebugLocation(627, 25);
				PushFollow(Follow._generic_parameter_in_call_expr2390);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(73); }

			DebugLocation(627, 47);
			PushFollow(Follow._expr_list_in_call_expr2396);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(628, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 48);
			LeaveRule("call_expr", 48);
			LeaveRule_call_expr();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:633:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr_list ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 49);
		TraceIn("dict_expr", 49);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(633, 1);
		try
		{
			// SugarWalker.g:634:2: ( ^( Expr_Dict a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:634:4: ^( Expr_Dict a= expr b= expr_list )
			{
			DebugLocation(634, 4);
			DebugLocation(634, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr2416); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(634, 17);
			PushFollow(Follow._expr_in_dict_expr2420);
			a=expr();
			PopFollow();

			DebugLocation(634, 24);
			PushFollow(Follow._expr_list_in_dict_expr2424);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(635, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 49);
			LeaveRule("dict_expr", 49);
			LeaveRule_dict_expr();
		}
		DebugLocation(638, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:640:1: lambda_expr returns [Expr value] : ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) );
	[GrammarRule("lambda_expr")]
	private Expr lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 50);
		TraceIn("lambda_expr", 50);
		Expr value = default(Expr);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		SugarType t = default(SugarType);
		StmtBlock a = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(640, 1);
		try
		{
			// SugarWalker.g:641:2: ( ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block ) | ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block ) )
			int alt82=4;
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==Expr_Lambda))
			{
				int LA82_1 = input.LA(2);

				if ((LA82_1==DOWN))
				{
					switch (input.LA(3))
					{
					case 105:
						{
						alt82 = 1;
						}
						break;
					case 124:
						{
						alt82 = 2;
						}
						break;
					case 103:
						{
						alt82 = 3;
						}
						break;
					case 123:
						{
						alt82 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 82, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:641:4: ^( Expr_Lambda '->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(641, 4);
				DebugLocation(641, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2444); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(641, 18);
				Match(input,105,Follow._105_in_lambda_expr2446); 
				DebugLocation(641, 23);
				// SugarWalker.g:641:23: (b= func_args )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==Func_Args))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:641:24: b= func_args
					{
					DebugLocation(641, 25);
					PushFollow(Follow._func_args_in_lambda_expr2451);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(641, 38);
				// SugarWalker.g:641:38: (t= type_name )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if (((LA75_0>=Type_Array && LA75_0<=Type_Ident)||(LA75_0>=Type_Ref && LA75_0<=Type_Template)))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:641:39: t= type_name
					{
					DebugLocation(641, 40);
					PushFollow(Follow._type_name_in_lambda_expr2458);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(641, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2464);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(642, 2);

						value = new ExprLambda(a, b, true, t);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:645:4: ^( Expr_Lambda '=>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(645, 4);
				DebugLocation(645, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2474); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(645, 18);
				Match(input,124,Follow._124_in_lambda_expr2476); 
				DebugLocation(645, 23);
				// SugarWalker.g:645:23: (b= func_args )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==Func_Args))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:645:24: b= func_args
					{
					DebugLocation(645, 25);
					PushFollow(Follow._func_args_in_lambda_expr2481);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(645, 38);
				// SugarWalker.g:645:38: (t= type_name )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if (((LA77_0>=Type_Array && LA77_0<=Type_Ident)||(LA77_0>=Type_Ref && LA77_0<=Type_Template)))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:645:39: t= type_name
					{
					DebugLocation(645, 40);
					PushFollow(Follow._type_name_in_lambda_expr2488);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(645, 54);
				PushFollow(Follow._stmt_block_in_lambda_expr2494);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(646, 2);

						value = new ExprLambda(a, b, false, t);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:649:4: ^( Expr_Lambda '-->' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(649, 4);
				DebugLocation(649, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2504); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(649, 18);
				Match(input,103,Follow._103_in_lambda_expr2506); 
				DebugLocation(649, 24);
				// SugarWalker.g:649:24: (b= func_args )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==Func_Args))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:649:25: b= func_args
					{
					DebugLocation(649, 26);
					PushFollow(Follow._func_args_in_lambda_expr2511);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(649, 39);
				// SugarWalker.g:649:39: (t= type_name )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if (((LA79_0>=Type_Array && LA79_0<=Type_Ident)||(LA79_0>=Type_Ref && LA79_0<=Type_Template)))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:649:40: t= type_name
					{
					DebugLocation(649, 41);
					PushFollow(Follow._type_name_in_lambda_expr2518);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(649, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2524);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(650, 2);

						value = new ExprCurryLambda(a, b, true, t);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:653:4: ^( Expr_Lambda '==>' (b= func_args )? (t= type_name )? a= stmt_block )
				{
				DebugLocation(653, 4);
				DebugLocation(653, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr2534); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(653, 18);
				Match(input,123,Follow._123_in_lambda_expr2536); 
				DebugLocation(653, 24);
				// SugarWalker.g:653:24: (b= func_args )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==Func_Args))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:653:25: b= func_args
					{
					DebugLocation(653, 26);
					PushFollow(Follow._func_args_in_lambda_expr2541);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(653, 39);
				// SugarWalker.g:653:39: (t= type_name )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if (((LA81_0>=Type_Array && LA81_0<=Type_Ident)||(LA81_0>=Type_Ref && LA81_0<=Type_Template)))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:653:40: t= type_name
					{
					DebugLocation(653, 41);
					PushFollow(Follow._type_name_in_lambda_expr2548);
					t=type_name();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(653, 55);
				PushFollow(Follow._stmt_block_in_lambda_expr2554);
				a=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(654, 2);

						value = new ExprCurryLambda(a, b, false, t);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 50);
			LeaveRule("lambda_expr", 50);
			LeaveRule_lambda_expr();
		}
		DebugLocation(657, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:659:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 51);
		TraceIn("new_expr", 51);
		Expr value = default(Expr);


		SugarType a = default(SugarType);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(659, 1);
		try
		{
			// SugarWalker.g:660:2: ( ^( Expr_New_Type a= type_name b= expr_list ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==Expr_New_Type))
			{
				alt83 = 1;
			}
			else if ((LA83_0==Expr_New_Array))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:660:4: ^( Expr_New_Type a= type_name b= expr_list )
				{
				DebugLocation(660, 4);
				DebugLocation(660, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr2574); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(660, 21);
				PushFollow(Follow._type_name_in_new_expr2578);
				a=type_name();
				PopFollow();

				DebugLocation(660, 33);
				PushFollow(Follow._expr_list_in_new_expr2582);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(661, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:664:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(664, 4);
				DebugLocation(664, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr2592); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(664, 22);
				PushFollow(Follow._type_name_in_new_expr2596);
				a=type_name();
				PopFollow();

				DebugLocation(664, 34);
				PushFollow(Follow._expr_list_in_new_expr2600);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(665, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 51);
			LeaveRule("new_expr", 51);
			LeaveRule_new_expr();
		}
		DebugLocation(668, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:670:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident c= expr_list ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 52);
		TraceIn("call_with_expr", 52);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(670, 1);
		try
		{
			// SugarWalker.g:671:2: ( ^( Expr_Call_With a= expr b= ident c= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:671:4: ^( Expr_Call_With a= expr b= ident c= expr_list )
			{
			DebugLocation(671, 4);
			DebugLocation(671, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr2620); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(671, 22);
			PushFollow(Follow._expr_in_call_with_expr2624);
			a=expr();
			PopFollow();

			DebugLocation(671, 29);
			PushFollow(Follow._ident_in_call_with_expr2628);
			b=ident();
			PopFollow();

			DebugLocation(671, 37);
			PushFollow(Follow._expr_list_in_call_with_expr2632);
			c=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(672, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 52);
			LeaveRule("call_with_expr", 52);
			LeaveRule_call_with_expr();
		}
		DebugLocation(684, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:686:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 53);
		TraceIn("cast_expr", 53);
		ExprCast value = default(ExprCast);


		SugarType a = default(SugarType);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(686, 1);
		try
		{
			// SugarWalker.g:687:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:687:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(687, 4);
			DebugLocation(687, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2652); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(687, 17);
			PushFollow(Follow._type_name_in_cast_expr2656);
			a=type_name();
			PopFollow();

			DebugLocation(687, 29);
			PushFollow(Follow._expr_in_cast_expr2660);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(688, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 53);
			LeaveRule("cast_expr", 53);
			LeaveRule_cast_expr();
		}
		DebugLocation(691, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:693:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr )* ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 54);
		TraceIn("list_expr", 54);
		ExprList value = default(ExprList);


		Expr a = default(Expr);


			var list = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(693, 1);
		try
		{
			// SugarWalker.g:698:2: ( ^( Expr_List (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:698:4: ^( Expr_List (a= expr )* )
			{
			DebugLocation(698, 4);
			DebugLocation(698, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2685); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(698, 16);
				// SugarWalker.g:698:16: (a= expr )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if (((LA84_0>=Expr_Access && LA84_0<=Expr_Alloc_Equal)||(LA84_0>=Expr_Bin && LA84_0<=Expr_Where)||LA84_0==IDENT||LA84_0==Match_Expr||LA84_0==Match_Tuple||LA84_0==NUMBER||LA84_0==STRING||LA84_0==89||LA84_0==92||LA84_0==96||LA84_0==99||LA84_0==104||LA84_0==110||LA84_0==113||LA84_0==118||LA84_0==121||LA84_0==128||LA84_0==131||LA84_0==135||LA84_0==183||LA84_0==DOUBLE))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:698:17: a= expr
						{
						DebugLocation(698, 18);
						PushFollow(Follow._expr_in_list_expr2690);
						a=expr();
						PopFollow();

						DebugLocation(698, 24);
						 list.Add(a); 

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(699, 2);

					value = new ExprList(list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 54);
			LeaveRule("list_expr", 54);
			LeaveRule_list_expr();
		}
		DebugLocation(702, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_list_generation_expr();
	partial void LeaveRule_list_generation_expr();

	// $ANTLR start "list_generation_expr"
	// SugarWalker.g:704:1: list_generation_expr returns [ExprListGeneration value] : ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) ;
	[GrammarRule("list_generation_expr")]
	private ExprListGeneration list_generation_expr()
	{
		EnterRule_list_generation_expr();
		EnterRule("list_generation_expr", 55);
		TraceIn("list_generation_expr", 55);
		ExprListGeneration value = default(ExprListGeneration);


		SugarType a = default(SugarType);
		StmtFor b = default(StmtFor);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "list_generation_expr");
		DebugLocation(704, 1);
		try
		{
			// SugarWalker.g:705:2: ( ^( Expr_List_Generation a= type_name b= stmt_for c= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:705:4: ^( Expr_List_Generation a= type_name b= stmt_for c= expr )
			{
			DebugLocation(705, 4);
			DebugLocation(705, 6);
			Match(input,Expr_List_Generation,Follow._Expr_List_Generation_in_list_generation_expr2714); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(705, 28);
			PushFollow(Follow._type_name_in_list_generation_expr2718);
			a=type_name();
			PopFollow();

			DebugLocation(705, 40);
			PushFollow(Follow._stmt_for_in_list_generation_expr2722);
			b=stmt_for();
			PopFollow();

			DebugLocation(705, 51);
			PushFollow(Follow._expr_in_list_generation_expr2726);
			c=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(706, 2);

					value = new ExprListGeneration(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_generation_expr", 55);
			LeaveRule("list_generation_expr", 55);
			LeaveRule_list_generation_expr();
		}
		DebugLocation(709, 1);
		} finally { DebugExitRule(GrammarFileName, "list_generation_expr"); }
		return value;

	}
	// $ANTLR end "list_generation_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:711:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 56);
		TraceIn("chain_expr", 56);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(711, 1);
		try
		{
			// SugarWalker.g:716:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:716:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(716, 4);
			DebugLocation(716, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2751); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(717, 5);
			PushFollow(Follow._expr_in_chain_expr2758);
			a=expr();
			PopFollow();

			DebugLocation(718, 4);

							last=a;
						
			DebugLocation(721, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=153 && input.LA(1)<=154))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(721, 64);
			PushFollow(Follow._expr_in_chain_expr2804);
			a=expr();
			PopFollow();

			DebugLocation(722, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(726, 4);
			// SugarWalker.g:726:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==87||LA85_0==115||LA85_0==119||LA85_0==122||(LA85_0>=125 && LA85_0<=126)||(LA85_0>=153 && LA85_0<=154)))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:727:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(727, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=153 && input.LA(1)<=154))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(727, 65);
					PushFollow(Follow._expr_in_chain_expr2856);
					a=expr();
					PopFollow();

					DebugLocation(728, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 56);
			LeaveRule("chain_expr", 56);
			LeaveRule_chain_expr();
		}
		DebugLocation(733, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarWalker.g:735:1: where_expr returns [Expr value] : ^( Expr_Where a= expr (b= stmt )+ ) ;
	[GrammarRule("where_expr")]
	private Expr where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Stmt> b = default(List<Stmt>);


			List<Stmt> stmt_list = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(735, 1);
		try
		{
			// SugarWalker.g:740:2: ( ^( Expr_Where a= expr (b= stmt )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:740:4: ^( Expr_Where a= expr (b= stmt )+ )
			{
			DebugLocation(740, 4);
			DebugLocation(740, 6);
			Match(input,Expr_Where,Follow._Expr_Where_in_where_expr2890); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(740, 18);
			PushFollow(Follow._expr_in_where_expr2894);
			a=expr();
			PopFollow();

			DebugLocation(740, 24);
			// SugarWalker.g:740:24: (b= stmt )+
			int cnt86=0;
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if (((LA86_0>=Expr_Access && LA86_0<=Expr_Alloc_Equal)||(LA86_0>=Expr_Bin && LA86_0<=Expr_Where)||LA86_0==IDENT||LA86_0==Match_Expr||LA86_0==Match_Tuple||LA86_0==NUMBER||LA86_0==STRING||(LA86_0>=Stmt_Defer && LA86_0<=Stmt_While)||LA86_0==89||LA86_0==92||LA86_0==96||LA86_0==99||LA86_0==104||LA86_0==110||LA86_0==113||(LA86_0>=117 && LA86_0<=118)||LA86_0==121||LA86_0==128||(LA86_0>=130 && LA86_0<=131)||LA86_0==135||LA86_0==183||LA86_0==DOUBLE))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:740:25: b= stmt
					{
					DebugLocation(740, 26);
					PushFollow(Follow._stmt_in_where_expr2899);
					b=stmt();
					PopFollow();

					DebugLocation(740, 32);
					 foreach (var x in b) stmt_list.Add(x); 

					}
					break;

				default:
					if (cnt86 >= 1)
						goto loop86;

					EarlyExitException eee86 = new EarlyExitException( 86, input );
					DebugRecognitionException(eee86);
					throw eee86;
				}
				cnt86++;
			}
			loop86:
				;

			} finally { DebugExitSubRule(86); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(741, 2);

					value = new ExprWhere(stmt_list, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return value;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarWalker.g:746:1: match_item returns [ExprMatchItem value] : ^( Match_Expr_Item a= expr b= expr ) ;
	[GrammarRule("match_item")]
	private ExprMatchItem match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		ExprMatchItem value = default(ExprMatchItem);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(746, 1);
		try
		{
			// SugarWalker.g:747:2: ( ^( Match_Expr_Item a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:747:4: ^( Match_Expr_Item a= expr b= expr )
			{
			DebugLocation(747, 4);
			DebugLocation(747, 6);
			Match(input,Match_Expr_Item,Follow._Match_Expr_Item_in_match_item2924); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(747, 23);
			PushFollow(Follow._expr_in_match_item2928);
			a=expr();
			PopFollow();

			DebugLocation(747, 30);
			PushFollow(Follow._expr_in_match_item2932);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(748, 2);

					value = new ExprMatchItem(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(751, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return value;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarWalker.g:753:1: match_expr returns [Expr value] : ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) ;
	[GrammarRule("match_expr")]
	private Expr match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		Expr value = default(Expr);


		Expr a = default(Expr);
		SugarType tp = default(SugarType);
		ExprMatchItem b = default(ExprMatchItem);


			List<ExprMatchItem> list = new List<ExprMatchItem>();

		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(753, 1);
		try
		{
			// SugarWalker.g:758:2: ( ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:758:5: ^( Match_Expr (a= expr )? (tp= type_name )? (b= match_item )+ )
			{
			DebugLocation(758, 5);
			DebugLocation(758, 7);
			Match(input,Match_Expr,Follow._Match_Expr_in_match_expr2958); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(758, 18);
			// SugarWalker.g:758:18: (a= expr )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if (((LA87_0>=Expr_Access && LA87_0<=Expr_Alloc_Equal)||(LA87_0>=Expr_Bin && LA87_0<=Expr_Where)||LA87_0==IDENT||LA87_0==Match_Expr||LA87_0==Match_Tuple||LA87_0==NUMBER||LA87_0==STRING||LA87_0==89||LA87_0==92||LA87_0==96||LA87_0==99||LA87_0==104||LA87_0==110||LA87_0==113||LA87_0==118||LA87_0==121||LA87_0==128||LA87_0==131||LA87_0==135||LA87_0==183||LA87_0==DOUBLE))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:758:19: a= expr
				{
				DebugLocation(758, 20);
				PushFollow(Follow._expr_in_match_expr2963);
				a=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(87); }

			DebugLocation(758, 28);
			// SugarWalker.g:758:28: (tp= type_name )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if (((LA88_0>=Type_Array && LA88_0<=Type_Ident)||(LA88_0>=Type_Ref && LA88_0<=Type_Template)))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:758:29: tp= type_name
				{
				DebugLocation(758, 31);
				PushFollow(Follow._type_name_in_match_expr2970);
				tp=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(758, 44);
			// SugarWalker.g:758:44: (b= match_item )+
			int cnt89=0;
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==Match_Expr_Item))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:758:45: b= match_item
					{
					DebugLocation(758, 46);
					PushFollow(Follow._match_item_in_match_expr2977);
					b=match_item();
					PopFollow();

					DebugLocation(758, 58);
					 list.Add(b); 

					}
					break;

				default:
					if (cnt89 >= 1)
						goto loop89;

					EarlyExitException eee89 = new EarlyExitException( 89, input );
					DebugRecognitionException(eee89);
					throw eee89;
				}
				cnt89++;
			}
			loop89:
				;

			} finally { DebugExitSubRule(89); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(759, 2);

					value = new ExprMatch(a, tp, list);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(762, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return value;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:764:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		Expr lambda = default(Expr);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		ExprListGeneration list_generation = default(ExprListGeneration);
		Expr expr_new = default(Expr);
		Expr where = default(Expr);
		Expr expr_match = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(764, 1);
		try
		{
			// SugarWalker.g:765:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |list_generation= list_generation_expr |expr_new= new_expr |where= where_expr |expr_match= match_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt90=29;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt90 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt90 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt90 = 3;
				}
				break;
			case Expr_Call:
				{
				alt90 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt90 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt90 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt90 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt90 = 8;
				}
				break;
			case Expr_List:
				{
				alt90 = 9;
				}
				break;
			case Expr_List_Generation:
				{
				alt90 = 10;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt90 = 11;
				}
				break;
			case Expr_Where:
				{
				alt90 = 12;
				}
				break;
			case Match_Expr:
				{
				alt90 = 13;
				}
				break;
			case Expr_Infix:
				{
				alt90 = 14;
				}
				break;
			case Expr_Cond:
				{
				alt90 = 15;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt90 = 16;
				}
				break;
			case Expr_Not_Null:
				{
				alt90 = 17;
				}
				break;
			case Expr_Access:
				{
				alt90 = 18;
				}
				break;
			case Expr_Chain:
				{
				alt90 = 19;
				}
				break;
			case Expr_Bin:
				{
				alt90 = 20;
				}
				break;
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 135:
			case 183:
				{
				alt90 = 21;
				}
				break;
			case 131:
				{
				alt90 = 22;
				}
				break;
			case Expr_Bracket:
				{
				alt90 = 23;
				}
				break;
			case Expr_Suffix:
				{
				alt90 = 24;
				}
				break;
			case Expr_Prefix:
				{
				alt90 = 25;
				}
				break;
			case 113:
				{
				alt90 = 26;
				}
				break;
			case IDENT:
				{
				alt90 = 27;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt90 = 28;
				}
				break;
			case STRING:
				{
				alt90 = 29;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:765:7: tuple= expr_tuple
				{
				DebugLocation(765, 12);
				PushFollow(Follow._expr_tuple_in_expr3006);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(766, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:769:4: alloc= alloc_expr
				{
				DebugLocation(769, 9);
				PushFollow(Follow._alloc_expr_in_expr3016);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(770, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:773:4: match= match_tuple
				{
				DebugLocation(773, 9);
				PushFollow(Follow._match_tuple_in_expr3026);
				match=match_tuple();
				PopFollow();

				DebugLocation(774, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:777:4: call= call_expr
				{
				DebugLocation(777, 8);
				PushFollow(Follow._call_expr_in_expr3036);
				call=call_expr();
				PopFollow();

				DebugLocation(778, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:781:4: call_with= call_with_expr
				{
				DebugLocation(781, 13);
				PushFollow(Follow._call_with_expr_in_expr3046);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(782, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:785:4: dict= dict_expr
				{
				DebugLocation(785, 8);
				PushFollow(Follow._dict_expr_in_expr3056);
				dict=dict_expr();
				PopFollow();

				DebugLocation(786, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:789:4: lambda= lambda_expr
				{
				DebugLocation(789, 10);
				PushFollow(Follow._lambda_expr_in_expr3066);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(790, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:793:4: cast= cast_expr
				{
				DebugLocation(793, 8);
				PushFollow(Follow._cast_expr_in_expr3076);
				cast=cast_expr();
				PopFollow();

				DebugLocation(794, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:797:4: list= list_expr
				{
				DebugLocation(797, 8);
				PushFollow(Follow._list_expr_in_expr3086);
				list=list_expr();
				PopFollow();

				DebugLocation(798, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:801:4: list_generation= list_generation_expr
				{
				DebugLocation(801, 19);
				PushFollow(Follow._list_generation_expr_in_expr3096);
				list_generation=list_generation_expr();
				PopFollow();

				DebugLocation(802, 2);

						value = list_generation;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:805:4: expr_new= new_expr
				{
				DebugLocation(805, 12);
				PushFollow(Follow._new_expr_in_expr3106);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(806, 2);

						value = expr_new;
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:809:4: where= where_expr
				{
				DebugLocation(809, 9);
				PushFollow(Follow._where_expr_in_expr3116);
				where=where_expr();
				PopFollow();

				DebugLocation(810, 2);

						value = where;
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:813:4: expr_match= match_expr
				{
				DebugLocation(813, 14);
				PushFollow(Follow._match_expr_in_expr3126);
				expr_match=match_expr();
				PopFollow();

				DebugLocation(814, 2);

						value = expr_match;
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:817:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(817, 4);
				DebugLocation(817, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr3135); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(817, 27);
				PushFollow(Follow._ident_in_expr3139);
				ident_text=ident();
				PopFollow();

				DebugLocation(817, 35);
				PushFollow(Follow._expr_in_expr3143);
				a=expr();
				PopFollow();

				DebugLocation(817, 42);
				PushFollow(Follow._expr_in_expr3147);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(818, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:821:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(821, 4);
				DebugLocation(821, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr3157); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(821, 17);
				PushFollow(Follow._expr_in_expr3161);
				a=expr();
				PopFollow();

				DebugLocation(821, 24);
				PushFollow(Follow._expr_in_expr3165);
				b=expr();
				PopFollow();

				DebugLocation(821, 31);
				PushFollow(Follow._expr_in_expr3169);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(822, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:825:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(825, 4);
				DebugLocation(825, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr3179); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(825, 26);
				PushFollow(Follow._expr_in_expr3183);
				a=expr();
				PopFollow();

				DebugLocation(825, 33);
				PushFollow(Follow._expr_in_expr3187);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(826, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident)), a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:829:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(829, 4);
				DebugLocation(829, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr3197); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(829, 21);
				PushFollow(Follow._expr_in_expr3201);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(830, 2);

						value = new ExprBin("!=", a, new ExprConst("NULL", ConstType.Ident));
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:833:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(833, 4);
				DebugLocation(833, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr3211); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(833, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=105 && input.LA(1)<=108)||input.LA(1)==112)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(833, 57);
				PushFollow(Follow._expr_in_expr3237);
				a=expr();
				PopFollow();

				DebugLocation(833, 73);
				PushFollow(Follow._ident_in_expr3241);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(834, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:837:4: chain= chain_expr
				{
				DebugLocation(837, 10);
				PushFollow(Follow._chain_expr_in_expr3254);
				chain=chain_expr();
				PopFollow();

				DebugLocation(838, 2);

						value = chain;
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:841:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(841, 4);
				DebugLocation(841, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr3263); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(841, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=87 && input.LA(1)<=88)||(input.LA(1)>=90 && input.LA(1)<=91)||input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109||input.LA(1)==115||input.LA(1)==117||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=127)||input.LA(1)==134||input.LA(1)==137||(input.LA(1)>=153 && input.LA(1)<=154)||input.LA(1)==162||input.LA(1)==182||input.LA(1)==185)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(848, 9);
				PushFollow(Follow._expr_in_expr3394);
				a=expr();
				PopFollow();

				DebugLocation(848, 16);
				PushFollow(Follow._expr_in_expr3398);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(849, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:852:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(852, 4);
				DebugLocation(852, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==118||input.LA(1)==121||input.LA(1)==128||input.LA(1)==135||input.LA(1)==183)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(852, 88);
				PushFollow(Follow._expr_in_expr3456);
				a=expr();
				PopFollow();

				DebugLocation(852, 95);
				PushFollow(Follow._expr_in_expr3460);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(853, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:856:4: ^( '@' text_ident= ident )
				{
				DebugLocation(856, 4);
				DebugLocation(856, 6);
				Match(input,131,Follow._131_in_expr3470); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(856, 20);
				PushFollow(Follow._ident_in_expr3474);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(857, 2);

						value = new ExprBracket(new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident));
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:860:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(860, 4);
				DebugLocation(860, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr3484); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(860, 20);
				PushFollow(Follow._expr_in_expr3488);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(861, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:864:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(864, 4);
				DebugLocation(864, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr3498); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(864, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==98||input.LA(1)==102)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(864, 36);
				PushFollow(Follow._expr_in_expr3512);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(865, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:868:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' ) a= expr )
				{
				DebugLocation(868, 4);
				DebugLocation(868, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr3522); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(868, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==86||input.LA(1)==91||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=101 && input.LA(1)<=102)||input.LA(1)==161||input.LA(1)==186)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(868, 80);
				PushFollow(Follow._expr_in_expr3564);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(869, 2);

						value = new ExprPrefix(Alias(op.Text), a);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:872:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(872, 4);
				DebugLocation(872, 6);
				Match(input,113,Follow._113_in_expr3574); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(872, 12);
				PushFollow(Follow._expr_in_expr3578);
				a=expr();
				PopFollow();

				DebugLocation(872, 19);
				PushFollow(Follow._expr_in_expr3582);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(873, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc(new AutoType(), ((ExprConst)a).Text, b, AllocType.Equal);
					

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:880:4: text_ident= ident
				{
				DebugLocation(880, 15);
				PushFollow(Follow._ident_in_expr3595);
				text_ident=ident();
				PopFollow();

				DebugLocation(881, 2);

						if (text_ident == "nil") text_ident = "NULL";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 28:
				DebugEnterAlt(28);
				// SugarWalker.g:885:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(885, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(886, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 29:
				DebugEnterAlt(29);
				// SugarWalker.g:889:4: text= STRING
				{
				DebugLocation(889, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr3626); 
				DebugLocation(890, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(893, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA43 dfa43;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa43 = new DFA43( this );
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x7\xFFFF";
		private const string DFA43_eofS =
			"\x7\xFFFF";
		private const string DFA43_minS =
			"\x1\xC\x1\x3\x2\xFFFF\x1\x2F\x1\xFFFF\x1\x3";
		private const string DFA43_maxS =
			"\x2\xBB\x2\xFFFF\x1\x2F\x1\xFFFF\x1\xBB";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA43_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x3\x3\x1\xFFFF\x14\x3\x6\xFFFF\x2\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1"+
				"\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x3\x4\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2F"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x2\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2F\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5",
				"",
				"",
				"\x1\x6",
				"",
				"\x1\x3\x8\xFFFF\x3\x5\x1\xFFFF\x14\x5\x6\xFFFF\x2\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x4\xFFFF"+
				"\x2\x5\x19\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x1\x5"+
				"\x4\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x1\x5\x4\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x6\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2F\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "292:101: (b= ident |op= ( '+' | '-' | '*' | '/' ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root71 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root75 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block100 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block105 = new BitSet(new ulong[]{0x404100000006848UL,0x2000000000900UL});
		public static readonly BitSet _func_def_in_node134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_global_using233 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_using238 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x80000000UL});
		public static readonly BitSet _ident_in_global_using249 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_global_using276 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x80000000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc302 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc307 = new BitSet(new ulong[]{0x0UL,0x1DC000UL,0x80000UL});
		public static readonly BitSet _147_in_global_alloc314 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_alloc320 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc324 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc328 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc338 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc343 = new BitSet(new ulong[]{0x0UL,0x1DC000UL,0x80000UL});
		public static readonly BitSet _147_in_global_alloc350 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_alloc356 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc360 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc364 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_global_alloc374 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc379 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_global_alloc386 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc392 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_global_alloc396 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Typedef_in_global_typedef416 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_typedef421 = new BitSet(new ulong[]{0x0UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_global_typedef427 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_global_typedef431 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUMBER_in_attribute_args452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item496 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item501 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _142_in_attribute_item509 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _166_in_attribute_item517 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _163_in_attribute_item525 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _178_in_attribute_item533 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item541 = new BitSet(new ulong[]{0x4200800000000008UL});
		public static readonly BitSet _attribute_item_in_attribute569 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def590 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def594 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _global_block_in_namespace_def599 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_import_def631 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _STRING_in_import_def641 = new BitSet(new ulong[]{0x4000000000000008UL});
		public static readonly BitSet _Enum_in_enum_def662 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def667 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def673 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_enum_def677 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def697 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _139_in_class_def702 = new BitSet(new ulong[]{0x800000000010UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_class_def709 = new BitSet(new ulong[]{0x800000000010UL});
		public static readonly BitSet _attribute_in_class_def716 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def722 = new BitSet(new ulong[]{0x2640000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def727 = new BitSet(new ulong[]{0x2440000000008UL});
		public static readonly BitSet _func_args_in_class_def734 = new BitSet(new ulong[]{0x2400000000008UL});
		public static readonly BitSet _ident_list_in_class_def741 = new BitSet(new ulong[]{0x400000000008UL});
		public static readonly BitSet _global_block_in_class_def748 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Ident_in_type_ident775 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _142_in_type_ident779 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _166_in_type_ident792 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _156_in_type_ident805 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _167_in_type_ident819 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _170_in_type_ident832 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _ident_in_type_ident847 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x4C010004000UL});
		public static readonly BitSet _Type_Template_in_type_template884 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_template888 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_type_template893 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _Type_Array_in_type_array922 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_array926 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_type_array931 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _Type_Star_in_type_star955 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_star959 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star961 = new BitSet(new ulong[]{0x8UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star966 = new BitSet(new ulong[]{0x8UL,0x80000000UL});
		public static readonly BitSet _Type_Ref_in_type_ref988 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_ref992 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Func_in_type_func1012 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_list_in_type_func1017 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_type_func1024 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_List_in_type_list1050 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_list1055 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _type_array_in_type_name1078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ref_in_type_name1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_in_type_name1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_ident_in_type_name1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_func_in_type_name1123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Args_in_func_args1146 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _alloc_expr_in_func_args1151 = new BitSet(new ulong[]{0x6008UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter1178 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_generic_parameter1183 = new BitSet(new ulong[]{0x8UL,0x1DC000UL});
		public static readonly BitSet _Func_Def_in_func_def1209 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _163_in_func_def1214 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7010UL,0x242612B921DC000UL,0xC84000000000089UL});
		public static readonly BitSet _178_in_func_def1221 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7010UL,0x242612B921DC000UL,0xC80000000000089UL});
		public static readonly BitSet _attribute_in_func_def1228 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B921DC000UL,0xC80000000000089UL});
		public static readonly BitSet _type_name_in_func_def1234 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B92000000UL,0xC80000000000089UL});
		public static readonly BitSet _186_in_func_def1241 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242612B92000000UL,0x880000000000089UL});
		public static readonly BitSet _ident_in_func_def1248 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _set_in_func_def1254 = new BitSet(new ulong[]{0xC2A0AC0FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _generic_parameter_in_func_def1269 = new BitSet(new ulong[]{0xC2A08C0FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _func_args_in_func_def1277 = new BitSet(new ulong[]{0xC2A0880FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _stmt_block_in_func_def1288 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def1298 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Func_Declare_in_func_def1306 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block1334 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block1339 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x262410912001FFFUL,0x88000000000008DUL});
		public static readonly BitSet _stmt_expr_in_stmt1369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt1378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt1423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_translate1464 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1468 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_stmt_translate1472 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_stmt_translate1482 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1486 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1490 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _117_in_stmt_translate1500 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1504 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_stmt_translate1508 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Switch_Item_in_stmt_switch_item_list1533 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_stmt_switch_item_list1537 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch_item_list1541 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Switch_in_stmt_switch1568 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_switch1573 = new BitSet(new ulong[]{0x8000000000000008UL,0x2000UL});
		public static readonly BitSet _stmt_switch_item_list_in_stmt_switch1579 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_switch1584 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1606 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1610 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1620 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1624 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1686 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1692 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_stmt_using1707 = new BitSet(new ulong[]{0x800000000008UL,0x0UL,0x80000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1728 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1732 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1736 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1775 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1779 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1783 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1788 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1800 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1804 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1808 = new BitSet(new ulong[]{0x8000000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1813 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1835 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1839 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1843 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1853 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1857 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1861 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1871 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1876 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1882 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1902 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1906 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1910 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1914 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1919 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Til_in_for_item1931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1935 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1939 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1943 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1948 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1960 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1964 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1968 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1972 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1977 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1989 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1993 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item1997 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Map_in_for_item2007 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item2011 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_for_item2015 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item2025 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item2029 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list2056 = new BitSet(new ulong[]{0x3F000000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for2077 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for2081 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2085 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try2105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try2109 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2113 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2117 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return2137 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return2142 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident2170 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_ident2175 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _IDENT_in_ident2179 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _Ident_List_in_ident_list2207 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list2212 = new BitSet(new ulong[]{0x800000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr2233 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2237 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2241 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2245 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr2255 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr2259 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr2263 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_alloc_expr2267 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple2292 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple2297 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple2324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple2329 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _Expr_Args_in_expr_list2355 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_list2360 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _Expr_Call_in_call_expr2381 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr2385 = new BitSet(new ulong[]{0x200000008000UL});
		public static readonly BitSet _generic_parameter_in_call_expr2390 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_expr2396 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr2416 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr2420 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_dict_expr2424 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2444 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _105_in_lambda_expr2446 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2451 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2458 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2464 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2474 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _124_in_lambda_expr2476 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2481 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2488 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2494 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2504 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _103_in_lambda_expr2506 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2511 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2518 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2524 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr2534 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _123_in_lambda_expr2536 = new BitSet(new ulong[]{0x8000040000000000UL,0x1DC000UL});
		public static readonly BitSet _func_args_in_lambda_expr2541 = new BitSet(new ulong[]{0x8000000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_lambda_expr2548 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_expr2554 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr2574 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2578 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2582 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr2592 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr2596 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_new_expr2600 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr2620 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2624 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2628 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2632 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2652 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2656 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_cast_expr2660 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2685 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_list_expr2690 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _Expr_List_Generation_in_list_generation_expr2714 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_list_generation_expr2718 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _stmt_for_in_list_generation_expr2722 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_list_generation_expr2726 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2751 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2758 = new BitSet(new ulong[]{0x0UL,0x6488000000800000UL,0x6000000UL});
		public static readonly BitSet _set_in_chain_expr2770 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_chain_expr2804 = new BitSet(new ulong[]{0x8UL,0x6488000000800000UL,0x6000000UL});
		public static readonly BitSet _set_in_chain_expr2822 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_chain_expr2856 = new BitSet(new ulong[]{0x8UL,0x6488000000800000UL,0x6000000UL});
		public static readonly BitSet _Expr_Where_in_where_expr2890 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_where_expr2894 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x262410912001FFFUL,0x88000000000008DUL});
		public static readonly BitSet _stmt_in_where_expr2899 = new BitSet(new ulong[]{0x42A0800FFFFF7008UL,0x262410912001FFFUL,0x88000000000008DUL});
		public static readonly BitSet _Match_Expr_Item_in_match_item2924 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_item2928 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_match_item2932 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Match_Expr_in_match_expr2958 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_expr2963 = new BitSet(new ulong[]{0x40000000000000UL,0x1DC000UL});
		public static readonly BitSet _type_name_in_match_expr2970 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _match_item_in_match_expr2977 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _expr_tuple_in_expr3006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr3016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr3026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr3036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr3046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr3056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr3066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr3076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_generation_expr_in_expr3096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr3106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_expr_in_expr3116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr3126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr3135 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3139 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3143 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3147 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr3157 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3161 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3165 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3169 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr3179 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3183 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3187 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr3197 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3201 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr3211 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3215 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3237 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_expr3241 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr3254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr3263 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3267 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3394 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3398 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr3410 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3456 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3460 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _131_in_expr3470 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr3474 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr3484 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3488 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr3498 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3502 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3512 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr3522 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr3526 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3564 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_expr3574 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr3578 = new BitSet(new ulong[]{0x42A0800FFFFF7000UL,0x242410912000000UL,0x880000000000089UL});
		public static readonly BitSet _expr_in_expr3582 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr3595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr3605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr3626 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
