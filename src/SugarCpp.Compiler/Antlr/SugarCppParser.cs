//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2014-12-09 01:13:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Declare", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'extern'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'thread_local'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Declare=43;
	public const int Func_Def=44;
	public const int Generic_Patameters=45;
	public const int Global_Block=46;
	public const int IDENT=47;
	public const int INDENT=48;
	public const int Ident_List=49;
	public const int Import=50;
	public const int Left_Bracket=51;
	public const int LineComment=52;
	public const int Match_Expr=53;
	public const int Match_Expr_Item=54;
	public const int Match_Tuple=55;
	public const int NEWLINE=56;
	public const int NUMBER=57;
	public const int Namespace=58;
	public const int Right_Bracket=59;
	public const int Root=60;
	public const int SP=61;
	public const int STRING=62;
	public const int Stmt_Block=63;
	public const int Stmt_Defer=64;
	public const int Stmt_Finally=65;
	public const int Stmt_For=66;
	public const int Stmt_If=67;
	public const int Stmt_Loop=68;
	public const int Stmt_Return=69;
	public const int Stmt_Switch=70;
	public const int Stmt_Try=71;
	public const int Stmt_Typedef=72;
	public const int Stmt_Unless=73;
	public const int Stmt_Until=74;
	public const int Stmt_Using=75;
	public const int Stmt_While=76;
	public const int Switch_Item=77;
	public const int Type_Array=78;
	public const int Type_Func=79;
	public const int Type_Ident=80;
	public const int Type_List=81;
	public const int Type_Ref=82;
	public const int Type_Star=83;
	public const int Type_Template=84;
	public const int WS=85;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:214:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(215, 4);
			// SugarCpp.g:215:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:215:4: NEWLINE
					{
					DebugLocation(215, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(215, 13);
			PushFollow(Follow._global_block_in_root575);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(215, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root577); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:30: -> ^( Root global_block )
			{
				DebugLocation(215, 33);
				// SugarCpp.g:215:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(215, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:218:1: global_block : ( node ( WS )* ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS5 = default(IToken);
		IToken NEWLINE6 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS5_tree = default(CommonTree);
		CommonTree NEWLINE6_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( ( node ( WS )* ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ( node ( WS )* ( NEWLINE )+ )*
			{
			DebugLocation(219, 4);
			// SugarCpp.g:219:4: ( node ( WS )* ( NEWLINE )+ )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==IDENT||LA4_0==93||LA4_0==132||LA4_0==139||(LA4_0>=141 && LA4_0<=142)||(LA4_0>=146 && LA4_0<=147)||LA4_0==151||LA4_0==156||LA4_0==159||LA4_0==163||(LA4_0>=166 && LA4_0<=167)||LA4_0==170||LA4_0==174||(LA4_0>=177 && LA4_0<=178)||LA4_0==186))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:5: node ( WS )* ( NEWLINE )+
					{
					DebugLocation(219, 5);
					PushFollow(Follow._node_in_global_block597);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(219, 10);
					// SugarCpp.g:219:10: ( WS )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==WS))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:219:10: WS
							{
							DebugLocation(219, 10);
							WS5=(IToken)Match(input,WS,Follow._WS_in_global_block599); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS5);


							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(219, 14);
					// SugarCpp.g:219:14: ( NEWLINE )+
					int cnt3=0;
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if ((LA3_0==NEWLINE))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch (alt3)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:219:14: NEWLINE
							{
							DebugLocation(219, 14);
							NEWLINE6=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block602); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE6);


							}
							break;

						default:
							if (cnt3 >= 1)
								goto loop3;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee3 = new EarlyExitException( 3, input );
							DebugRecognitionException(eee3);
							throw eee3;
						}
						cnt3++;
					}
					loop3:
						;

					} finally { DebugExitSubRule(3); }


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:25: -> ^( Global_Block ( node )* )
			{
				DebugLocation(219, 28);
				// SugarCpp.g:219:28: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(219, 43);
				// SugarCpp.g:219:43: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(219, 43);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def14 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt5=8;
			try { DebugEnterDecision(5, false);
			try
			{
				alt5 = dfa5.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._func_def_in_node625);
				func_def7=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def7.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._class_def_in_node630);
				class_def8=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def8.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._enum_def_in_node635);
				enum_def9=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def9.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:226:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_alloc_in_node640);
				global_alloc10=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc10.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:227:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._global_using_in_node645);
				global_using11=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using11.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:228:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._global_typedef_in_node650);
				global_typedef12=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef12.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:229:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._import_def_in_node655);
				import_def13=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def13.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:230:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				PushFollow(Follow._namespace_def_in_node660);
				namespace_def14=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def14.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:233:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER15 = default(IToken);
		IToken STRING16 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER15_tree = default(CommonTree);
		CommonTree STRING16_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( NUMBER | STRING | ident )
			int alt6=3;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt6 = 1;
				}
				break;
			case STRING:
				{
				alt6 = 2;
				}
				break;
			case IDENT:
				{
				alt6 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				NUMBER15=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args671); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER15_tree = (CommonTree)adaptor.Create(NUMBER15);
				adaptor.AddChild(root_0, NUMBER15_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:235:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				STRING16=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args676); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING16_tree = (CommonTree)adaptor.Create(STRING16);
				adaptor.AddChild(root_0, STRING16_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:236:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._ident_in_attribute_args681);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident17.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_args_list();
	partial void LeaveRule_attribute_args_list();

	// $ANTLR start "attribute_args_list"
	// SugarCpp.g:239:1: attribute_args_list : '(' ( WS )* attribute_args ( ( WS )* ',' ( WS )* attribute_args )* ( WS )* ')' -> ( attribute_args )+ ;
	[GrammarRule("attribute_args_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list()
	{
		EnterRule_attribute_args_list();
		EnterRule("attribute_args_list", 5);
		TraceIn("attribute_args_list", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken WS19 = default(IToken);
		IToken WS21 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken WS23 = default(IToken);
		IToken WS25 = default(IToken);
		IToken char_literal26 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args20 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args24 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree WS19_tree = default(CommonTree);
		CommonTree WS21_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree WS23_tree = default(CommonTree);
		CommonTree WS25_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_args_list");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( '(' ( WS )* attribute_args ( ( WS )* ',' ( WS )* attribute_args )* ( WS )* ')' -> ( attribute_args )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: '(' ( WS )* attribute_args ( ( WS )* ',' ( WS )* attribute_args )* ( WS )* ')'
			{
			DebugLocation(240, 4);
			char_literal18=(IToken)Match(input,93,Follow._93_in_attribute_args_list692); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal18);

			DebugLocation(240, 8);
			// SugarCpp.g:240:8: ( WS )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:8: WS
					{
					DebugLocation(240, 8);
					WS19=(IToken)Match(input,WS,Follow._WS_in_attribute_args_list694); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS19);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(240, 12);
			PushFollow(Follow._attribute_args_in_attribute_args_list697);
			attribute_args20=attribute_args();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_attribute_args.Add(attribute_args20.Tree);
			DebugLocation(240, 27);
			// SugarCpp.g:240:27: ( ( WS )* ',' ( WS )* attribute_args )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				try
				{
					alt10 = dfa10.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:28: ( WS )* ',' ( WS )* attribute_args
					{
					DebugLocation(240, 28);
					// SugarCpp.g:240:28: ( WS )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==WS))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:28: WS
							{
							DebugLocation(240, 28);
							WS21=(IToken)Match(input,WS,Follow._WS_in_attribute_args_list700); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS21);


							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(240, 32);
					char_literal22=(IToken)Match(input,100,Follow._100_in_attribute_args_list703); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal22);

					DebugLocation(240, 36);
					// SugarCpp.g:240:36: ( WS )*
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==WS))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch ( alt9 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:36: WS
							{
							DebugLocation(240, 36);
							WS23=(IToken)Match(input,WS,Follow._WS_in_attribute_args_list705); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS23);


							}
							break;

						default:
							goto loop9;
						}
					}

					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(240, 40);
					PushFollow(Follow._attribute_args_in_attribute_args_list708);
					attribute_args24=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args24.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(240, 57);
			// SugarCpp.g:240:57: ( WS )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:57: WS
					{
					DebugLocation(240, 57);
					WS25=(IToken)Match(input,WS,Follow._WS_in_attribute_args_list712); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS25);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(240, 61);
			char_literal26=(IToken)Match(input,94,Follow._94_in_attribute_args_list715); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal26);



			{
			// AST REWRITE
			// elements: attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:65: -> ( attribute_args )+
			{
				DebugLocation(240, 68);
				if (!(stream_attribute_args.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(240, 68);
					adaptor.AddChild(root_0, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args_list", 5);
			LeaveRule("attribute_args_list", 5);
			LeaveRule_attribute_args_list();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args_list"); }
		return retval;

	}
	// $ANTLR end "attribute_args_list"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:243:1: attribute_item : ( ident ( ( WS )* attribute_args_list )? -> ^( Attribute ident ( attribute_args_list )? ) | 'const' ( ( WS )* attribute_args_list )? -> ^( Attribute 'const' ( attribute_args_list )? ) | 'static' ( ( WS )* attribute_args_list )? -> ^( Attribute 'static' ( attribute_args_list )? ) | 'public' ( ( WS )* attribute_args_list )? -> ^( Attribute 'public' ( attribute_args_list )? ) | 'virtual' ( ( WS )* attribute_args_list )? -> ^( Attribute 'virtual' ( attribute_args_list )? ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 6);
		TraceIn("attribute_item", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS28 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken WS31 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken WS34 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken WS37 = default(IToken);
		IToken string_literal39 = default(IToken);
		IToken WS40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args_list41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS28_tree = default(CommonTree);
		CommonTree string_literal30_tree = default(CommonTree);
		CommonTree WS31_tree = default(CommonTree);
		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree WS34_tree = default(CommonTree);
		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree WS37_tree = default(CommonTree);
		CommonTree string_literal39_tree = default(CommonTree);
		CommonTree WS40_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args_list=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args_list");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ident ( ( WS )* attribute_args_list )? -> ^( Attribute ident ( attribute_args_list )? ) | 'const' ( ( WS )* attribute_args_list )? -> ^( Attribute 'const' ( attribute_args_list )? ) | 'static' ( ( WS )* attribute_args_list )? -> ^( Attribute 'static' ( attribute_args_list )? ) | 'public' ( ( WS )* attribute_args_list )? -> ^( Attribute 'public' ( attribute_args_list )? ) | 'virtual' ( ( WS )* attribute_args_list )? -> ^( Attribute 'virtual' ( attribute_args_list )? ) )
			int alt22=5;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt22 = 1;
				}
				break;
			case 142:
				{
				alt22 = 2;
				}
				break;
			case 166:
				{
				alt22 = 3;
				}
				break;
			case 163:
				{
				alt22 = 4;
				}
				break;
			case 178:
				{
				alt22 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: ident ( ( WS )* attribute_args_list )?
				{
				DebugLocation(244, 4);
				PushFollow(Follow._ident_in_attribute_item731);
				ident27=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident27.Tree);
				DebugLocation(244, 10);
				// SugarCpp.g:244:10: ( ( WS )* attribute_args_list )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				try
				{
					alt13 = dfa13.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:11: ( WS )* attribute_args_list
					{
					DebugLocation(244, 11);
					// SugarCpp.g:244:11: ( WS )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==WS))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:244:11: WS
							{
							DebugLocation(244, 11);
							WS28=(IToken)Match(input,WS,Follow._WS_in_attribute_item734); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS28);


							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(244, 15);
					PushFollow(Follow._attribute_args_list_in_attribute_item737);
					attribute_args_list29=attribute_args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args_list.Add(attribute_args_list29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: ident, attribute_args_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 244:37: -> ^( Attribute ident ( attribute_args_list )? )
				{
					DebugLocation(244, 40);
					// SugarCpp.g:244:40: ^( Attribute ident ( attribute_args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(244, 52);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(244, 58);
					// SugarCpp.g:244:58: ( attribute_args_list )?
					if (stream_attribute_args_list.HasNext)
					{
						DebugLocation(244, 58);
						adaptor.AddChild(root_1, stream_attribute_args_list.NextTree());

					}
					stream_attribute_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:4: 'const' ( ( WS )* attribute_args_list )?
				{
				DebugLocation(245, 4);
				string_literal30=(IToken)Match(input,142,Follow._142_in_attribute_item755); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal30);

				DebugLocation(245, 12);
				// SugarCpp.g:245:12: ( ( WS )* attribute_args_list )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				try
				{
					alt15 = dfa15.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:245:13: ( WS )* attribute_args_list
					{
					DebugLocation(245, 13);
					// SugarCpp.g:245:13: ( WS )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==WS))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:245:13: WS
							{
							DebugLocation(245, 13);
							WS31=(IToken)Match(input,WS,Follow._WS_in_attribute_item758); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS31);


							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(245, 17);
					PushFollow(Follow._attribute_args_list_in_attribute_item761);
					attribute_args_list32=attribute_args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args_list.Add(attribute_args_list32.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: attribute_args_list, 142
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:39: -> ^( Attribute 'const' ( attribute_args_list )? )
				{
					DebugLocation(245, 42);
					// SugarCpp.g:245:42: ^( Attribute 'const' ( attribute_args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(245, 54);
					adaptor.AddChild(root_1, stream_142.NextNode());
					DebugLocation(245, 62);
					// SugarCpp.g:245:62: ( attribute_args_list )?
					if (stream_attribute_args_list.HasNext)
					{
						DebugLocation(245, 62);
						adaptor.AddChild(root_1, stream_attribute_args_list.NextTree());

					}
					stream_attribute_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:246:4: 'static' ( ( WS )* attribute_args_list )?
				{
				DebugLocation(246, 4);
				string_literal33=(IToken)Match(input,166,Follow._166_in_attribute_item779); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal33);

				DebugLocation(246, 13);
				// SugarCpp.g:246:13: ( ( WS )* attribute_args_list )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				try
				{
					alt17 = dfa17.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:14: ( WS )* attribute_args_list
					{
					DebugLocation(246, 14);
					// SugarCpp.g:246:14: ( WS )*
					try { DebugEnterSubRule(16);
					while (true)
					{
						int alt16=2;
						try { DebugEnterDecision(16, false);
						int LA16_0 = input.LA(1);

						if ((LA16_0==WS))
						{
							alt16 = 1;
						}


						} finally { DebugExitDecision(16); }
						switch ( alt16 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:246:14: WS
							{
							DebugLocation(246, 14);
							WS34=(IToken)Match(input,WS,Follow._WS_in_attribute_item782); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS34);


							}
							break;

						default:
							goto loop16;
						}
					}

					loop16:
						;

					} finally { DebugExitSubRule(16); }

					DebugLocation(246, 18);
					PushFollow(Follow._attribute_args_list_in_attribute_item785);
					attribute_args_list35=attribute_args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args_list.Add(attribute_args_list35.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }



				{
				// AST REWRITE
				// elements: attribute_args_list, 166
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 246:40: -> ^( Attribute 'static' ( attribute_args_list )? )
				{
					DebugLocation(246, 43);
					// SugarCpp.g:246:43: ^( Attribute 'static' ( attribute_args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(246, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(246, 55);
					adaptor.AddChild(root_1, stream_166.NextNode());
					DebugLocation(246, 64);
					// SugarCpp.g:246:64: ( attribute_args_list )?
					if (stream_attribute_args_list.HasNext)
					{
						DebugLocation(246, 64);
						adaptor.AddChild(root_1, stream_attribute_args_list.NextTree());

					}
					stream_attribute_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:247:4: 'public' ( ( WS )* attribute_args_list )?
				{
				DebugLocation(247, 4);
				string_literal36=(IToken)Match(input,163,Follow._163_in_attribute_item803); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal36);

				DebugLocation(247, 13);
				// SugarCpp.g:247:13: ( ( WS )* attribute_args_list )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				try
				{
					alt19 = dfa19.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:14: ( WS )* attribute_args_list
					{
					DebugLocation(247, 14);
					// SugarCpp.g:247:14: ( WS )*
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==WS))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch ( alt18 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:247:14: WS
							{
							DebugLocation(247, 14);
							WS37=(IToken)Match(input,WS,Follow._WS_in_attribute_item806); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS37);


							}
							break;

						default:
							goto loop18;
						}
					}

					loop18:
						;

					} finally { DebugExitSubRule(18); }

					DebugLocation(247, 18);
					PushFollow(Follow._attribute_args_list_in_attribute_item809);
					attribute_args_list38=attribute_args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args_list.Add(attribute_args_list38.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: 163, attribute_args_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 247:40: -> ^( Attribute 'public' ( attribute_args_list )? )
				{
					DebugLocation(247, 43);
					// SugarCpp.g:247:43: ^( Attribute 'public' ( attribute_args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(247, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(247, 55);
					adaptor.AddChild(root_1, stream_163.NextNode());
					DebugLocation(247, 64);
					// SugarCpp.g:247:64: ( attribute_args_list )?
					if (stream_attribute_args_list.HasNext)
					{
						DebugLocation(247, 64);
						adaptor.AddChild(root_1, stream_attribute_args_list.NextTree());

					}
					stream_attribute_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:248:4: 'virtual' ( ( WS )* attribute_args_list )?
				{
				DebugLocation(248, 4);
				string_literal39=(IToken)Match(input,178,Follow._178_in_attribute_item827); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal39);

				DebugLocation(248, 14);
				// SugarCpp.g:248:14: ( ( WS )* attribute_args_list )?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				try
				{
					alt21 = dfa21.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:15: ( WS )* attribute_args_list
					{
					DebugLocation(248, 15);
					// SugarCpp.g:248:15: ( WS )*
					try { DebugEnterSubRule(20);
					while (true)
					{
						int alt20=2;
						try { DebugEnterDecision(20, false);
						int LA20_0 = input.LA(1);

						if ((LA20_0==WS))
						{
							alt20 = 1;
						}


						} finally { DebugExitDecision(20); }
						switch ( alt20 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:15: WS
							{
							DebugLocation(248, 15);
							WS40=(IToken)Match(input,WS,Follow._WS_in_attribute_item830); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS40);


							}
							break;

						default:
							goto loop20;
						}
					}

					loop20:
						;

					} finally { DebugExitSubRule(20); }

					DebugLocation(248, 19);
					PushFollow(Follow._attribute_args_list_in_attribute_item833);
					attribute_args_list41=attribute_args_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args_list.Add(attribute_args_list41.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(21); }



				{
				// AST REWRITE
				// elements: 178, attribute_args_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:41: -> ^( Attribute 'virtual' ( attribute_args_list )? )
				{
					DebugLocation(248, 44);
					// SugarCpp.g:248:44: ^( Attribute 'virtual' ( attribute_args_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(248, 56);
					adaptor.AddChild(root_1, stream_178.NextNode());
					DebugLocation(248, 66);
					// SugarCpp.g:248:66: ( attribute_args_list )?
					if (stream_attribute_args_list.HasNext)
					{
						DebugLocation(248, 66);
						adaptor.AddChild(root_1, stream_attribute_args_list.NextTree());

					}
					stream_attribute_args_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 6);
			LeaveRule("attribute_item", 6);
			LeaveRule_attribute_item();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:251:1: attribute : ( '[' ( WS )* attribute_item ( ( WS )* ',' ( WS )* attribute_item )* ( WS )* ']' ( WS )* ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 7);
		TraceIn("attribute", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal42 = default(IToken);
		IToken WS43 = default(IToken);
		IToken WS45 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken WS47 = default(IToken);
		IToken WS49 = default(IToken);
		IToken char_literal50 = default(IToken);
		IToken WS51 = default(IToken);
		IToken NEWLINE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree WS43_tree = default(CommonTree);
		CommonTree WS45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		CommonTree WS47_tree = default(CommonTree);
		CommonTree WS49_tree = default(CommonTree);
		CommonTree char_literal50_tree = default(CommonTree);
		CommonTree WS51_tree = default(CommonTree);
		CommonTree NEWLINE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( '[' ( WS )* attribute_item ( ( WS )* ',' ( WS )* attribute_item )* ( WS )* ']' ( WS )* ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( '[' ( WS )* attribute_item ( ( WS )* ',' ( WS )* attribute_item )* ( WS )* ']' ( WS )* ( NEWLINE )+ )+
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( '[' ( WS )* attribute_item ( ( WS )* ',' ( WS )* attribute_item )* ( WS )* ']' ( WS )* ( NEWLINE )+ )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==132))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:5: '[' ( WS )* attribute_item ( ( WS )* ',' ( WS )* attribute_item )* ( WS )* ']' ( WS )* ( NEWLINE )+
					{
					DebugLocation(252, 5);
					char_literal42=(IToken)Match(input,132,Follow._132_in_attribute858); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal42);

					DebugLocation(252, 9);
					// SugarCpp.g:252:9: ( WS )*
					try { DebugEnterSubRule(23);
					while (true)
					{
						int alt23=2;
						try { DebugEnterDecision(23, false);
						int LA23_0 = input.LA(1);

						if ((LA23_0==WS))
						{
							alt23 = 1;
						}


						} finally { DebugExitDecision(23); }
						switch ( alt23 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:9: WS
							{
							DebugLocation(252, 9);
							WS43=(IToken)Match(input,WS,Follow._WS_in_attribute860); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS43);


							}
							break;

						default:
							goto loop23;
						}
					}

					loop23:
						;

					} finally { DebugExitSubRule(23); }

					DebugLocation(252, 13);
					PushFollow(Follow._attribute_item_in_attribute863);
					attribute_item44=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item44.Tree);
					DebugLocation(252, 28);
					// SugarCpp.g:252:28: ( ( WS )* ',' ( WS )* attribute_item )*
					try { DebugEnterSubRule(26);
					while (true)
					{
						int alt26=2;
						try { DebugEnterDecision(26, false);
						try
						{
							alt26 = dfa26.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(26); }
						switch ( alt26 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:29: ( WS )* ',' ( WS )* attribute_item
							{
							DebugLocation(252, 29);
							// SugarCpp.g:252:29: ( WS )*
							try { DebugEnterSubRule(24);
							while (true)
							{
								int alt24=2;
								try { DebugEnterDecision(24, false);
								int LA24_0 = input.LA(1);

								if ((LA24_0==WS))
								{
									alt24 = 1;
								}


								} finally { DebugExitDecision(24); }
								switch ( alt24 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:252:29: WS
									{
									DebugLocation(252, 29);
									WS45=(IToken)Match(input,WS,Follow._WS_in_attribute866); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS45);


									}
									break;

								default:
									goto loop24;
								}
							}

							loop24:
								;

							} finally { DebugExitSubRule(24); }

							DebugLocation(252, 33);
							char_literal46=(IToken)Match(input,100,Follow._100_in_attribute869); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal46);

							DebugLocation(252, 37);
							// SugarCpp.g:252:37: ( WS )*
							try { DebugEnterSubRule(25);
							while (true)
							{
								int alt25=2;
								try { DebugEnterDecision(25, false);
								int LA25_0 = input.LA(1);

								if ((LA25_0==WS))
								{
									alt25 = 1;
								}


								} finally { DebugExitDecision(25); }
								switch ( alt25 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:252:37: WS
									{
									DebugLocation(252, 37);
									WS47=(IToken)Match(input,WS,Follow._WS_in_attribute871); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS47);


									}
									break;

								default:
									goto loop25;
								}
							}

							loop25:
								;

							} finally { DebugExitSubRule(25); }

							DebugLocation(252, 41);
							PushFollow(Follow._attribute_item_in_attribute874);
							attribute_item48=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item48.Tree);

							}
							break;

						default:
							goto loop26;
						}
					}

					loop26:
						;

					} finally { DebugExitSubRule(26); }

					DebugLocation(252, 58);
					// SugarCpp.g:252:58: ( WS )*
					try { DebugEnterSubRule(27);
					while (true)
					{
						int alt27=2;
						try { DebugEnterDecision(27, false);
						int LA27_0 = input.LA(1);

						if ((LA27_0==WS))
						{
							alt27 = 1;
						}


						} finally { DebugExitDecision(27); }
						switch ( alt27 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:58: WS
							{
							DebugLocation(252, 58);
							WS49=(IToken)Match(input,WS,Follow._WS_in_attribute878); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS49);


							}
							break;

						default:
							goto loop27;
						}
					}

					loop27:
						;

					} finally { DebugExitSubRule(27); }

					DebugLocation(252, 62);
					char_literal50=(IToken)Match(input,133,Follow._133_in_attribute881); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal50);

					DebugLocation(252, 66);
					// SugarCpp.g:252:66: ( WS )*
					try { DebugEnterSubRule(28);
					while (true)
					{
						int alt28=2;
						try { DebugEnterDecision(28, false);
						int LA28_0 = input.LA(1);

						if ((LA28_0==WS))
						{
							alt28 = 1;
						}


						} finally { DebugExitDecision(28); }
						switch ( alt28 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:66: WS
							{
							DebugLocation(252, 66);
							WS51=(IToken)Match(input,WS,Follow._WS_in_attribute883); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS51);


							}
							break;

						default:
							goto loop28;
						}
					}

					loop28:
						;

					} finally { DebugExitSubRule(28); }

					DebugLocation(252, 70);
					// SugarCpp.g:252:70: ( NEWLINE )+
					int cnt29=0;
					try { DebugEnterSubRule(29);
					while (true)
					{
						int alt29=2;
						try { DebugEnterDecision(29, false);
						int LA29_0 = input.LA(1);

						if ((LA29_0==NEWLINE))
						{
							alt29 = 1;
						}


						} finally { DebugExitDecision(29); }
						switch (alt29)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:70: NEWLINE
							{
							DebugLocation(252, 70);
							NEWLINE52=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute886); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


							}
							break;

						default:
							if (cnt29 >= 1)
								goto loop29;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee29 = new EarlyExitException( 29, input );
							DebugRecognitionException(eee29);
							throw eee29;
						}
						cnt29++;
					}
					loop29:
						;

					} finally { DebugExitSubRule(29); }


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:81: -> ( attribute_item )+
			{
				DebugLocation(252, 84);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(252, 84);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 7);
			LeaveRule("attribute", 7);
			LeaveRule_attribute();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:255:1: global_alloc : ( attribute )? ( 'extern' ( WS )* )? ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 8);
		TraceIn("global_alloc", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		IToken WS55 = default(IToken);
		IToken WS57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken WS59 = default(IToken);
		IToken WS61 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken string_literal63 = default(IToken);
		IToken WS64 = default(IToken);
		IToken WS66 = default(IToken);
		IToken WS68 = default(IToken);
		IToken string_literal69 = default(IToken);
		IToken WS70 = default(IToken);
		IToken WS72 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken WS74 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree WS55_tree = default(CommonTree);
		CommonTree WS57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree WS59_tree = default(CommonTree);
		CommonTree WS61_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree string_literal63_tree = default(CommonTree);
		CommonTree WS64_tree = default(CommonTree);
		CommonTree WS66_tree = default(CommonTree);
		CommonTree WS68_tree = default(CommonTree);
		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree WS70_tree = default(CommonTree);
		CommonTree WS72_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree WS74_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ( attribute )? ( 'extern' ( WS )* )? ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: ( attribute )? ( 'extern' ( WS )* )? ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) ) )
			{
			DebugLocation(256, 4);
			// SugarCpp.g:256:4: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==132))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: attribute
				{
				DebugLocation(256, 4);
				PushFollow(Follow._attribute_in_global_alloc905);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(256, 15);
			// SugarCpp.g:256:15: ( 'extern' ( WS )* )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==147))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:16: 'extern' ( WS )*
				{
				DebugLocation(256, 16);
				string_literal54=(IToken)Match(input,147,Follow._147_in_global_alloc909); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal54);

				DebugLocation(256, 25);
				// SugarCpp.g:256:25: ( WS )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==WS))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:25: WS
						{
						DebugLocation(256, 25);
						WS55=(IToken)Match(input,WS,Follow._WS_in_global_alloc911); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS55);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(256, 31);
			PushFollow(Follow._ident_list_in_global_alloc916);
			ident_list56=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list56.Tree);
			DebugLocation(256, 42);
			// SugarCpp.g:256:42: ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) ) )
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			try
			{
				alt46 = dfa46.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:44: ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(256, 44);
				// SugarCpp.g:256:44: ( WS )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:44: WS
						{
						DebugLocation(256, 44);
						WS57=(IToken)Match(input,WS,Follow._WS_in_global_alloc920); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS57);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(256, 48);
				char_literal58=(IToken)Match(input,111,Follow._111_in_global_alloc923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal58);

				DebugLocation(256, 52);
				// SugarCpp.g:256:52: ( WS )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==WS))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:52: WS
						{
						DebugLocation(256, 52);
						WS59=(IToken)Match(input,WS,Follow._WS_in_global_alloc925); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS59);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(256, 56);
				PushFollow(Follow._type_name_in_global_alloc928);
				type_name60=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name60.Tree);
				DebugLocation(256, 66);
				// SugarCpp.g:256:66: ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				int alt40=3;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				try
				{
					alt40 = dfa40.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:256:68: ( WS )* ( '=' | ':=' ) ( WS )* where_expr
					{
					DebugLocation(256, 68);
					// SugarCpp.g:256:68: ( WS )*
					try { DebugEnterSubRule(36);
					while (true)
					{
						int alt36=2;
						try { DebugEnterDecision(36, false);
						int LA36_0 = input.LA(1);

						if ((LA36_0==WS))
						{
							alt36 = 1;
						}


						} finally { DebugExitDecision(36); }
						switch ( alt36 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:256:68: WS
							{
							DebugLocation(256, 68);
							WS61=(IToken)Match(input,WS,Follow._WS_in_global_alloc932); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS61);


							}
							break;

						default:
							goto loop36;
						}
					}

					loop36:
						;

					} finally { DebugExitSubRule(36); }

					DebugLocation(256, 72);
					// SugarCpp.g:256:72: ( '=' | ':=' )
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==121))
					{
						alt37 = 1;
					}
					else if ((LA37_0==113))
					{
						alt37 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:73: '='
						{
						DebugLocation(256, 73);
						char_literal62=(IToken)Match(input,121,Follow._121_in_global_alloc936); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal62);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:256:79: ':='
						{
						DebugLocation(256, 79);
						string_literal63=(IToken)Match(input,113,Follow._113_in_global_alloc940); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal63);


						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(256, 85);
					// SugarCpp.g:256:85: ( WS )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_0 = input.LA(1);

						if ((LA38_0==WS))
						{
							alt38 = 1;
						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:256:85: WS
							{
							DebugLocation(256, 85);
							WS64=(IToken)Match(input,WS,Follow._WS_in_global_alloc943); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS64);


							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }

					DebugLocation(256, 89);
					PushFollow(Follow._where_expr_in_global_alloc946);
					where_expr65=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr65.Tree);


					{
					// AST REWRITE
					// elements: 147, type_name, attribute, where_expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 256:100: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(256, 103);
						// SugarCpp.g:256:103: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(256, 105);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(256, 122);
						// SugarCpp.g:256:122: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(256, 122);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(256, 133);
						// SugarCpp.g:256:133: ( 'extern' )?
						if (stream_147.HasNext)
						{
							DebugLocation(256, 133);
							adaptor.AddChild(root_1, stream_147.NextNode());

						}
						stream_147.Reset();
						DebugLocation(256, 143);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(256, 153);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(256, 164);
						// SugarCpp.g:256:164: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(256, 166);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(256, 176);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:257:32: ( WS )* bracket_expr_list
					{
					DebugLocation(257, 32);
					// SugarCpp.g:257:32: ( WS )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=2;
						try { DebugEnterDecision(39, false);
						int LA39_0 = input.LA(1);

						if ((LA39_0==WS))
						{
							alt39 = 1;
						}


						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:257:32: WS
							{
							DebugLocation(257, 32);
							WS66=(IToken)Match(input,WS,Follow._WS_in_global_alloc1001); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS66);


							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }

					DebugLocation(257, 36);
					PushFollow(Follow._bracket_expr_list_in_global_alloc1004);
					bracket_expr_list67=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list67.Tree);


					{
					// AST REWRITE
					// elements: type_name, bracket_expr_list, 147, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 257:54: -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(257, 57);
						// SugarCpp.g:257:57: ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(257, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(257, 78);
						// SugarCpp.g:257:78: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(257, 78);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(257, 89);
						// SugarCpp.g:257:89: ( 'extern' )?
						if (stream_147.HasNext)
						{
							DebugLocation(257, 89);
							adaptor.AddChild(root_1, stream_147.NextNode());

						}
						stream_147.Reset();
						DebugLocation(257, 99);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(257, 109);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(257, 120);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:258:33: 
					{

					{
					// AST REWRITE
					// elements: type_name, 147, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 258:33: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(258, 36);
						// SugarCpp.g:258:36: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(258, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(258, 55);
						// SugarCpp.g:258:55: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(258, 55);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(258, 66);
						// SugarCpp.g:258:66: ( 'extern' )?
						if (stream_147.HasNext)
						{
							DebugLocation(258, 66);
							adaptor.AddChild(root_1, stream_147.NextNode());

						}
						stream_147.Reset();
						DebugLocation(258, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(258, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(258, 97);
						// SugarCpp.g:258:97: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(258, 99);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(40); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:260:20: ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* )
				{
				DebugLocation(260, 20);
				// SugarCpp.g:260:20: ( WS )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:20: WS
						{
						DebugLocation(260, 20);
						WS68=(IToken)Match(input,WS,Follow._WS_in_global_alloc1128); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS68);


						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(260, 24);
				string_literal69=(IToken)Match(input,113,Follow._113_in_global_alloc1131); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal69);

				DebugLocation(260, 29);
				// SugarCpp.g:260:29: ( WS )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==WS))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:29: WS
						{
						DebugLocation(260, 29);
						WS70=(IToken)Match(input,WS,Follow._WS_in_global_alloc1133); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS70);


						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(260, 33);
				// SugarCpp.g:260:33: ( where_expr ( ( WS )* ',' ( WS )* where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:260:34: where_expr ( ( WS )* ',' ( WS )* where_expr )*
				{
				DebugLocation(260, 34);
				PushFollow(Follow._where_expr_in_global_alloc1137);
				where_expr71=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr71.Tree);
				DebugLocation(260, 45);
				// SugarCpp.g:260:45: ( ( WS )* ',' ( WS )* where_expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					try
					{
						alt45 = dfa45.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:46: ( WS )* ',' ( WS )* where_expr
						{
						DebugLocation(260, 46);
						// SugarCpp.g:260:46: ( WS )*
						try { DebugEnterSubRule(43);
						while (true)
						{
							int alt43=2;
							try { DebugEnterDecision(43, false);
							int LA43_0 = input.LA(1);

							if ((LA43_0==WS))
							{
								alt43 = 1;
							}


							} finally { DebugExitDecision(43); }
							switch ( alt43 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:260:46: WS
								{
								DebugLocation(260, 46);
								WS72=(IToken)Match(input,WS,Follow._WS_in_global_alloc1140); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS72);


								}
								break;

							default:
								goto loop43;
							}
						}

						loop43:
							;

						} finally { DebugExitSubRule(43); }

						DebugLocation(260, 50);
						char_literal73=(IToken)Match(input,100,Follow._100_in_global_alloc1143); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal73);

						DebugLocation(260, 54);
						// SugarCpp.g:260:54: ( WS )*
						try { DebugEnterSubRule(44);
						while (true)
						{
							int alt44=2;
							try { DebugEnterDecision(44, false);
							int LA44_0 = input.LA(1);

							if ((LA44_0==WS))
							{
								alt44 = 1;
							}


							} finally { DebugExitDecision(44); }
							switch ( alt44 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:260:54: WS
								{
								DebugLocation(260, 54);
								WS74=(IToken)Match(input,WS,Follow._WS_in_global_alloc1145); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS74);


								}
								break;

							default:
								goto loop44;
							}
						}

						loop44:
							;

						} finally { DebugExitSubRule(44); }

						DebugLocation(260, 58);
						PushFollow(Follow._where_expr_in_global_alloc1148);
						where_expr75=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr75.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				}



				{
				// AST REWRITE
				// elements: 113, ident_list, 147, where_expr, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:72: -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) )
				{
					DebugLocation(260, 75);
					// SugarCpp.g:260:75: ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(260, 82);
					// SugarCpp.g:260:82: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(260, 82);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(260, 93);
					// SugarCpp.g:260:93: ( 'extern' )?
					if (stream_147.HasNext)
					{
						DebugLocation(260, 93);
						adaptor.AddChild(root_1, stream_147.NextNode());

					}
					stream_147.Reset();
					DebugLocation(260, 103);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(260, 114);
					// SugarCpp.g:260:114: ^( Expr_Args ( where_expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 116);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(260, 126);
					if (!(stream_where_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(260, 126);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 8);
			LeaveRule("global_alloc", 8);
			LeaveRule_global_alloc();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:264:1: global_using : ( attribute )? 'using' ( ( WS )* stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 9);
		TraceIn("global_using", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal77 = default(IToken);
		IToken WS78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree WS78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'using' ( ( WS )* stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'using' ( ( WS )* stmt_using_item )*
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==132))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_global_using1202);
				attribute76=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(265, 15);
			string_literal77=(IToken)Match(input,177,Follow._177_in_global_using1205); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(string_literal77);

			DebugLocation(265, 23);
			// SugarCpp.g:265:23: ( ( WS )* stmt_using_item )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:265:24: ( WS )* stmt_using_item
					{
					DebugLocation(265, 24);
					// SugarCpp.g:265:24: ( WS )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==WS))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:265:24: WS
							{
							DebugLocation(265, 24);
							WS78=(IToken)Match(input,WS,Follow._WS_in_global_using1208); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS78);


							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(265, 28);
					PushFollow(Follow._stmt_using_item_in_global_using1211);
					stmt_using_item79=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item79.Tree);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:46: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(265, 49);
				// SugarCpp.g:265:49: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 51);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(265, 62);
				// SugarCpp.g:265:62: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 62);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 73);
				// SugarCpp.g:265:73: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(265, 73);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 9);
			LeaveRule("global_using", 9);
			LeaveRule_global_using();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:268:1: global_typedef : ( attribute )? 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 10);
		TraceIn("global_typedef", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal81 = default(IToken);
		IToken WS82 = default(IToken);
		IToken WS84 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken WS86 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal81_tree = default(CommonTree);
		CommonTree WS82_tree = default(CommonTree);
		CommonTree WS84_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree WS86_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==132))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_global_typedef1236);
				attribute80=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(269, 15);
			string_literal81=(IToken)Match(input,174,Follow._174_in_global_typedef1239); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(string_literal81);

			DebugLocation(269, 25);
			// SugarCpp.g:269:25: ( WS )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==WS))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:269:25: WS
					{
					DebugLocation(269, 25);
					WS82=(IToken)Match(input,WS,Follow._WS_in_global_typedef1241); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS82);


					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(269, 29);
			PushFollow(Follow._ident_in_global_typedef1244);
			ident83=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident83.Tree);
			DebugLocation(269, 35);
			// SugarCpp.g:269:35: ( WS )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==WS))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:269:35: WS
					{
					DebugLocation(269, 35);
					WS84=(IToken)Match(input,WS,Follow._WS_in_global_typedef1246); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS84);


					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }

			DebugLocation(269, 39);
			char_literal85=(IToken)Match(input,121,Follow._121_in_global_typedef1249); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal85);

			DebugLocation(269, 43);
			// SugarCpp.g:269:43: ( WS )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:269:43: WS
					{
					DebugLocation(269, 43);
					WS86=(IToken)Match(input,WS,Follow._WS_in_global_typedef1251); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS86);


					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }

			DebugLocation(269, 47);
			PushFollow(Follow._type_name_in_global_typedef1254);
			type_name87=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name87.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:57: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(269, 60);
				// SugarCpp.g:269:60: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(269, 75);
				// SugarCpp.g:269:75: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 75);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 86);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(269, 96);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 10);
			LeaveRule("global_typedef", 10);
			LeaveRule_global_typedef();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:272:1: import_def : ( attribute )? 'import' ( ( WS )* STRING )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal89 = default(IToken);
		IToken WS90 = default(IToken);
		IToken STRING91 = default(IToken);
		IToken WS92 = default(IToken);
		IToken NEWLINE93 = default(IToken);
		IToken INDENT94 = default(IToken);
		IToken NEWLINE95 = default(IToken);
		IToken STRING96 = default(IToken);
		IToken WS97 = default(IToken);
		IToken NEWLINE98 = default(IToken);
		IToken DEDENT99 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute88 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal89_tree = default(CommonTree);
		CommonTree WS90_tree = default(CommonTree);
		CommonTree STRING91_tree = default(CommonTree);
		CommonTree WS92_tree = default(CommonTree);
		CommonTree NEWLINE93_tree = default(CommonTree);
		CommonTree INDENT94_tree = default(CommonTree);
		CommonTree NEWLINE95_tree = default(CommonTree);
		CommonTree STRING96_tree = default(CommonTree);
		CommonTree WS97_tree = default(CommonTree);
		CommonTree NEWLINE98_tree = default(CommonTree);
		CommonTree DEDENT99_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? 'import' ( ( WS )* STRING )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: ( attribute )? 'import' ( ( WS )* STRING )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(273, 4);
			// SugarCpp.g:273:4: ( attribute )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==132))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:4: attribute
				{
				DebugLocation(273, 4);
				PushFollow(Follow._attribute_in_import_def1278);
				attribute88=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute88.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(273, 15);
			string_literal89=(IToken)Match(input,151,Follow._151_in_import_def1281); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_151.Add(string_literal89);

			DebugLocation(273, 24);
			// SugarCpp.g:273:24: ( ( WS )* STRING )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			try
			{
				alt56 = dfa56.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:25: ( WS )* STRING
				{
				DebugLocation(273, 25);
				// SugarCpp.g:273:25: ( WS )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==WS))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:25: WS
						{
						DebugLocation(273, 25);
						WS90=(IToken)Match(input,WS,Follow._WS_in_import_def1284); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS90);


						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(273, 29);
				STRING91=(IToken)Match(input,STRING,Follow._STRING_in_import_def1287); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING91);


				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(273, 38);
			// SugarCpp.g:273:38: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			try
			{
				alt63 = dfa63.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:39: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(273, 39);
				// SugarCpp.g:273:39: ( WS )*
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch ( alt57 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:39: WS
						{
						DebugLocation(273, 39);
						WS92=(IToken)Match(input,WS,Follow._WS_in_import_def1292); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS92);


						}
						break;

					default:
						goto loop57;
					}
				}

				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(273, 43);
				// SugarCpp.g:273:43: ( NEWLINE )+
				int cnt58=0;
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==NEWLINE))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:43: NEWLINE
						{
						DebugLocation(273, 43);
						NEWLINE93=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1295); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE93);


						}
						break;

					default:
						if (cnt58 >= 1)
							goto loop58;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee58 = new EarlyExitException( 58, input );
						DebugRecognitionException(eee58);
						throw eee58;
					}
					cnt58++;
				}
				loop58:
					;

				} finally { DebugExitSubRule(58); }

				DebugLocation(273, 52);
				INDENT94=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1298); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT94);

				DebugLocation(273, 59);
				// SugarCpp.g:273:59: ( NEWLINE )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_0 = input.LA(1);

					if ((LA59_0==NEWLINE))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:59: NEWLINE
						{
						DebugLocation(273, 59);
						NEWLINE95=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1300); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE95);


						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }

				DebugLocation(273, 68);
				// SugarCpp.g:273:68: ( STRING ( WS )* ( NEWLINE )+ )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==STRING))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:69: STRING ( WS )* ( NEWLINE )+
						{
						DebugLocation(273, 69);
						STRING96=(IToken)Match(input,STRING,Follow._STRING_in_import_def1304); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING96);

						DebugLocation(273, 76);
						// SugarCpp.g:273:76: ( WS )*
						try { DebugEnterSubRule(60);
						while (true)
						{
							int alt60=2;
							try { DebugEnterDecision(60, false);
							int LA60_0 = input.LA(1);

							if ((LA60_0==WS))
							{
								alt60 = 1;
							}


							} finally { DebugExitDecision(60); }
							switch ( alt60 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:273:76: WS
								{
								DebugLocation(273, 76);
								WS97=(IToken)Match(input,WS,Follow._WS_in_import_def1306); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS97);


								}
								break;

							default:
								goto loop60;
							}
						}

						loop60:
							;

						} finally { DebugExitSubRule(60); }

						DebugLocation(273, 80);
						// SugarCpp.g:273:80: ( NEWLINE )+
						int cnt61=0;
						try { DebugEnterSubRule(61);
						while (true)
						{
							int alt61=2;
							try { DebugEnterDecision(61, false);
							int LA61_0 = input.LA(1);

							if ((LA61_0==NEWLINE))
							{
								alt61 = 1;
							}


							} finally { DebugExitDecision(61); }
							switch (alt61)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:273:80: NEWLINE
								{
								DebugLocation(273, 80);
								NEWLINE98=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1309); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE98);


								}
								break;

							default:
								if (cnt61 >= 1)
									goto loop61;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee61 = new EarlyExitException( 61, input );
								DebugRecognitionException(eee61);
								throw eee61;
							}
							cnt61++;
						}
						loop61:
							;

						} finally { DebugExitSubRule(61); }


						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }

				DebugLocation(273, 91);
				DEDENT99=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1314); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT99);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:100: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(273, 103);
				// SugarCpp.g:273:103: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 105);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(273, 112);
				// SugarCpp.g:273:112: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(273, 112);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(273, 123);
				// SugarCpp.g:273:123: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(273, 123);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:276:1: enum_def : ( attribute )? 'enum' ( WS )* ident ( WS )* '=' ( ( WS )* ident ( ( WS )* '|' ( WS )* ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal101 = default(IToken);
		IToken WS102 = default(IToken);
		IToken WS104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken WS106 = default(IToken);
		IToken WS108 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken WS110 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree WS102_tree = default(CommonTree);
		CommonTree WS104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree WS106_tree = default(CommonTree);
		CommonTree WS108_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree WS110_tree = default(CommonTree);
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(276, 1);
		try
		{
			// SugarCpp.g:277:2: ( ( attribute )? 'enum' ( WS )* ident ( WS )* '=' ( ( WS )* ident ( ( WS )* '|' ( WS )* ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:277:4: ( attribute )? 'enum' ( WS )* ident ( WS )* '=' ( ( WS )* ident ( ( WS )* '|' ( WS )* ident )* )?
			{
			DebugLocation(277, 4);
			// SugarCpp.g:277:4: ( attribute )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==132))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:4: attribute
				{
				DebugLocation(277, 4);
				PushFollow(Follow._attribute_in_enum_def1339);
				attribute100=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute100.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(277, 15);
			string_literal101=(IToken)Match(input,146,Follow._146_in_enum_def1342); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_146.Add(string_literal101);

			DebugLocation(277, 22);
			// SugarCpp.g:277:22: ( WS )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==WS))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:22: WS
					{
					DebugLocation(277, 22);
					WS102=(IToken)Match(input,WS,Follow._WS_in_enum_def1344); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS102);


					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(277, 26);
			PushFollow(Follow._ident_in_enum_def1347);
			ident103=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident103.Tree);
			DebugLocation(277, 32);
			// SugarCpp.g:277:32: ( WS )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:32: WS
					{
					DebugLocation(277, 32);
					WS104=(IToken)Match(input,WS,Follow._WS_in_enum_def1349); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS104);


					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(277, 36);
			char_literal105=(IToken)Match(input,121,Follow._121_in_enum_def1352); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal105);

			DebugLocation(277, 40);
			// SugarCpp.g:277:40: ( ( WS )* ident ( ( WS )* '|' ( WS )* ident )* )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:41: ( WS )* ident ( ( WS )* '|' ( WS )* ident )*
				{
				DebugLocation(277, 41);
				// SugarCpp.g:277:41: ( WS )*
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==WS))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch ( alt67 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:41: WS
						{
						DebugLocation(277, 41);
						WS106=(IToken)Match(input,WS,Follow._WS_in_enum_def1355); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS106);


						}
						break;

					default:
						goto loop67;
					}
				}

				loop67:
					;

				} finally { DebugExitSubRule(67); }

				DebugLocation(277, 45);
				PushFollow(Follow._ident_in_enum_def1358);
				ident107=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident107.Tree);
				DebugLocation(277, 51);
				// SugarCpp.g:277:51: ( ( WS )* '|' ( WS )* ident )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					try
					{
						alt70 = dfa70.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:52: ( WS )* '|' ( WS )* ident
						{
						DebugLocation(277, 52);
						// SugarCpp.g:277:52: ( WS )*
						try { DebugEnterSubRule(68);
						while (true)
						{
							int alt68=2;
							try { DebugEnterDecision(68, false);
							int LA68_0 = input.LA(1);

							if ((LA68_0==WS))
							{
								alt68 = 1;
							}


							} finally { DebugExitDecision(68); }
							switch ( alt68 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:277:52: WS
								{
								DebugLocation(277, 52);
								WS108=(IToken)Match(input,WS,Follow._WS_in_enum_def1361); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS108);


								}
								break;

							default:
								goto loop68;
							}
						}

						loop68:
							;

						} finally { DebugExitSubRule(68); }

						DebugLocation(277, 56);
						char_literal109=(IToken)Match(input,182,Follow._182_in_enum_def1364); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_182.Add(char_literal109);

						DebugLocation(277, 60);
						// SugarCpp.g:277:60: ( WS )*
						try { DebugEnterSubRule(69);
						while (true)
						{
							int alt69=2;
							try { DebugEnterDecision(69, false);
							int LA69_0 = input.LA(1);

							if ((LA69_0==WS))
							{
								alt69 = 1;
							}


							} finally { DebugExitDecision(69); }
							switch ( alt69 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:277:60: WS
								{
								DebugLocation(277, 60);
								WS110=(IToken)Match(input,WS,Follow._WS_in_enum_def1366); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS110);


								}
								break;

							default:
								goto loop69;
							}
						}

						loop69:
							;

						} finally { DebugExitSubRule(69); }

						DebugLocation(277, 64);
						PushFollow(Follow._ident_in_enum_def1369);
						ident111=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident111.Tree);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;

			}
			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 277:74: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(277, 77);
				// SugarCpp.g:277:77: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(277, 79);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(277, 84);
				// SugarCpp.g:277:84: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(277, 84);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(277, 95);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(277, 101);
				// SugarCpp.g:277:101: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(277, 103);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(277, 114);
				// SugarCpp.g:277:114: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(277, 114);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:280:1: namespace_def : ( attribute )? 'namespace' ( WS )* ident ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 13);
		TraceIn("namespace_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal113 = default(IToken);
		IToken WS114 = default(IToken);
		IToken WS116 = default(IToken);
		IToken NEWLINE117 = default(IToken);
		IToken INDENT118 = default(IToken);
		IToken NEWLINE119 = default(IToken);
		IToken DEDENT121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree WS114_tree = default(CommonTree);
		CommonTree WS116_tree = default(CommonTree);
		CommonTree NEWLINE117_tree = default(CommonTree);
		CommonTree INDENT118_tree = default(CommonTree);
		CommonTree NEWLINE119_tree = default(CommonTree);
		CommonTree DEDENT121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( ( attribute )? 'namespace' ( WS )* ident ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: ( attribute )? 'namespace' ( WS )* ident ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(281, 4);
			// SugarCpp.g:281:4: ( attribute )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==132))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:4: attribute
				{
				DebugLocation(281, 4);
				PushFollow(Follow._attribute_in_namespace_def1402);
				attribute112=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(281, 15);
			string_literal113=(IToken)Match(input,159,Follow._159_in_namespace_def1405); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_159.Add(string_literal113);

			DebugLocation(281, 27);
			// SugarCpp.g:281:27: ( WS )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:27: WS
					{
					DebugLocation(281, 27);
					WS114=(IToken)Match(input,WS,Follow._WS_in_namespace_def1407); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS114);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(281, 31);
			PushFollow(Follow._ident_in_namespace_def1410);
			ident115=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident115.Tree);
			DebugLocation(281, 37);
			// SugarCpp.g:281:37: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			try
			{
				alt77 = dfa77.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:38: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(281, 38);
				// SugarCpp.g:281:38: ( WS )*
				try { DebugEnterSubRule(74);
				while (true)
				{
					int alt74=2;
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==WS))
					{
						alt74 = 1;
					}


					} finally { DebugExitDecision(74); }
					switch ( alt74 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:281:38: WS
						{
						DebugLocation(281, 38);
						WS116=(IToken)Match(input,WS,Follow._WS_in_namespace_def1413); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS116);


						}
						break;

					default:
						goto loop74;
					}
				}

				loop74:
					;

				} finally { DebugExitSubRule(74); }

				DebugLocation(281, 42);
				// SugarCpp.g:281:42: ( NEWLINE )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==NEWLINE))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:281:42: NEWLINE
						{
						DebugLocation(281, 42);
						NEWLINE117=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1416); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE117);


						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }

				DebugLocation(281, 51);
				INDENT118=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1419); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT118);

				DebugLocation(281, 58);
				// SugarCpp.g:281:58: ( NEWLINE )*
				try { DebugEnterSubRule(76);
				while (true)
				{
					int alt76=2;
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==NEWLINE))
					{
						alt76 = 1;
					}


					} finally { DebugExitDecision(76); }
					switch ( alt76 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:281:58: NEWLINE
						{
						DebugLocation(281, 58);
						NEWLINE119=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1421); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE119);


						}
						break;

					default:
						goto loop76;
					}
				}

				loop76:
					;

				} finally { DebugExitSubRule(76); }

				DebugLocation(281, 67);
				PushFollow(Follow._global_block_in_namespace_def1424);
				global_block120=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block120.Tree);
				DebugLocation(281, 80);
				DEDENT121=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1426); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT121);


				}
				break;

			}
			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: ident, attribute, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 281:89: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(281, 92);
				// SugarCpp.g:281:92: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(281, 94);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(281, 104);
				// SugarCpp.g:281:104: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(281, 104);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(281, 115);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(281, 121);
				// SugarCpp.g:281:121: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(281, 121);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 13);
			LeaveRule("namespace_def", 13);
			LeaveRule_namespace_def();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_args();
	partial void LeaveRule_class_args();

	// $ANTLR start "class_args"
	// SugarCpp.g:284:1: class_args : '(' ( ( WS )* func_args ( WS )* ')' -> func_args | ( WS )* ')' -> ^( Func_Args ) ) ;
	[GrammarRule("class_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_args()
	{
		EnterRule_class_args();
		EnterRule("class_args", 14);
		TraceIn("class_args", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal122 = default(IToken);
		IToken WS123 = default(IToken);
		IToken WS125 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken WS127 = default(IToken);
		IToken char_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree WS123_tree = default(CommonTree);
		CommonTree WS125_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree WS127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "class_args");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( '(' ( ( WS )* func_args ( WS )* ')' -> func_args | ( WS )* ')' -> ^( Func_Args ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: '(' ( ( WS )* func_args ( WS )* ')' -> func_args | ( WS )* ')' -> ^( Func_Args ) )
			{
			DebugLocation(285, 4);
			char_literal122=(IToken)Match(input,93,Follow._93_in_class_args1453); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal122);

			DebugLocation(285, 8);
			// SugarCpp.g:285:8: ( ( WS )* func_args ( WS )* ')' -> func_args | ( WS )* ')' -> ^( Func_Args ) )
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			try
			{
				alt81 = dfa81.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:10: ( WS )* func_args ( WS )* ')'
				{
				DebugLocation(285, 10);
				// SugarCpp.g:285:10: ( WS )*
				try { DebugEnterSubRule(78);
				while (true)
				{
					int alt78=2;
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}


					} finally { DebugExitDecision(78); }
					switch ( alt78 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:10: WS
						{
						DebugLocation(285, 10);
						WS123=(IToken)Match(input,WS,Follow._WS_in_class_args1457); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS123);


						}
						break;

					default:
						goto loop78;
					}
				}

				loop78:
					;

				} finally { DebugExitSubRule(78); }

				DebugLocation(285, 14);
				PushFollow(Follow._func_args_in_class_args1460);
				func_args124=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args124.Tree);
				DebugLocation(285, 24);
				// SugarCpp.g:285:24: ( WS )*
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==WS))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch ( alt79 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:24: WS
						{
						DebugLocation(285, 24);
						WS125=(IToken)Match(input,WS,Follow._WS_in_class_args1462); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS125);


						}
						break;

					default:
						goto loop79;
					}
				}

				loop79:
					;

				} finally { DebugExitSubRule(79); }

				DebugLocation(285, 28);
				char_literal126=(IToken)Match(input,94,Follow._94_in_class_args1465); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal126);



				{
				// AST REWRITE
				// elements: func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:32: -> func_args
				{
					DebugLocation(285, 35);
					adaptor.AddChild(root_0, stream_func_args.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:7: ( WS )* ')'
				{
				DebugLocation(286, 7);
				// SugarCpp.g:286:7: ( WS )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==WS))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:286:7: WS
						{
						DebugLocation(286, 7);
						WS127=(IToken)Match(input,WS,Follow._WS_in_class_args1477); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS127);


						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }

				DebugLocation(286, 11);
				char_literal128=(IToken)Match(input,94,Follow._94_in_class_args1480); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal128);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:15: -> ^( Func_Args )
				{
					DebugLocation(286, 18);
					// SugarCpp.g:286:18: ^( Func_Args )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 20);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_args", 14);
			LeaveRule("class_args", 14);
			LeaveRule_class_args();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "class_args"); }
		return retval;

	}
	// $ANTLR end "class_args"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:290:1: class_def : ( attribute )? ( 'public' ( WS )* )? ( 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' ( WS )* 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* class_args )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 15);
		TraceIn("class_def", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal130 = default(IToken);
		IToken WS131 = default(IToken);
		IToken string_literal132 = default(IToken);
		IToken WS133 = default(IToken);
		IToken WS136 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken WS138 = default(IToken);
		IToken WS140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken WS142 = default(IToken);
		IToken WS144 = default(IToken);
		IToken NEWLINE145 = default(IToken);
		IToken INDENT146 = default(IToken);
		IToken NEWLINE147 = default(IToken);
		IToken DEDENT149 = default(IToken);
		IToken string_literal150 = default(IToken);
		IToken WS151 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken WS153 = default(IToken);
		IToken WS156 = default(IToken);
		IToken WS158 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken WS160 = default(IToken);
		IToken WS162 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken WS164 = default(IToken);
		IToken WS166 = default(IToken);
		IToken NEWLINE167 = default(IToken);
		IToken INDENT168 = default(IToken);
		IToken NEWLINE169 = default(IToken);
		IToken DEDENT171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_args157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal130_tree = default(CommonTree);
		CommonTree WS131_tree = default(CommonTree);
		CommonTree string_literal132_tree = default(CommonTree);
		CommonTree WS133_tree = default(CommonTree);
		CommonTree WS136_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree WS138_tree = default(CommonTree);
		CommonTree WS140_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree WS142_tree = default(CommonTree);
		CommonTree WS144_tree = default(CommonTree);
		CommonTree NEWLINE145_tree = default(CommonTree);
		CommonTree INDENT146_tree = default(CommonTree);
		CommonTree NEWLINE147_tree = default(CommonTree);
		CommonTree DEDENT149_tree = default(CommonTree);
		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree WS151_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree WS153_tree = default(CommonTree);
		CommonTree WS156_tree = default(CommonTree);
		CommonTree WS158_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree WS160_tree = default(CommonTree);
		CommonTree WS162_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree WS164_tree = default(CommonTree);
		CommonTree WS166_tree = default(CommonTree);
		CommonTree NEWLINE167_tree = default(CommonTree);
		CommonTree INDENT168_tree = default(CommonTree);
		CommonTree NEWLINE169_tree = default(CommonTree);
		CommonTree DEDENT171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_class_args=new RewriteRuleSubtreeStream(adaptor,"rule class_args");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( ( attribute )? ( 'public' ( WS )* )? ( 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' ( WS )* 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* class_args )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:5: ( attribute )? ( 'public' ( WS )* )? ( 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' ( WS )* 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* class_args )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(291, 5);
			// SugarCpp.g:291:5: ( attribute )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==132))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:291:5: attribute
				{
				DebugLocation(291, 5);
				PushFollow(Follow._attribute_in_class_def1504);
				attribute129=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute129.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(291, 16);
			// SugarCpp.g:291:16: ( 'public' ( WS )* )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==163))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:291:17: 'public' ( WS )*
				{
				DebugLocation(291, 17);
				string_literal130=(IToken)Match(input,163,Follow._163_in_class_def1508); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal130);

				DebugLocation(291, 26);
				// SugarCpp.g:291:26: ( WS )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if ((LA83_0==WS))
					{
						alt83 = 1;
					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:291:26: WS
						{
						DebugLocation(291, 26);
						WS131=(IToken)Match(input,WS,Follow._WS_in_class_def1510); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS131);


						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(291, 32);
			// SugarCpp.g:291:32: ( 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' ( WS )* 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* class_args )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_0 = input.LA(1);

			if ((LA112_0==141))
			{
				alt112 = 1;
			}
			else if ((LA112_0==139))
			{
				alt112 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:291:34: 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(291, 34);
				string_literal132=(IToken)Match(input,141,Follow._141_in_class_def1517); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal132);

				DebugLocation(291, 42);
				// SugarCpp.g:291:42: ( WS )*
				try { DebugEnterSubRule(85);
				while (true)
				{
					int alt85=2;
					try { DebugEnterDecision(85, false);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}


					} finally { DebugExitDecision(85); }
					switch ( alt85 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:291:42: WS
						{
						DebugLocation(291, 42);
						WS133=(IToken)Match(input,WS,Follow._WS_in_class_def1519); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS133);


						}
						break;

					default:
						goto loop85;
					}
				}

				loop85:
					;

				} finally { DebugExitSubRule(85); }

				DebugLocation(291, 46);
				PushFollow(Follow._ident_in_class_def1522);
				ident134=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident134.Tree);
				DebugLocation(291, 52);
				// SugarCpp.g:291:52: ( generic_parameter )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==115))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:53: generic_parameter
					{
					DebugLocation(291, 53);
					PushFollow(Follow._generic_parameter_in_class_def1525);
					generic_parameter135=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter135.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(291, 73);
				// SugarCpp.g:291:73: ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				try
				{
					alt92 = dfa92.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:74: ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )*
					{
					DebugLocation(291, 74);
					// SugarCpp.g:291:74: ( WS )*
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, false);
						int LA87_0 = input.LA(1);

						if ((LA87_0==WS))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch ( alt87 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:74: WS
							{
							DebugLocation(291, 74);
							WS136=(IToken)Match(input,WS,Follow._WS_in_class_def1530); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS136);


							}
							break;

						default:
							goto loop87;
						}
					}

					loop87:
						;

					} finally { DebugExitSubRule(87); }

					DebugLocation(291, 78);
					char_literal137=(IToken)Match(input,111,Follow._111_in_class_def1533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal137);

					DebugLocation(291, 82);
					// SugarCpp.g:291:82: ( WS )*
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==WS))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch ( alt88 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:82: WS
							{
							DebugLocation(291, 82);
							WS138=(IToken)Match(input,WS,Follow._WS_in_class_def1535); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS138);


							}
							break;

						default:
							goto loop88;
						}
					}

					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(291, 86);
					PushFollow(Follow._ident_in_class_def1538);
					ident139=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident139.Tree);
					DebugLocation(291, 92);
					// SugarCpp.g:291:92: ( ( WS )* ',' ( WS )* ident )*
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						try
						{
							alt91 = dfa91.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(91); }
						switch ( alt91 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:93: ( WS )* ',' ( WS )* ident
							{
							DebugLocation(291, 93);
							// SugarCpp.g:291:93: ( WS )*
							try { DebugEnterSubRule(89);
							while (true)
							{
								int alt89=2;
								try { DebugEnterDecision(89, false);
								int LA89_0 = input.LA(1);

								if ((LA89_0==WS))
								{
									alt89 = 1;
								}


								} finally { DebugExitDecision(89); }
								switch ( alt89 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:291:93: WS
									{
									DebugLocation(291, 93);
									WS140=(IToken)Match(input,WS,Follow._WS_in_class_def1541); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS140);


									}
									break;

								default:
									goto loop89;
								}
							}

							loop89:
								;

							} finally { DebugExitSubRule(89); }

							DebugLocation(291, 97);
							char_literal141=(IToken)Match(input,100,Follow._100_in_class_def1544); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal141);

							DebugLocation(291, 101);
							// SugarCpp.g:291:101: ( WS )*
							try { DebugEnterSubRule(90);
							while (true)
							{
								int alt90=2;
								try { DebugEnterDecision(90, false);
								int LA90_0 = input.LA(1);

								if ((LA90_0==WS))
								{
									alt90 = 1;
								}


								} finally { DebugExitDecision(90); }
								switch ( alt90 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:291:101: WS
									{
									DebugLocation(291, 101);
									WS142=(IToken)Match(input,WS,Follow._WS_in_class_def1546); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS142);


									}
									break;

								default:
									goto loop90;
								}
							}

							loop90:
								;

							} finally { DebugExitSubRule(90); }

							DebugLocation(291, 105);
							PushFollow(Follow._ident_in_class_def1549);
							ident143=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident143.Tree);

							}
							break;

						default:
							goto loop91;
						}
					}

					loop91:
						;

					} finally { DebugExitSubRule(91); }


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(291, 115);
				// SugarCpp.g:291:115: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				try
				{
					alt96 = dfa96.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:116: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(291, 116);
					// SugarCpp.g:291:116: ( WS )*
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==WS))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch ( alt93 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:116: WS
							{
							DebugLocation(291, 116);
							WS144=(IToken)Match(input,WS,Follow._WS_in_class_def1556); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS144);


							}
							break;

						default:
							goto loop93;
						}
					}

					loop93:
						;

					} finally { DebugExitSubRule(93); }

					DebugLocation(291, 120);
					// SugarCpp.g:291:120: ( NEWLINE )+
					int cnt94=0;
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==NEWLINE))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch (alt94)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:120: NEWLINE
							{
							DebugLocation(291, 120);
							NEWLINE145=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1559); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE145);


							}
							break;

						default:
							if (cnt94 >= 1)
								goto loop94;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee94 = new EarlyExitException( 94, input );
							DebugRecognitionException(eee94);
							throw eee94;
						}
						cnt94++;
					}
					loop94:
						;

					} finally { DebugExitSubRule(94); }

					DebugLocation(291, 129);
					INDENT146=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1562); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT146);

					DebugLocation(291, 136);
					// SugarCpp.g:291:136: ( NEWLINE )*
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==NEWLINE))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch ( alt95 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:136: NEWLINE
							{
							DebugLocation(291, 136);
							NEWLINE147=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1564); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE147);


							}
							break;

						default:
							goto loop95;
						}
					}

					loop95:
						;

					} finally { DebugExitSubRule(95); }

					DebugLocation(291, 145);
					PushFollow(Follow._global_block_in_class_def1567);
					global_block148=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block148.Tree);
					DebugLocation(291, 158);
					DEDENT149=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1569); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT149);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }



				{
				// AST REWRITE
				// elements: class_args, generic_parameter, ident, 163, attribute, global_block, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:167: -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(291, 170);
					// SugarCpp.g:291:170: ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 172);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(291, 178);
					// SugarCpp.g:291:178: ( 'public' )?
					if (stream_163.HasNext)
					{
						DebugLocation(291, 178);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(291, 188);
					// SugarCpp.g:291:188: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(291, 188);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(291, 199);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(291, 205);
					// SugarCpp.g:291:205: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(291, 205);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(291, 224);
					// SugarCpp.g:291:224: ( class_args )?
					if (stream_class_args.HasNext)
					{
						DebugLocation(291, 224);
						adaptor.AddChild(root_1, stream_class_args.NextTree());

					}
					stream_class_args.Reset();
					DebugLocation(291, 236);
					// SugarCpp.g:291:236: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(291, 237);
						// SugarCpp.g:291:237: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 239);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(291, 250);
						// SugarCpp.g:291:250: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(291, 250);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(291, 260);
					// SugarCpp.g:291:260: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(291, 260);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:292:13: 'case' ( WS )* 'class' ( WS )* ident ( generic_parameter )? ( ( WS )* class_args )? ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )? ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(292, 13);
				string_literal150=(IToken)Match(input,139,Follow._139_in_class_def1618); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal150);

				DebugLocation(292, 20);
				// SugarCpp.g:292:20: ( WS )*
				try { DebugEnterSubRule(97);
				while (true)
				{
					int alt97=2;
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==WS))
					{
						alt97 = 1;
					}


					} finally { DebugExitDecision(97); }
					switch ( alt97 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:292:20: WS
						{
						DebugLocation(292, 20);
						WS151=(IToken)Match(input,WS,Follow._WS_in_class_def1620); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS151);


						}
						break;

					default:
						goto loop97;
					}
				}

				loop97:
					;

				} finally { DebugExitSubRule(97); }

				DebugLocation(292, 24);
				string_literal152=(IToken)Match(input,141,Follow._141_in_class_def1623); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal152);

				DebugLocation(292, 32);
				// SugarCpp.g:292:32: ( WS )*
				try { DebugEnterSubRule(98);
				while (true)
				{
					int alt98=2;
					try { DebugEnterDecision(98, false);
					int LA98_0 = input.LA(1);

					if ((LA98_0==WS))
					{
						alt98 = 1;
					}


					} finally { DebugExitDecision(98); }
					switch ( alt98 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:292:32: WS
						{
						DebugLocation(292, 32);
						WS153=(IToken)Match(input,WS,Follow._WS_in_class_def1625); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS153);


						}
						break;

					default:
						goto loop98;
					}
				}

				loop98:
					;

				} finally { DebugExitSubRule(98); }

				DebugLocation(292, 36);
				PushFollow(Follow._ident_in_class_def1628);
				ident154=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident154.Tree);
				DebugLocation(292, 42);
				// SugarCpp.g:292:42: ( generic_parameter )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==115))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:43: generic_parameter
					{
					DebugLocation(292, 43);
					PushFollow(Follow._generic_parameter_in_class_def1631);
					generic_parameter155=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter155.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(292, 63);
				// SugarCpp.g:292:63: ( ( WS )* class_args )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				try
				{
					alt101 = dfa101.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:64: ( WS )* class_args
					{
					DebugLocation(292, 64);
					// SugarCpp.g:292:64: ( WS )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==WS))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:64: WS
							{
							DebugLocation(292, 64);
							WS156=(IToken)Match(input,WS,Follow._WS_in_class_def1636); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS156);


							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }

					DebugLocation(292, 68);
					PushFollow(Follow._class_args_in_class_def1639);
					class_args157=class_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_class_args.Add(class_args157.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(292, 81);
				// SugarCpp.g:292:81: ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				try
				{
					alt107 = dfa107.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:82: ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )*
					{
					DebugLocation(292, 82);
					// SugarCpp.g:292:82: ( WS )*
					try { DebugEnterSubRule(102);
					while (true)
					{
						int alt102=2;
						try { DebugEnterDecision(102, false);
						int LA102_0 = input.LA(1);

						if ((LA102_0==WS))
						{
							alt102 = 1;
						}


						} finally { DebugExitDecision(102); }
						switch ( alt102 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:82: WS
							{
							DebugLocation(292, 82);
							WS158=(IToken)Match(input,WS,Follow._WS_in_class_def1644); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS158);


							}
							break;

						default:
							goto loop102;
						}
					}

					loop102:
						;

					} finally { DebugExitSubRule(102); }

					DebugLocation(292, 86);
					char_literal159=(IToken)Match(input,111,Follow._111_in_class_def1647); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal159);

					DebugLocation(292, 90);
					// SugarCpp.g:292:90: ( WS )*
					try { DebugEnterSubRule(103);
					while (true)
					{
						int alt103=2;
						try { DebugEnterDecision(103, false);
						int LA103_0 = input.LA(1);

						if ((LA103_0==WS))
						{
							alt103 = 1;
						}


						} finally { DebugExitDecision(103); }
						switch ( alt103 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:90: WS
							{
							DebugLocation(292, 90);
							WS160=(IToken)Match(input,WS,Follow._WS_in_class_def1649); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS160);


							}
							break;

						default:
							goto loop103;
						}
					}

					loop103:
						;

					} finally { DebugExitSubRule(103); }

					DebugLocation(292, 94);
					PushFollow(Follow._ident_in_class_def1652);
					ident161=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident161.Tree);
					DebugLocation(292, 100);
					// SugarCpp.g:292:100: ( ( WS )* ',' ( WS )* ident )*
					try { DebugEnterSubRule(106);
					while (true)
					{
						int alt106=2;
						try { DebugEnterDecision(106, false);
						try
						{
							alt106 = dfa106.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(106); }
						switch ( alt106 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:101: ( WS )* ',' ( WS )* ident
							{
							DebugLocation(292, 101);
							// SugarCpp.g:292:101: ( WS )*
							try { DebugEnterSubRule(104);
							while (true)
							{
								int alt104=2;
								try { DebugEnterDecision(104, false);
								int LA104_0 = input.LA(1);

								if ((LA104_0==WS))
								{
									alt104 = 1;
								}


								} finally { DebugExitDecision(104); }
								switch ( alt104 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:292:101: WS
									{
									DebugLocation(292, 101);
									WS162=(IToken)Match(input,WS,Follow._WS_in_class_def1655); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS162);


									}
									break;

								default:
									goto loop104;
								}
							}

							loop104:
								;

							} finally { DebugExitSubRule(104); }

							DebugLocation(292, 105);
							char_literal163=(IToken)Match(input,100,Follow._100_in_class_def1658); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal163);

							DebugLocation(292, 109);
							// SugarCpp.g:292:109: ( WS )*
							try { DebugEnterSubRule(105);
							while (true)
							{
								int alt105=2;
								try { DebugEnterDecision(105, false);
								int LA105_0 = input.LA(1);

								if ((LA105_0==WS))
								{
									alt105 = 1;
								}


								} finally { DebugExitDecision(105); }
								switch ( alt105 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:292:109: WS
									{
									DebugLocation(292, 109);
									WS164=(IToken)Match(input,WS,Follow._WS_in_class_def1660); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS164);


									}
									break;

								default:
									goto loop105;
								}
							}

							loop105:
								;

							} finally { DebugExitSubRule(105); }

							DebugLocation(292, 113);
							PushFollow(Follow._ident_in_class_def1663);
							ident165=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident165.Tree);

							}
							break;

						default:
							goto loop106;
						}
					}

					loop106:
						;

					} finally { DebugExitSubRule(106); }


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(292, 123);
				// SugarCpp.g:292:123: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				try
				{
					alt111 = dfa111.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:124: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(292, 124);
					// SugarCpp.g:292:124: ( WS )*
					try { DebugEnterSubRule(108);
					while (true)
					{
						int alt108=2;
						try { DebugEnterDecision(108, false);
						int LA108_0 = input.LA(1);

						if ((LA108_0==WS))
						{
							alt108 = 1;
						}


						} finally { DebugExitDecision(108); }
						switch ( alt108 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:124: WS
							{
							DebugLocation(292, 124);
							WS166=(IToken)Match(input,WS,Follow._WS_in_class_def1670); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS166);


							}
							break;

						default:
							goto loop108;
						}
					}

					loop108:
						;

					} finally { DebugExitSubRule(108); }

					DebugLocation(292, 128);
					// SugarCpp.g:292:128: ( NEWLINE )+
					int cnt109=0;
					try { DebugEnterSubRule(109);
					while (true)
					{
						int alt109=2;
						try { DebugEnterDecision(109, false);
						int LA109_0 = input.LA(1);

						if ((LA109_0==NEWLINE))
						{
							alt109 = 1;
						}


						} finally { DebugExitDecision(109); }
						switch (alt109)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:128: NEWLINE
							{
							DebugLocation(292, 128);
							NEWLINE167=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1673); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE167);


							}
							break;

						default:
							if (cnt109 >= 1)
								goto loop109;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee109 = new EarlyExitException( 109, input );
							DebugRecognitionException(eee109);
							throw eee109;
						}
						cnt109++;
					}
					loop109:
						;

					} finally { DebugExitSubRule(109); }

					DebugLocation(292, 137);
					INDENT168=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1676); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT168);

					DebugLocation(292, 144);
					// SugarCpp.g:292:144: ( NEWLINE )*
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==NEWLINE))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch ( alt110 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:144: NEWLINE
							{
							DebugLocation(292, 144);
							NEWLINE169=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1678); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE169);


							}
							break;

						default:
							goto loop110;
						}
					}

					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(292, 153);
					PushFollow(Follow._global_block_in_class_def1681);
					global_block170=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block170.Tree);
					DebugLocation(292, 166);
					DEDENT171=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1683); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT171);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }



				{
				// AST REWRITE
				// elements: ident, attribute, generic_parameter, 163, global_block, 139, class_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:175: -> ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(292, 178);
					// SugarCpp.g:292:178: ^( Class 'case' ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 180);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(292, 186);
					adaptor.AddChild(root_1, stream_139.NextNode());
					DebugLocation(292, 193);
					// SugarCpp.g:292:193: ( 'public' )?
					if (stream_163.HasNext)
					{
						DebugLocation(292, 193);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(292, 203);
					// SugarCpp.g:292:203: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(292, 203);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(292, 214);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(292, 220);
					// SugarCpp.g:292:220: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(292, 220);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(292, 239);
					// SugarCpp.g:292:239: ( class_args )?
					if (stream_class_args.HasNext)
					{
						DebugLocation(292, 239);
						adaptor.AddChild(root_1, stream_class_args.NextTree());

					}
					stream_class_args.Reset();
					DebugLocation(292, 251);
					// SugarCpp.g:292:251: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(292, 252);
						// SugarCpp.g:292:252: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 254);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(292, 265);
						// SugarCpp.g:292:265: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(292, 265);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(292, 275);
					// SugarCpp.g:292:275: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(292, 275);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 15);
			LeaveRule("class_def", 15);
			LeaveRule_class_def();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:296:1: type_list : type_name ( ( WS )* ',' ( WS )* type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 16);
		TraceIn("type_list", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS173 = default(IToken);
		IToken char_literal174 = default(IToken);
		IToken WS175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS173_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		CommonTree WS175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( type_name ( ( WS )* ',' ( WS )* type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:297:4: type_name ( ( WS )* ',' ( WS )* type_name )*
			{
			DebugLocation(297, 4);
			PushFollow(Follow._type_name_in_type_list1743);
			type_name172=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name172.Tree);
			DebugLocation(297, 14);
			// SugarCpp.g:297:14: ( ( WS )* ',' ( WS )* type_name )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				try
				{
					alt115 = dfa115.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:297:15: ( WS )* ',' ( WS )* type_name
					{
					DebugLocation(297, 15);
					// SugarCpp.g:297:15: ( WS )*
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==WS))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch ( alt113 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:297:15: WS
							{
							DebugLocation(297, 15);
							WS173=(IToken)Match(input,WS,Follow._WS_in_type_list1746); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS173);


							}
							break;

						default:
							goto loop113;
						}
					}

					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(297, 19);
					char_literal174=(IToken)Match(input,100,Follow._100_in_type_list1749); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal174);

					DebugLocation(297, 24);
					// SugarCpp.g:297:24: ( WS )*
					try { DebugEnterSubRule(114);
					while (true)
					{
						int alt114=2;
						try { DebugEnterDecision(114, false);
						int LA114_0 = input.LA(1);

						if ((LA114_0==WS))
						{
							alt114 = 1;
						}


						} finally { DebugExitDecision(114); }
						switch ( alt114 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:297:24: WS
							{
							DebugLocation(297, 24);
							WS175=(IToken)Match(input,WS,Follow._WS_in_type_list1752); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS175);


							}
							break;

						default:
							goto loop114;
						}
					}

					loop114:
						;

					} finally { DebugExitSubRule(114); }

					DebugLocation(297, 28);
					PushFollow(Follow._type_name_in_type_list1755);
					type_name176=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name176.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:40: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(297, 43);
				// SugarCpp.g:297:43: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(297, 55);
				// SugarCpp.g:297:55: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(297, 55);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 16);
			LeaveRule("type_list", 16);
			LeaveRule_type_list();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:300:1: type_name : ( type_single ( ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( ( WS )* type_list )? ( WS )* ')' ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 17);
		TraceIn("type_name", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS178 = default(IToken);
		IToken string_literal179 = default(IToken);
		IToken WS180 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken WS183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken WS186 = default(IToken);
		IToken WS188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken WS190 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken WS192 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken WS195 = default(IToken);
		IToken char_literal196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS178_tree = default(CommonTree);
		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree WS180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree WS183_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree WS186_tree = default(CommonTree);
		CommonTree WS188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree WS190_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		CommonTree WS192_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree WS195_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(300, 1);
		try
		{
			// SugarCpp.g:301:2: ( type_single ( ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( ( WS )* type_list )? ( WS )* ')' ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt128=2;
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==IDENT||LA128_0==142||LA128_0==156||(LA128_0>=166 && LA128_0<=167)||LA128_0==170))
			{
				alt128 = 1;
			}
			else if ((LA128_0==93))
			{
				alt128 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:301:4: type_single ( ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(301, 4);
				PushFollow(Follow._type_single_in_type_name1777);
				type_single177=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single177.Tree);
				DebugLocation(301, 16);
				// SugarCpp.g:301:16: ( ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				try
				{
					alt120 = dfa120.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:301:18: ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' )
					{
					DebugLocation(301, 18);
					// SugarCpp.g:301:18: ( WS )*
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==WS))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch ( alt116 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:301:18: WS
							{
							DebugLocation(301, 18);
							WS178=(IToken)Match(input,WS,Follow._WS_in_type_name1781); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS178);


							}
							break;

						default:
							goto loop116;
						}
					}

					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(301, 22);
					string_literal179=(IToken)Match(input,105,Follow._105_in_type_name1784); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal179);

					DebugLocation(301, 27);
					// SugarCpp.g:301:27: ( WS )*
					try { DebugEnterSubRule(117);
					while (true)
					{
						int alt117=2;
						try { DebugEnterDecision(117, false);
						int LA117_0 = input.LA(1);

						if ((LA117_0==WS))
						{
							alt117 = 1;
						}


						} finally { DebugExitDecision(117); }
						switch ( alt117 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:301:27: WS
							{
							DebugLocation(301, 27);
							WS180=(IToken)Match(input,WS,Follow._WS_in_type_name1786); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS180);


							}
							break;

						default:
							goto loop117;
						}
					}

					loop117:
						;

					} finally { DebugExitSubRule(117); }

					DebugLocation(301, 31);
					// SugarCpp.g:301:31: ( type_name | '(' ( WS )* ')' )
					int alt119=2;
					try { DebugEnterSubRule(119);
					try { DebugEnterDecision(119, false);
					try
					{
						alt119 = dfa119.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:301:32: type_name
						{
						DebugLocation(301, 32);
						PushFollow(Follow._type_name_in_type_name1790);
						type_name181=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name181.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:301:44: '(' ( WS )* ')'
						{
						DebugLocation(301, 44);
						char_literal182=(IToken)Match(input,93,Follow._93_in_type_name1794); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal182);

						DebugLocation(301, 48);
						// SugarCpp.g:301:48: ( WS )*
						try { DebugEnterSubRule(118);
						while (true)
						{
							int alt118=2;
							try { DebugEnterDecision(118, false);
							int LA118_0 = input.LA(1);

							if ((LA118_0==WS))
							{
								alt118 = 1;
							}


							} finally { DebugExitDecision(118); }
							switch ( alt118 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:301:48: WS
								{
								DebugLocation(301, 48);
								WS183=(IToken)Match(input,WS,Follow._WS_in_type_name1796); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS183);


								}
								break;

							default:
								goto loop118;
							}
						}

						loop118:
							;

						} finally { DebugExitSubRule(118); }

						DebugLocation(301, 52);
						char_literal184=(IToken)Match(input,94,Follow._94_in_type_name1799); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal184);


						}
						break;

					}
					} finally { DebugExitSubRule(119); }



					{
					// AST REWRITE
					// elements: type_name, type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 301:57: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(301, 60);
						// SugarCpp.g:301:60: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(301, 72);
						// SugarCpp.g:301:72: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 74);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(301, 84);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(301, 97);
						// SugarCpp.g:301:97: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(301, 97);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:302:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 302:9: -> type_single
					{
						DebugLocation(302, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:304:4: '(' ( ( WS )* type_list )? ( WS )* ')' ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' )
				{
				DebugLocation(304, 4);
				char_literal185=(IToken)Match(input,93,Follow._93_in_type_name1840); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal185);

				DebugLocation(304, 8);
				// SugarCpp.g:304:8: ( ( WS )* type_list )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				try
				{
					alt122 = dfa122.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:304:9: ( WS )* type_list
					{
					DebugLocation(304, 9);
					// SugarCpp.g:304:9: ( WS )*
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						int LA121_0 = input.LA(1);

						if ((LA121_0==WS))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch ( alt121 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:9: WS
							{
							DebugLocation(304, 9);
							WS186=(IToken)Match(input,WS,Follow._WS_in_type_name1843); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS186);


							}
							break;

						default:
							goto loop121;
						}
					}

					loop121:
						;

					} finally { DebugExitSubRule(121); }

					DebugLocation(304, 13);
					PushFollow(Follow._type_list_in_type_name1846);
					type_list187=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list187.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(304, 25);
				// SugarCpp.g:304:25: ( WS )*
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=2;
					try { DebugEnterDecision(123, false);
					int LA123_0 = input.LA(1);

					if ((LA123_0==WS))
					{
						alt123 = 1;
					}


					} finally { DebugExitDecision(123); }
					switch ( alt123 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:25: WS
						{
						DebugLocation(304, 25);
						WS188=(IToken)Match(input,WS,Follow._WS_in_type_name1850); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS188);


						}
						break;

					default:
						goto loop123;
					}
				}

				loop123:
					;

				} finally { DebugExitSubRule(123); }

				DebugLocation(304, 29);
				char_literal189=(IToken)Match(input,94,Follow._94_in_type_name1853); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal189);

				DebugLocation(304, 33);
				// SugarCpp.g:304:33: ( WS )*
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==WS))
					{
						alt124 = 1;
					}


					} finally { DebugExitDecision(124); }
					switch ( alt124 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:33: WS
						{
						DebugLocation(304, 33);
						WS190=(IToken)Match(input,WS,Follow._WS_in_type_name1855); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS190);


						}
						break;

					default:
						goto loop124;
					}
				}

				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(304, 37);
				string_literal191=(IToken)Match(input,105,Follow._105_in_type_name1858); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal191);

				DebugLocation(304, 42);
				// SugarCpp.g:304:42: ( WS )*
				try { DebugEnterSubRule(125);
				while (true)
				{
					int alt125=2;
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==WS))
					{
						alt125 = 1;
					}


					} finally { DebugExitDecision(125); }
					switch ( alt125 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:42: WS
						{
						DebugLocation(304, 42);
						WS192=(IToken)Match(input,WS,Follow._WS_in_type_name1860); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS192);


						}
						break;

					default:
						goto loop125;
					}
				}

				loop125:
					;

				} finally { DebugExitSubRule(125); }

				DebugLocation(304, 46);
				// SugarCpp.g:304:46: ( type_name | '(' ( WS )* ')' )
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				try
				{
					alt127 = dfa127.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:304:47: type_name
					{
					DebugLocation(304, 47);
					PushFollow(Follow._type_name_in_type_name1864);
					type_name193=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name193.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:59: '(' ( WS )* ')'
					{
					DebugLocation(304, 59);
					char_literal194=(IToken)Match(input,93,Follow._93_in_type_name1868); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal194);

					DebugLocation(304, 63);
					// SugarCpp.g:304:63: ( WS )*
					try { DebugEnterSubRule(126);
					while (true)
					{
						int alt126=2;
						try { DebugEnterDecision(126, false);
						int LA126_0 = input.LA(1);

						if ((LA126_0==WS))
						{
							alt126 = 1;
						}


						} finally { DebugExitDecision(126); }
						switch ( alt126 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:63: WS
							{
							DebugLocation(304, 63);
							WS195=(IToken)Match(input,WS,Follow._WS_in_type_name1870); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS195);


							}
							break;

						default:
							goto loop126;
						}
					}

					loop126:
						;

					} finally { DebugExitSubRule(126); }

					DebugLocation(304, 67);
					char_literal196=(IToken)Match(input,94,Follow._94_in_type_name1873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal196);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:72: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(304, 75);
					// SugarCpp.g:304:75: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(304, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(304, 87);
					// SugarCpp.g:304:87: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(304, 87);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(304, 98);
					// SugarCpp.g:304:98: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(304, 98);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 17);
			LeaveRule("type_name", 17);
			LeaveRule_type_name();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:307:1: type_single : type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 18);
		TraceIn("type_single", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS198 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken WS200 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken WS202 = default(IToken);
		IToken WS204 = default(IToken);
		IToken char_literal205 = default(IToken);
		IToken WS206 = default(IToken);
		IToken WS208 = default(IToken);
		IToken char_literal209 = default(IToken);
		IToken WS210 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken WS212 = default(IToken);
		IToken char_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS198_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		CommonTree WS200_tree = default(CommonTree);
		CommonTree char_literal201_tree = default(CommonTree);
		CommonTree WS202_tree = default(CommonTree);
		CommonTree WS204_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		CommonTree WS206_tree = default(CommonTree);
		CommonTree WS208_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree WS210_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree WS212_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(308, 4);
			PushFollow(Follow._type_star_in_type_single1897);
			type_star197=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star197.Tree);
			DebugLocation(308, 14);
			// SugarCpp.g:308:14: ( ( WS )* '&' -> ^( Type_Ref type_star ) | ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt140=3;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			try
			{
				alt140 = dfa140.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:16: ( WS )* '&'
				{
				DebugLocation(308, 16);
				// SugarCpp.g:308:16: ( WS )*
				try { DebugEnterSubRule(129);
				while (true)
				{
					int alt129=2;
					try { DebugEnterDecision(129, false);
					int LA129_0 = input.LA(1);

					if ((LA129_0==WS))
					{
						alt129 = 1;
					}


					} finally { DebugExitDecision(129); }
					switch ( alt129 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:308:16: WS
						{
						DebugLocation(308, 16);
						WS198=(IToken)Match(input,WS,Follow._WS_in_type_single1901); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS198);


						}
						break;

					default:
						goto loop129;
					}
				}

				loop129:
					;

				} finally { DebugExitSubRule(129); }

				DebugLocation(308, 20);
				char_literal199=(IToken)Match(input,91,Follow._91_in_type_single1904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal199);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:24: -> ^( Type_Ref type_star )
				{
					DebugLocation(308, 27);
					// SugarCpp.g:308:27: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(308, 38);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:7: ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(309, 7);
				// SugarCpp.g:309:7: ( WS )*
				try { DebugEnterSubRule(130);
				while (true)
				{
					int alt130=2;
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==WS))
					{
						alt130 = 1;
					}


					} finally { DebugExitDecision(130); }
					switch ( alt130 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:309:7: WS
						{
						DebugLocation(309, 7);
						WS200=(IToken)Match(input,WS,Follow._WS_in_type_single1920); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS200);


						}
						break;

					default:
						goto loop130;
					}
				}

				loop130:
					;

				} finally { DebugExitSubRule(130); }

				DebugLocation(309, 11);
				char_literal201=(IToken)Match(input,132,Follow._132_in_type_single1923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal201);

				DebugLocation(309, 15);
				// SugarCpp.g:309:15: ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				try
				{
					alt139 = dfa139.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:309:17: ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']'
					{
					DebugLocation(309, 17);
					// SugarCpp.g:309:17: ( WS )*
					try { DebugEnterSubRule(131);
					while (true)
					{
						int alt131=2;
						try { DebugEnterDecision(131, false);
						int LA131_0 = input.LA(1);

						if ((LA131_0==WS))
						{
							alt131 = 1;
						}


						} finally { DebugExitDecision(131); }
						switch ( alt131 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:309:17: WS
							{
							DebugLocation(309, 17);
							WS202=(IToken)Match(input,WS,Follow._WS_in_type_single1927); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS202);


							}
							break;

						default:
							goto loop131;
						}
					}

					loop131:
						;

					} finally { DebugExitSubRule(131); }

					DebugLocation(309, 21);
					PushFollow(Follow._expr_in_type_single1930);
					expr203=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr203.Tree);
					DebugLocation(309, 26);
					// SugarCpp.g:309:26: ( ( WS )* ',' ( WS )* expr )*
					try { DebugEnterSubRule(134);
					while (true)
					{
						int alt134=2;
						try { DebugEnterDecision(134, false);
						try
						{
							alt134 = dfa134.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(134); }
						switch ( alt134 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:309:27: ( WS )* ',' ( WS )* expr
							{
							DebugLocation(309, 27);
							// SugarCpp.g:309:27: ( WS )*
							try { DebugEnterSubRule(132);
							while (true)
							{
								int alt132=2;
								try { DebugEnterDecision(132, false);
								int LA132_0 = input.LA(1);

								if ((LA132_0==WS))
								{
									alt132 = 1;
								}


								} finally { DebugExitDecision(132); }
								switch ( alt132 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:309:27: WS
									{
									DebugLocation(309, 27);
									WS204=(IToken)Match(input,WS,Follow._WS_in_type_single1933); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS204);


									}
									break;

								default:
									goto loop132;
								}
							}

							loop132:
								;

							} finally { DebugExitSubRule(132); }

							DebugLocation(309, 31);
							char_literal205=(IToken)Match(input,100,Follow._100_in_type_single1936); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal205);

							DebugLocation(309, 35);
							// SugarCpp.g:309:35: ( WS )*
							try { DebugEnterSubRule(133);
							while (true)
							{
								int alt133=2;
								try { DebugEnterDecision(133, false);
								int LA133_0 = input.LA(1);

								if ((LA133_0==WS))
								{
									alt133 = 1;
								}


								} finally { DebugExitDecision(133); }
								switch ( alt133 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:309:35: WS
									{
									DebugLocation(309, 35);
									WS206=(IToken)Match(input,WS,Follow._WS_in_type_single1938); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS206);


									}
									break;

								default:
									goto loop133;
								}
							}

							loop133:
								;

							} finally { DebugExitSubRule(133); }

							DebugLocation(309, 39);
							PushFollow(Follow._expr_in_type_single1941);
							expr207=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr207.Tree);

							}
							break;

						default:
							goto loop134;
						}
					}

					loop134:
						;

					} finally { DebugExitSubRule(134); }

					DebugLocation(309, 46);
					// SugarCpp.g:309:46: ( WS )*
					try { DebugEnterSubRule(135);
					while (true)
					{
						int alt135=2;
						try { DebugEnterDecision(135, false);
						int LA135_0 = input.LA(1);

						if ((LA135_0==WS))
						{
							alt135 = 1;
						}


						} finally { DebugExitDecision(135); }
						switch ( alt135 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:309:46: WS
							{
							DebugLocation(309, 46);
							WS208=(IToken)Match(input,WS,Follow._WS_in_type_single1945); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS208);


							}
							break;

						default:
							goto loop135;
						}
					}

					loop135:
						;

					} finally { DebugExitSubRule(135); }

					DebugLocation(309, 50);
					char_literal209=(IToken)Match(input,133,Follow._133_in_type_single1948); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal209);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 309:54: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(309, 57);
						// SugarCpp.g:309:57: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(309, 70);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(309, 80);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(309, 80);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:310:17: ( ( WS )* ',' )* ( WS )* ']'
					{
					DebugLocation(310, 17);
					// SugarCpp.g:310:17: ( ( WS )* ',' )*
					try { DebugEnterSubRule(137);
					while (true)
					{
						int alt137=2;
						try { DebugEnterDecision(137, false);
						try
						{
							alt137 = dfa137.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(137); }
						switch ( alt137 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:310:18: ( WS )* ','
							{
							DebugLocation(310, 18);
							// SugarCpp.g:310:18: ( WS )*
							try { DebugEnterSubRule(136);
							while (true)
							{
								int alt136=2;
								try { DebugEnterDecision(136, false);
								int LA136_0 = input.LA(1);

								if ((LA136_0==WS))
								{
									alt136 = 1;
								}


								} finally { DebugExitDecision(136); }
								switch ( alt136 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:310:18: WS
									{
									DebugLocation(310, 18);
									WS210=(IToken)Match(input,WS,Follow._WS_in_type_single1978); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS210);


									}
									break;

								default:
									goto loop136;
								}
							}

							loop136:
								;

							} finally { DebugExitSubRule(136); }

							DebugLocation(310, 22);
							char_literal211=(IToken)Match(input,100,Follow._100_in_type_single1981); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal211);


							}
							break;

						default:
							goto loop137;
						}
					}

					loop137:
						;

					} finally { DebugExitSubRule(137); }

					DebugLocation(310, 28);
					// SugarCpp.g:310:28: ( WS )*
					try { DebugEnterSubRule(138);
					while (true)
					{
						int alt138=2;
						try { DebugEnterDecision(138, false);
						int LA138_0 = input.LA(1);

						if ((LA138_0==WS))
						{
							alt138 = 1;
						}


						} finally { DebugExitDecision(138); }
						switch ( alt138 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:310:28: WS
							{
							DebugLocation(310, 28);
							WS212=(IToken)Match(input,WS,Follow._WS_in_type_single1985); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS212);


							}
							break;

						default:
							goto loop138;
						}
					}

					loop138:
						;

					} finally { DebugExitSubRule(138); }

					DebugLocation(310, 32);
					char_literal213=(IToken)Match(input,133,Follow._133_in_type_single1988); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal213);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 310:36: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(310, 39);
						// SugarCpp.g:310:39: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(310, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(310, 52);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(310, 62);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(310, 62);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(139); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:312:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:7: -> type_star
				{
					DebugLocation(312, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 18);
			LeaveRule("type_single", 18);
			LeaveRule_type_single();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:316:1: type_no_array : type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 19);
		TraceIn("type_no_array", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS215 = default(IToken);
		IToken char_literal216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star214 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS215_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: type_star ( ( WS )* '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(317, 4);
			PushFollow(Follow._type_star_in_type_no_array2039);
			type_star214=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star214.Tree);
			DebugLocation(317, 14);
			// SugarCpp.g:317:14: ( ( WS )* '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			try
			{
				alt142 = dfa142.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:16: ( WS )* '&'
				{
				DebugLocation(317, 16);
				// SugarCpp.g:317:16: ( WS )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==WS))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:317:16: WS
						{
						DebugLocation(317, 16);
						WS215=(IToken)Match(input,WS,Follow._WS_in_type_no_array2043); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS215);


						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }

				DebugLocation(317, 20);
				char_literal216=(IToken)Match(input,91,Follow._91_in_type_no_array2046); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal216);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:24: -> ^( Type_Ref type_star )
				{
					DebugLocation(317, 27);
					// SugarCpp.g:317:27: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(317, 38);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:318:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:7: -> type_star
				{
					DebugLocation(318, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 19);
			LeaveRule("type_no_array", 19);
			LeaveRule_type_no_array();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:322:1: type_star : type_template_type ( ( ( WS )* '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 20);
		TraceIn("type_star", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS218 = default(IToken);
		IToken char_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS218_tree = default(CommonTree);
		CommonTree char_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( type_template_type ( ( ( WS )* '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: type_template_type ( ( ( WS )* '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(323, 4);
			PushFollow(Follow._type_template_type_in_type_star2081);
			type_template_type217=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type217.Tree);
			DebugLocation(323, 23);
			// SugarCpp.g:323:23: ( ( ( WS )* '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			try
			{
				alt145 = dfa145.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:25: ( ( WS )* '*' )+
				{
				DebugLocation(323, 25);
				// SugarCpp.g:323:25: ( ( WS )* '*' )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					try
					{
						alt144 = dfa144.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:323:26: ( WS )* '*'
						{
						DebugLocation(323, 26);
						// SugarCpp.g:323:26: ( WS )*
						try { DebugEnterSubRule(143);
						while (true)
						{
							int alt143=2;
							try { DebugEnterDecision(143, false);
							int LA143_0 = input.LA(1);

							if ((LA143_0==WS))
							{
								alt143 = 1;
							}


							} finally { DebugExitDecision(143); }
							switch ( alt143 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:323:26: WS
								{
								DebugLocation(323, 26);
								WS218=(IToken)Match(input,WS,Follow._WS_in_type_star2086); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS218);


								}
								break;

							default:
								goto loop143;
							}
						}

						loop143:
							;

						} finally { DebugExitSubRule(143); }

						DebugLocation(323, 30);
						char_literal219=(IToken)Match(input,95,Follow._95_in_type_star2089); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal219);


						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }



				{
				// AST REWRITE
				// elements: type_template_type, 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:36: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(323, 39);
					// SugarCpp.g:323:39: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(323, 51);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(323, 70);
					if (!(stream_95.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_95.HasNext )
					{
						DebugLocation(323, 70);
						adaptor.AddChild(root_1, stream_95.NextNode());

					}
					stream_95.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:10: -> type_template_type
				{
					DebugLocation(324, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(145); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 20);
			LeaveRule("type_star", 20);
			LeaveRule_type_star();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:328:1: type_template_type : type_ident ( '<' ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )? ( WS )* '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 21);
		TraceIn("type_template_type", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal221 = default(IToken);
		IToken WS222 = default(IToken);
		IToken WS224 = default(IToken);
		IToken char_literal225 = default(IToken);
		IToken WS226 = default(IToken);
		IToken WS228 = default(IToken);
		IToken char_literal229 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal221_tree = default(CommonTree);
		CommonTree WS222_tree = default(CommonTree);
		CommonTree WS224_tree = default(CommonTree);
		CommonTree char_literal225_tree = default(CommonTree);
		CommonTree WS226_tree = default(CommonTree);
		CommonTree WS228_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( type_ident ( '<' ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )? ( WS )* '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: type_ident ( '<' ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )? ( WS )* '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(329, 4);
			PushFollow(Follow._type_ident_in_type_template_type2135);
			type_ident220=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident220.Tree);
			DebugLocation(329, 15);
			// SugarCpp.g:329:15: ( '<' ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )? ( WS )* '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_0 = input.LA(1);

			if ((LA152_0==115))
			{
				alt152 = 1;
			}
			else if ((LA152_0==DEDENT||(LA152_0>=IDENT && LA152_0<=INDENT)||LA152_0==NEWLINE||LA152_0==WS||LA152_0==91||(LA152_0>=93 && LA152_0<=95)||LA152_0==100||LA152_0==105||(LA152_0>=113 && LA152_0<=114)||LA152_0==121||(LA152_0>=124 && LA152_0<=125)||(LA152_0>=132 && LA152_0<=133)||LA152_0==138||LA152_0==144||(LA152_0>=149 && LA152_0<=150)||LA152_0==152||LA152_0==165||LA152_0==169||(LA152_0>=171 && LA152_0<=172)||(LA152_0>=175 && LA152_0<=176)||(LA152_0>=180 && LA152_0<=181)||LA152_0==186))
			{
				alt152 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:17: '<' ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )? ( WS )* '>'
				{
				DebugLocation(329, 17);
				char_literal221=(IToken)Match(input,115,Follow._115_in_type_template_type2139); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal221);

				DebugLocation(329, 21);
				// SugarCpp.g:329:21: ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				try
				{
					alt150 = dfa150.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:22: ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )*
					{
					DebugLocation(329, 22);
					// SugarCpp.g:329:22: ( WS )*
					try { DebugEnterSubRule(146);
					while (true)
					{
						int alt146=2;
						try { DebugEnterDecision(146, false);
						int LA146_0 = input.LA(1);

						if ((LA146_0==WS))
						{
							alt146 = 1;
						}


						} finally { DebugExitDecision(146); }
						switch ( alt146 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:22: WS
							{
							DebugLocation(329, 22);
							WS222=(IToken)Match(input,WS,Follow._WS_in_type_template_type2142); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS222);


							}
							break;

						default:
							goto loop146;
						}
					}

					loop146:
						;

					} finally { DebugExitSubRule(146); }

					DebugLocation(329, 26);
					PushFollow(Follow._type_name_in_type_template_type2145);
					type_name223=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name223.Tree);
					DebugLocation(329, 36);
					// SugarCpp.g:329:36: ( ( WS )* ',' ( WS )* type_name )*
					try { DebugEnterSubRule(149);
					while (true)
					{
						int alt149=2;
						try { DebugEnterDecision(149, false);
						try
						{
							alt149 = dfa149.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(149); }
						switch ( alt149 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:37: ( WS )* ',' ( WS )* type_name
							{
							DebugLocation(329, 37);
							// SugarCpp.g:329:37: ( WS )*
							try { DebugEnterSubRule(147);
							while (true)
							{
								int alt147=2;
								try { DebugEnterDecision(147, false);
								int LA147_0 = input.LA(1);

								if ((LA147_0==WS))
								{
									alt147 = 1;
								}


								} finally { DebugExitDecision(147); }
								switch ( alt147 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:329:37: WS
									{
									DebugLocation(329, 37);
									WS224=(IToken)Match(input,WS,Follow._WS_in_type_template_type2148); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS224);


									}
									break;

								default:
									goto loop147;
								}
							}

							loop147:
								;

							} finally { DebugExitSubRule(147); }

							DebugLocation(329, 41);
							char_literal225=(IToken)Match(input,100,Follow._100_in_type_template_type2151); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal225);

							DebugLocation(329, 45);
							// SugarCpp.g:329:45: ( WS )*
							try { DebugEnterSubRule(148);
							while (true)
							{
								int alt148=2;
								try { DebugEnterDecision(148, false);
								int LA148_0 = input.LA(1);

								if ((LA148_0==WS))
								{
									alt148 = 1;
								}


								} finally { DebugExitDecision(148); }
								switch ( alt148 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:329:45: WS
									{
									DebugLocation(329, 45);
									WS226=(IToken)Match(input,WS,Follow._WS_in_type_template_type2153); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS226);


									}
									break;

								default:
									goto loop148;
								}
							}

							loop148:
								;

							} finally { DebugExitSubRule(148); }

							DebugLocation(329, 49);
							PushFollow(Follow._type_name_in_type_template_type2156);
							type_name227=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name227.Tree);

							}
							break;

						default:
							goto loop149;
						}
					}

					loop149:
						;

					} finally { DebugExitSubRule(149); }


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(329, 63);
				// SugarCpp.g:329:63: ( WS )*
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==WS))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch ( alt151 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:329:63: WS
						{
						DebugLocation(329, 63);
						WS228=(IToken)Match(input,WS,Follow._WS_in_type_template_type2162); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS228);


						}
						break;

					default:
						goto loop151;
					}
				}

				loop151:
					;

				} finally { DebugExitSubRule(151); }

				DebugLocation(329, 67);
				char_literal229=(IToken)Match(input,125,Follow._125_in_type_template_type2165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal229);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:71: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(329, 74);
					// SugarCpp.g:329:74: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 76);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(329, 90);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(329, 101);
					// SugarCpp.g:329:101: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(329, 101);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:330:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 330:8: -> type_ident
				{
					DebugLocation(330, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 21);
			LeaveRule("type_template_type", 21);
			LeaveRule_type_template_type();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:334:1: type_ident : ( 'static' ( WS )* )? ( 'const' ( WS )* )? ( 'struct' ( WS )* )? ( 'long' ( WS )* )? ( 'thread_local' ( WS )* )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ( 'thread_local' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 22);
		TraceIn("type_ident", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal230 = default(IToken);
		IToken WS231 = default(IToken);
		IToken string_literal232 = default(IToken);
		IToken WS233 = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken WS235 = default(IToken);
		IToken string_literal236 = default(IToken);
		IToken WS237 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken WS239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree WS231_tree = default(CommonTree);
		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree WS233_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree WS235_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree WS237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree WS239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( ( 'static' ( WS )* )? ( 'const' ( WS )* )? ( 'struct' ( WS )* )? ( 'long' ( WS )* )? ( 'thread_local' ( WS )* )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ( 'thread_local' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: ( 'static' ( WS )* )? ( 'const' ( WS )* )? ( 'struct' ( WS )* )? ( 'long' ( WS )* )? ( 'thread_local' ( WS )* )? ident
			{
			DebugLocation(335, 4);
			// SugarCpp.g:335:4: ( 'static' ( WS )* )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_0 = input.LA(1);

			if ((LA154_0==166))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:5: 'static' ( WS )*
				{
				DebugLocation(335, 5);
				string_literal230=(IToken)Match(input,166,Follow._166_in_type_ident2206); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal230);

				DebugLocation(335, 14);
				// SugarCpp.g:335:14: ( WS )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==WS))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:14: WS
						{
						DebugLocation(335, 14);
						WS231=(IToken)Match(input,WS,Follow._WS_in_type_ident2208); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS231);


						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }


				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(335, 20);
			// SugarCpp.g:335:20: ( 'const' ( WS )* )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==142))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:21: 'const' ( WS )*
				{
				DebugLocation(335, 21);
				string_literal232=(IToken)Match(input,142,Follow._142_in_type_ident2214); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal232);

				DebugLocation(335, 29);
				// SugarCpp.g:335:29: ( WS )*
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==WS))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch ( alt155 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:29: WS
						{
						DebugLocation(335, 29);
						WS233=(IToken)Match(input,WS,Follow._WS_in_type_ident2216); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS233);


						}
						break;

					default:
						goto loop155;
					}
				}

				loop155:
					;

				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(335, 35);
			// SugarCpp.g:335:35: ( 'struct' ( WS )* )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			int LA158_0 = input.LA(1);

			if ((LA158_0==167))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:36: 'struct' ( WS )*
				{
				DebugLocation(335, 36);
				string_literal234=(IToken)Match(input,167,Follow._167_in_type_ident2222); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal234);

				DebugLocation(335, 45);
				// SugarCpp.g:335:45: ( WS )*
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==WS))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch ( alt157 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:45: WS
						{
						DebugLocation(335, 45);
						WS235=(IToken)Match(input,WS,Follow._WS_in_type_ident2224); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS235);


						}
						break;

					default:
						goto loop157;
					}
				}

				loop157:
					;

				} finally { DebugExitSubRule(157); }


				}
				break;

			}
			} finally { DebugExitSubRule(158); }

			DebugLocation(335, 51);
			// SugarCpp.g:335:51: ( 'long' ( WS )* )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, false);
			int LA160_0 = input.LA(1);

			if ((LA160_0==156))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:52: 'long' ( WS )*
				{
				DebugLocation(335, 52);
				string_literal236=(IToken)Match(input,156,Follow._156_in_type_ident2230); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_156.Add(string_literal236);

				DebugLocation(335, 59);
				// SugarCpp.g:335:59: ( WS )*
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0==WS))
					{
						alt159 = 1;
					}


					} finally { DebugExitDecision(159); }
					switch ( alt159 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:59: WS
						{
						DebugLocation(335, 59);
						WS237=(IToken)Match(input,WS,Follow._WS_in_type_ident2232); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS237);


						}
						break;

					default:
						goto loop159;
					}
				}

				loop159:
					;

				} finally { DebugExitSubRule(159); }


				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(335, 65);
			// SugarCpp.g:335:65: ( 'thread_local' ( WS )* )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_0 = input.LA(1);

			if ((LA162_0==170))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:66: 'thread_local' ( WS )*
				{
				DebugLocation(335, 66);
				string_literal238=(IToken)Match(input,170,Follow._170_in_type_ident2238); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal238);

				DebugLocation(335, 81);
				// SugarCpp.g:335:81: ( WS )*
				try { DebugEnterSubRule(161);
				while (true)
				{
					int alt161=2;
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==WS))
					{
						alt161 = 1;
					}


					} finally { DebugExitDecision(161); }
					switch ( alt161 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:81: WS
						{
						DebugLocation(335, 81);
						WS239=(IToken)Match(input,WS,Follow._WS_in_type_ident2240); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS239);


						}
						break;

					default:
						goto loop161;
					}
				}

				loop161:
					;

				} finally { DebugExitSubRule(161); }


				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(335, 87);
			PushFollow(Follow._ident_in_type_ident2245);
			ident240=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident240.Tree);


			{
			// AST REWRITE
			// elements: ident, 142, 167, 170, 156, 166
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:93: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ( 'thread_local' )? ident )
			{
				DebugLocation(335, 96);
				// SugarCpp.g:335:96: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ( 'thread_local' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(335, 98);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(335, 109);
				// SugarCpp.g:335:109: ( 'static' )?
				if (stream_166.HasNext)
				{
					DebugLocation(335, 109);
					adaptor.AddChild(root_1, stream_166.NextNode());

				}
				stream_166.Reset();
				DebugLocation(335, 119);
				// SugarCpp.g:335:119: ( 'const' )?
				if (stream_142.HasNext)
				{
					DebugLocation(335, 119);
					adaptor.AddChild(root_1, stream_142.NextNode());

				}
				stream_142.Reset();
				DebugLocation(335, 128);
				// SugarCpp.g:335:128: ( 'struct' )?
				if (stream_167.HasNext)
				{
					DebugLocation(335, 128);
					adaptor.AddChild(root_1, stream_167.NextNode());

				}
				stream_167.Reset();
				DebugLocation(335, 138);
				// SugarCpp.g:335:138: ( 'long' )?
				if (stream_156.HasNext)
				{
					DebugLocation(335, 138);
					adaptor.AddChild(root_1, stream_156.NextNode());

				}
				stream_156.Reset();
				DebugLocation(335, 146);
				// SugarCpp.g:335:146: ( 'thread_local' )?
				if (stream_170.HasNext)
				{
					DebugLocation(335, 146);
					adaptor.AddChild(root_1, stream_170.NextNode());

				}
				stream_170.Reset();
				DebugLocation(335, 162);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 22);
			LeaveRule("type_ident", 22);
			LeaveRule_type_ident();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:338:1: generic_parameter_inside : type_name ( ( WS )* ',' ( WS )* type_name )* -> ^( Generic_Patameters ( type_name )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 23);
		TraceIn("generic_parameter_inside", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS242 = default(IToken);
		IToken char_literal243 = default(IToken);
		IToken WS244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS242_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		CommonTree WS244_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( type_name ( ( WS )* ',' ( WS )* type_name )* -> ^( Generic_Patameters ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:339:4: type_name ( ( WS )* ',' ( WS )* type_name )*
			{
			DebugLocation(339, 4);
			PushFollow(Follow._type_name_in_generic_parameter_inside2279);
			type_name241=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name241.Tree);
			DebugLocation(339, 14);
			// SugarCpp.g:339:14: ( ( WS )* ',' ( WS )* type_name )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				try
				{
					alt165 = dfa165.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:15: ( WS )* ',' ( WS )* type_name
					{
					DebugLocation(339, 15);
					// SugarCpp.g:339:15: ( WS )*
					try { DebugEnterSubRule(163);
					while (true)
					{
						int alt163=2;
						try { DebugEnterDecision(163, false);
						int LA163_0 = input.LA(1);

						if ((LA163_0==WS))
						{
							alt163 = 1;
						}


						} finally { DebugExitDecision(163); }
						switch ( alt163 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:339:15: WS
							{
							DebugLocation(339, 15);
							WS242=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_inside2282); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS242);


							}
							break;

						default:
							goto loop163;
						}
					}

					loop163:
						;

					} finally { DebugExitSubRule(163); }

					DebugLocation(339, 19);
					char_literal243=(IToken)Match(input,100,Follow._100_in_generic_parameter_inside2285); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal243);

					DebugLocation(339, 23);
					// SugarCpp.g:339:23: ( WS )*
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==WS))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch ( alt164 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:339:23: WS
							{
							DebugLocation(339, 23);
							WS244=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_inside2287); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS244);


							}
							break;

						default:
							goto loop164;
						}
					}

					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(339, 27);
					PushFollow(Follow._type_name_in_generic_parameter_inside2290);
					type_name245=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name245.Tree);

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:39: -> ^( Generic_Patameters ( type_name )* )
			{
				DebugLocation(339, 42);
				// SugarCpp.g:339:42: ^( Generic_Patameters ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(339, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(339, 63);
				// SugarCpp.g:339:63: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(339, 63);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 23);
			LeaveRule("generic_parameter_inside", 23);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:342:1: generic_parameter : '<' ( WS )* generic_parameter_inside ( WS )* '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 24);
		TraceIn("generic_parameter", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal246 = default(IToken);
		IToken WS247 = default(IToken);
		IToken WS249 = default(IToken);
		IToken char_literal250 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree WS247_tree = default(CommonTree);
		CommonTree WS249_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( '<' ( WS )* generic_parameter_inside ( WS )* '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:343:4: '<' ( WS )* generic_parameter_inside ( WS )* '>'
			{
			DebugLocation(343, 4);
			char_literal246=(IToken)Match(input,115,Follow._115_in_generic_parameter2312); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(char_literal246);

			DebugLocation(343, 8);
			// SugarCpp.g:343:8: ( WS )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==WS))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:8: WS
					{
					DebugLocation(343, 8);
					WS247=(IToken)Match(input,WS,Follow._WS_in_generic_parameter2314); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS247);


					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }

			DebugLocation(343, 12);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter2317);
			generic_parameter_inside248=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside248.Tree);
			DebugLocation(343, 37);
			// SugarCpp.g:343:37: ( WS )*
			try { DebugEnterSubRule(167);
			while (true)
			{
				int alt167=2;
				try { DebugEnterDecision(167, false);
				int LA167_0 = input.LA(1);

				if ((LA167_0==WS))
				{
					alt167 = 1;
				}


				} finally { DebugExitDecision(167); }
				switch ( alt167 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:37: WS
					{
					DebugLocation(343, 37);
					WS249=(IToken)Match(input,WS,Follow._WS_in_generic_parameter2319); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS249);


					}
					break;

				default:
					goto loop167;
				}
			}

			loop167:
				;

			} finally { DebugExitSubRule(167); }

			DebugLocation(343, 41);
			char_literal250=(IToken)Match(input,125,Follow._125_in_generic_parameter2322); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal250);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 343:45: -> generic_parameter_inside
			{
				DebugLocation(343, 48);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 24);
			LeaveRule("generic_parameter", 24);
			LeaveRule_generic_parameter();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_generic_parameter_ident();
	partial void LeaveRule_generic_parameter_ident();

	// $ANTLR start "generic_parameter_ident"
	// SugarCpp.g:346:1: generic_parameter_ident : '<' ( WS )* type_ident ( ( WS )* ',' ( WS )* type_ident )* ( WS )* '>' -> ^( Generic_Patameters ( type_ident )* ) ;
	[GrammarRule("generic_parameter_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_ident()
	{
		EnterRule_generic_parameter_ident();
		EnterRule("generic_parameter_ident", 25);
		TraceIn("generic_parameter_ident", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal251 = default(IToken);
		IToken WS252 = default(IToken);
		IToken WS254 = default(IToken);
		IToken char_literal255 = default(IToken);
		IToken WS256 = default(IToken);
		IToken WS258 = default(IToken);
		IToken char_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree WS252_tree = default(CommonTree);
		CommonTree WS254_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		CommonTree WS256_tree = default(CommonTree);
		CommonTree WS258_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_ident");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( '<' ( WS )* type_ident ( ( WS )* ',' ( WS )* type_ident )* ( WS )* '>' -> ^( Generic_Patameters ( type_ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:347:4: '<' ( WS )* type_ident ( ( WS )* ',' ( WS )* type_ident )* ( WS )* '>'
			{
			DebugLocation(347, 4);
			char_literal251=(IToken)Match(input,115,Follow._115_in_generic_parameter_ident2337); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(char_literal251);

			DebugLocation(347, 8);
			// SugarCpp.g:347:8: ( WS )*
			try { DebugEnterSubRule(168);
			while (true)
			{
				int alt168=2;
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==WS))
				{
					alt168 = 1;
				}


				} finally { DebugExitDecision(168); }
				switch ( alt168 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:8: WS
					{
					DebugLocation(347, 8);
					WS252=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_ident2339); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS252);


					}
					break;

				default:
					goto loop168;
				}
			}

			loop168:
				;

			} finally { DebugExitSubRule(168); }

			DebugLocation(347, 12);
			PushFollow(Follow._type_ident_in_generic_parameter_ident2342);
			type_ident253=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident253.Tree);
			DebugLocation(347, 23);
			// SugarCpp.g:347:23: ( ( WS )* ',' ( WS )* type_ident )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				try
				{
					alt171 = dfa171.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:24: ( WS )* ',' ( WS )* type_ident
					{
					DebugLocation(347, 24);
					// SugarCpp.g:347:24: ( WS )*
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_0 = input.LA(1);

						if ((LA169_0==WS))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch ( alt169 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:347:24: WS
							{
							DebugLocation(347, 24);
							WS254=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_ident2345); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS254);


							}
							break;

						default:
							goto loop169;
						}
					}

					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(347, 28);
					char_literal255=(IToken)Match(input,100,Follow._100_in_generic_parameter_ident2348); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal255);

					DebugLocation(347, 32);
					// SugarCpp.g:347:32: ( WS )*
					try { DebugEnterSubRule(170);
					while (true)
					{
						int alt170=2;
						try { DebugEnterDecision(170, false);
						int LA170_0 = input.LA(1);

						if ((LA170_0==WS))
						{
							alt170 = 1;
						}


						} finally { DebugExitDecision(170); }
						switch ( alt170 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:347:32: WS
							{
							DebugLocation(347, 32);
							WS256=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_ident2350); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS256);


							}
							break;

						default:
							goto loop170;
						}
					}

					loop170:
						;

					} finally { DebugExitSubRule(170); }

					DebugLocation(347, 36);
					PushFollow(Follow._type_ident_in_generic_parameter_ident2353);
					type_ident257=type_ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_ident.Add(type_ident257.Tree);

					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }

			DebugLocation(347, 49);
			// SugarCpp.g:347:49: ( WS )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_0 = input.LA(1);

				if ((LA172_0==WS))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:49: WS
					{
					DebugLocation(347, 49);
					WS258=(IToken)Match(input,WS,Follow._WS_in_generic_parameter_ident2357); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS258);


					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }

			DebugLocation(347, 53);
			char_literal259=(IToken)Match(input,125,Follow._125_in_generic_parameter_ident2360); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal259);



			{
			// AST REWRITE
			// elements: type_ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 347:57: -> ^( Generic_Patameters ( type_ident )* )
			{
				DebugLocation(347, 60);
				// SugarCpp.g:347:60: ^( Generic_Patameters ( type_ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(347, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(347, 81);
				// SugarCpp.g:347:81: ( type_ident )*
				while ( stream_type_ident.HasNext )
				{
					DebugLocation(347, 81);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());

				}
				stream_type_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_ident", 25);
			LeaveRule("generic_parameter_ident", 25);
			LeaveRule_generic_parameter_ident();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_ident"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_ident"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:350:1: func_args : func_args_item ( ( WS )* ',' ( WS )* func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 26);
		TraceIn("func_args", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS261 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken WS263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS261_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		CommonTree WS263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( func_args_item ( ( WS )* ',' ( WS )* func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:351:4: func_args_item ( ( WS )* ',' ( WS )* func_args_item )*
			{
			DebugLocation(351, 4);
			PushFollow(Follow._func_args_item_in_func_args2380);
			func_args_item260=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item260.Tree);
			DebugLocation(351, 19);
			// SugarCpp.g:351:19: ( ( WS )* ',' ( WS )* func_args_item )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				try
				{
					alt175 = dfa175.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:351:20: ( WS )* ',' ( WS )* func_args_item
					{
					DebugLocation(351, 20);
					// SugarCpp.g:351:20: ( WS )*
					try { DebugEnterSubRule(173);
					while (true)
					{
						int alt173=2;
						try { DebugEnterDecision(173, false);
						int LA173_0 = input.LA(1);

						if ((LA173_0==WS))
						{
							alt173 = 1;
						}


						} finally { DebugExitDecision(173); }
						switch ( alt173 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:351:20: WS
							{
							DebugLocation(351, 20);
							WS261=(IToken)Match(input,WS,Follow._WS_in_func_args2383); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS261);


							}
							break;

						default:
							goto loop173;
						}
					}

					loop173:
						;

					} finally { DebugExitSubRule(173); }

					DebugLocation(351, 24);
					char_literal262=(IToken)Match(input,100,Follow._100_in_func_args2386); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal262);

					DebugLocation(351, 28);
					// SugarCpp.g:351:28: ( WS )*
					try { DebugEnterSubRule(174);
					while (true)
					{
						int alt174=2;
						try { DebugEnterDecision(174, false);
						int LA174_0 = input.LA(1);

						if ((LA174_0==WS))
						{
							alt174 = 1;
						}


						} finally { DebugExitDecision(174); }
						switch ( alt174 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:351:28: WS
							{
							DebugLocation(351, 28);
							WS263=(IToken)Match(input,WS,Follow._WS_in_func_args2388); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS263);


							}
							break;

						default:
							goto loop174;
						}
					}

					loop174:
						;

					} finally { DebugExitSubRule(174); }

					DebugLocation(351, 32);
					PushFollow(Follow._func_args_item_in_func_args2391);
					func_args_item264=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item264.Tree);

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 351:49: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(351, 52);
				// SugarCpp.g:351:52: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(351, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(351, 64);
				// SugarCpp.g:351:64: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(351, 64);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 26);
			LeaveRule("func_args", 26);
			LeaveRule_func_args();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:355:1: func_args_item : ident_list ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) ;
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 27);
		TraceIn("func_args_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS266 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken WS268 = default(IToken);
		IToken WS270 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken string_literal272 = default(IToken);
		IToken WS273 = default(IToken);
		IToken WS275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS266_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree WS268_tree = default(CommonTree);
		CommonTree WS270_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree WS273_tree = default(CommonTree);
		CommonTree WS275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(355, 1);
		try
		{
			// SugarCpp.g:356:2: ( ident_list ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: ident_list ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
			{
			DebugLocation(356, 4);
			PushFollow(Follow._ident_list_in_func_args_item2414);
			ident_list265=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list265.Tree);
			DebugLocation(356, 15);
			// SugarCpp.g:356:15: ( WS )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==WS))
				{
					alt176 = 1;
				}


				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:15: WS
					{
					DebugLocation(356, 15);
					WS266=(IToken)Match(input,WS,Follow._WS_in_func_args_item2416); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS266);


					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }

			DebugLocation(356, 19);
			char_literal267=(IToken)Match(input,111,Follow._111_in_func_args_item2419); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(char_literal267);

			DebugLocation(356, 23);
			// SugarCpp.g:356:23: ( WS )*
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==WS))
				{
					alt177 = 1;
				}


				} finally { DebugExitDecision(177); }
				switch ( alt177 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:23: WS
					{
					DebugLocation(356, 23);
					WS268=(IToken)Match(input,WS,Follow._WS_in_func_args_item2421); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS268);


					}
					break;

				default:
					goto loop177;
				}
			}

			loop177:
				;

			} finally { DebugExitSubRule(177); }

			DebugLocation(356, 27);
			PushFollow(Follow._type_name_in_func_args_item2424);
			type_name269=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name269.Tree);
			DebugLocation(356, 37);
			// SugarCpp.g:356:37: ( ( WS )* ( '=' | ':=' ) ( WS )* expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
			int alt182=3;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			try
			{
				alt182 = dfa182.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:39: ( WS )* ( '=' | ':=' ) ( WS )* expr
				{
				DebugLocation(356, 39);
				// SugarCpp.g:356:39: ( WS )*
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==WS))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch ( alt178 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:39: WS
						{
						DebugLocation(356, 39);
						WS270=(IToken)Match(input,WS,Follow._WS_in_func_args_item2428); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS270);


						}
						break;

					default:
						goto loop178;
					}
				}

				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(356, 43);
				// SugarCpp.g:356:43: ( '=' | ':=' )
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==121))
				{
					alt179 = 1;
				}
				else if ((LA179_0==113))
				{
					alt179 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:44: '='
					{
					DebugLocation(356, 44);
					char_literal271=(IToken)Match(input,121,Follow._121_in_func_args_item2432); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_121.Add(char_literal271);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:356:50: ':='
					{
					DebugLocation(356, 50);
					string_literal272=(IToken)Match(input,113,Follow._113_in_func_args_item2436); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(string_literal272);


					}
					break;

				}
				} finally { DebugExitSubRule(179); }

				DebugLocation(356, 56);
				// SugarCpp.g:356:56: ( WS )*
				try { DebugEnterSubRule(180);
				while (true)
				{
					int alt180=2;
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==WS))
					{
						alt180 = 1;
					}


					} finally { DebugExitDecision(180); }
					switch ( alt180 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:56: WS
						{
						DebugLocation(356, 56);
						WS273=(IToken)Match(input,WS,Follow._WS_in_func_args_item2439); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS273);


						}
						break;

					default:
						goto loop180;
					}
				}

				loop180:
					;

				} finally { DebugExitSubRule(180); }

				DebugLocation(356, 60);
				PushFollow(Follow._expr_in_func_args_item2442);
				expr274=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr274.Tree);


				{
				// AST REWRITE
				// elements: ident_list, type_name, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:66: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
				{
					DebugLocation(356, 69);
					// SugarCpp.g:356:69: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

					DebugLocation(356, 88);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(356, 98);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(356, 109);
					// SugarCpp.g:356:109: ^( Expr_Args expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 111);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(356, 121);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:39: ( WS )* bracket_expr_list
				{
				DebugLocation(357, 39);
				// SugarCpp.g:357:39: ( WS )*
				try { DebugEnterSubRule(181);
				while (true)
				{
					int alt181=2;
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==WS))
					{
						alt181 = 1;
					}


					} finally { DebugExitDecision(181); }
					switch ( alt181 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:357:39: WS
						{
						DebugLocation(357, 39);
						WS275=(IToken)Match(input,WS,Follow._WS_in_func_args_item2499); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS275);


						}
						break;

					default:
						goto loop181;
					}
				}

				loop181:
					;

				} finally { DebugExitSubRule(181); }

				DebugLocation(357, 43);
				PushFollow(Follow._bracket_expr_list_in_func_args_item2502);
				bracket_expr_list276=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list276.Tree);


				{
				// AST REWRITE
				// elements: bracket_expr_list, ident_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:62: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
				{
					DebugLocation(357, 65);
					// SugarCpp.g:357:65: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 67);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

					DebugLocation(357, 86);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(357, 96);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(357, 107);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:358:21: 
				{

				{
				// AST REWRITE
				// elements: ident_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 358:21: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
				{
					DebugLocation(358, 24);
					// SugarCpp.g:358:24: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(358, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

					DebugLocation(358, 43);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(358, 53);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(358, 64);
					// SugarCpp.g:358:64: ^( Expr_Args )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(358, 66);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 27);
			LeaveRule("func_args_item", 27);
			LeaveRule_func_args_item();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:362:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 28);
		TraceIn("operator", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set277 = default(IToken);

		CommonTree set277_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(362, 1);
		try
		{
			// SugarCpp.g:363:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 2);

			set277=(IToken)input.LT(1);
			if (input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set277));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 28);
			LeaveRule("operator", 28);
			LeaveRule_operator();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:366:1: func_name : ( ident -> ident | '(' ( WS )* operator ( WS )* ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 29);
		TraceIn("func_name", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal279 = default(IToken);
		IToken WS280 = default(IToken);
		IToken WS282 = default(IToken);
		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree WS280_tree = default(CommonTree);
		CommonTree WS282_tree = default(CommonTree);
		CommonTree char_literal283_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(366, 1);
		try
		{
			// SugarCpp.g:367:2: ( ident -> ident | '(' ( WS )* operator ( WS )* ')' -> operator )
			int alt185=2;
			try { DebugEnterDecision(185, false);
			int LA185_0 = input.LA(1);

			if ((LA185_0==IDENT))
			{
				alt185 = 1;
			}
			else if ((LA185_0==93))
			{
				alt185 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:367:4: ident
				{
				DebugLocation(367, 4);
				PushFollow(Follow._ident_in_func_name2603);
				ident278=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident278.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 367:10: -> ident
				{
					DebugLocation(367, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:368:4: '(' ( WS )* operator ( WS )* ')'
				{
				DebugLocation(368, 4);
				char_literal279=(IToken)Match(input,93,Follow._93_in_func_name2612); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal279);

				DebugLocation(368, 8);
				// SugarCpp.g:368:8: ( WS )*
				try { DebugEnterSubRule(183);
				while (true)
				{
					int alt183=2;
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==WS))
					{
						alt183 = 1;
					}


					} finally { DebugExitDecision(183); }
					switch ( alt183 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:8: WS
						{
						DebugLocation(368, 8);
						WS280=(IToken)Match(input,WS,Follow._WS_in_func_name2614); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS280);


						}
						break;

					default:
						goto loop183;
					}
				}

				loop183:
					;

				} finally { DebugExitSubRule(183); }

				DebugLocation(368, 12);
				PushFollow(Follow._operator_in_func_name2617);
				operator281=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator281.Tree);
				DebugLocation(368, 21);
				// SugarCpp.g:368:21: ( WS )*
				try { DebugEnterSubRule(184);
				while (true)
				{
					int alt184=2;
					try { DebugEnterDecision(184, false);
					int LA184_0 = input.LA(1);

					if ((LA184_0==WS))
					{
						alt184 = 1;
					}


					} finally { DebugExitDecision(184); }
					switch ( alt184 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:21: WS
						{
						DebugLocation(368, 21);
						WS282=(IToken)Match(input,WS,Follow._WS_in_func_name2619); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS282);


						}
						break;

					default:
						goto loop184;
					}
				}

				loop184:
					;

				} finally { DebugExitSubRule(184); }

				DebugLocation(368, 25);
				char_literal283=(IToken)Match(input,94,Follow._94_in_func_name2622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal283);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 368:29: -> operator
				{
					DebugLocation(368, 32);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 29);
			LeaveRule("func_name", 29);
			LeaveRule_func_name();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:371:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 30);
		TraceIn("func_type", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(371, 1);
		try
		{
			// SugarCpp.g:372:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:372:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(372, 4);
			PushFollow(Follow._type_name_in_func_type2637);
			type_name284=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name284.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 30);
			LeaveRule("func_type", 30);
			LeaveRule_func_type();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:375:1: func_def : ( attribute )? ( 'public' ( WS )* )? ( 'virtual' ( WS )* )? ( func_type ( WS )* )? ( '~' ( WS )* )? func_name ( ( WS )* generic_parameter_ident )? ( WS )* '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 31);
		TraceIn("func_def", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal286 = default(IToken);
		IToken WS287 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken WS289 = default(IToken);
		IToken WS291 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken WS293 = default(IToken);
		IToken WS295 = default(IToken);
		IToken WS297 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken WS299 = default(IToken);
		IToken WS301 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken WS303 = default(IToken);
		IToken NEWLINE304 = default(IToken);
		IToken WS306 = default(IToken);
		IToken char_literal307 = default(IToken);
		IToken WS308 = default(IToken);
		IToken WS310 = default(IToken);
		IToken NEWLINE311 = default(IToken);
		IToken INDENT312 = default(IToken);
		IToken NEWLINE313 = default(IToken);
		IToken WS315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken DEDENT317 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_ident296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item314 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree WS287_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree WS289_tree = default(CommonTree);
		CommonTree WS291_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree WS293_tree = default(CommonTree);
		CommonTree WS295_tree = default(CommonTree);
		CommonTree WS297_tree = default(CommonTree);
		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree WS299_tree = default(CommonTree);
		CommonTree WS301_tree = default(CommonTree);
		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree WS303_tree = default(CommonTree);
		CommonTree NEWLINE304_tree = default(CommonTree);
		CommonTree WS306_tree = default(CommonTree);
		CommonTree char_literal307_tree = default(CommonTree);
		CommonTree WS308_tree = default(CommonTree);
		CommonTree WS310_tree = default(CommonTree);
		CommonTree NEWLINE311_tree = default(CommonTree);
		CommonTree INDENT312_tree = default(CommonTree);
		CommonTree NEWLINE313_tree = default(CommonTree);
		CommonTree WS315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree DEDENT317_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter_ident=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_ident");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(375, 4);
		try
		{
			// SugarCpp.g:376:2: ( ( attribute )? ( 'public' ( WS )* )? ( 'virtual' ( WS )* )? ( func_type ( WS )* )? ( '~' ( WS )* )? func_name ( ( WS )* generic_parameter_ident )? ( WS )* '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:376:4: ( attribute )? ( 'public' ( WS )* )? ( 'virtual' ( WS )* )? ( func_type ( WS )* )? ( '~' ( WS )* )? func_name ( ( WS )* generic_parameter_ident )? ( WS )* '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )
			{
			DebugLocation(376, 4);
			// SugarCpp.g:376:4: ( attribute )?
			int alt186=2;
			try { DebugEnterSubRule(186);
			try { DebugEnterDecision(186, false);
			int LA186_0 = input.LA(1);

			if ((LA186_0==132))
			{
				alt186 = 1;
			}
			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:4: attribute
				{
				DebugLocation(376, 4);
				PushFollow(Follow._attribute_in_func_def2648);
				attribute285=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute285.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(186); }

			DebugLocation(376, 15);
			// SugarCpp.g:376:15: ( 'public' ( WS )* )?
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			int LA188_0 = input.LA(1);

			if ((LA188_0==163))
			{
				alt188 = 1;
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:16: 'public' ( WS )*
				{
				DebugLocation(376, 16);
				string_literal286=(IToken)Match(input,163,Follow._163_in_func_def2652); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal286);

				DebugLocation(376, 25);
				// SugarCpp.g:376:25: ( WS )*
				try { DebugEnterSubRule(187);
				while (true)
				{
					int alt187=2;
					try { DebugEnterDecision(187, false);
					int LA187_0 = input.LA(1);

					if ((LA187_0==WS))
					{
						alt187 = 1;
					}


					} finally { DebugExitDecision(187); }
					switch ( alt187 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:25: WS
						{
						DebugLocation(376, 25);
						WS287=(IToken)Match(input,WS,Follow._WS_in_func_def2654); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS287);


						}
						break;

					default:
						goto loop187;
					}
				}

				loop187:
					;

				} finally { DebugExitSubRule(187); }


				}
				break;

			}
			} finally { DebugExitSubRule(188); }

			DebugLocation(376, 31);
			// SugarCpp.g:376:31: ( 'virtual' ( WS )* )?
			int alt190=2;
			try { DebugEnterSubRule(190);
			try { DebugEnterDecision(190, false);
			int LA190_0 = input.LA(1);

			if ((LA190_0==178))
			{
				alt190 = 1;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:32: 'virtual' ( WS )*
				{
				DebugLocation(376, 32);
				string_literal288=(IToken)Match(input,178,Follow._178_in_func_def2660); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal288);

				DebugLocation(376, 42);
				// SugarCpp.g:376:42: ( WS )*
				try { DebugEnterSubRule(189);
				while (true)
				{
					int alt189=2;
					try { DebugEnterDecision(189, false);
					int LA189_0 = input.LA(1);

					if ((LA189_0==WS))
					{
						alt189 = 1;
					}


					} finally { DebugExitDecision(189); }
					switch ( alt189 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:42: WS
						{
						DebugLocation(376, 42);
						WS289=(IToken)Match(input,WS,Follow._WS_in_func_def2662); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS289);


						}
						break;

					default:
						goto loop189;
					}
				}

				loop189:
					;

				} finally { DebugExitSubRule(189); }


				}
				break;

			}
			} finally { DebugExitSubRule(190); }

			DebugLocation(376, 48);
			// SugarCpp.g:376:48: ( func_type ( WS )* )?
			int alt192=2;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			try
			{
				alt192 = dfa192.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:49: func_type ( WS )*
				{
				DebugLocation(376, 49);
				PushFollow(Follow._func_type_in_func_def2668);
				func_type290=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type290.Tree);
				DebugLocation(376, 59);
				// SugarCpp.g:376:59: ( WS )*
				try { DebugEnterSubRule(191);
				while (true)
				{
					int alt191=2;
					try { DebugEnterDecision(191, false);
					int LA191_0 = input.LA(1);

					if ((LA191_0==WS))
					{
						alt191 = 1;
					}


					} finally { DebugExitDecision(191); }
					switch ( alt191 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:59: WS
						{
						DebugLocation(376, 59);
						WS291=(IToken)Match(input,WS,Follow._WS_in_func_def2670); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS291);


						}
						break;

					default:
						goto loop191;
					}
				}

				loop191:
					;

				} finally { DebugExitSubRule(191); }


				}
				break;

			}
			} finally { DebugExitSubRule(192); }

			DebugLocation(376, 65);
			// SugarCpp.g:376:65: ( '~' ( WS )* )?
			int alt194=2;
			try { DebugEnterSubRule(194);
			try { DebugEnterDecision(194, false);
			int LA194_0 = input.LA(1);

			if ((LA194_0==186))
			{
				alt194 = 1;
			}
			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:66: '~' ( WS )*
				{
				DebugLocation(376, 66);
				char_literal292=(IToken)Match(input,186,Follow._186_in_func_def2676); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(char_literal292);

				DebugLocation(376, 70);
				// SugarCpp.g:376:70: ( WS )*
				try { DebugEnterSubRule(193);
				while (true)
				{
					int alt193=2;
					try { DebugEnterDecision(193, false);
					int LA193_0 = input.LA(1);

					if ((LA193_0==WS))
					{
						alt193 = 1;
					}


					} finally { DebugExitDecision(193); }
					switch ( alt193 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:70: WS
						{
						DebugLocation(376, 70);
						WS293=(IToken)Match(input,WS,Follow._WS_in_func_def2678); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS293);


						}
						break;

					default:
						goto loop193;
					}
				}

				loop193:
					;

				} finally { DebugExitSubRule(193); }


				}
				break;

			}
			} finally { DebugExitSubRule(194); }

			DebugLocation(376, 76);
			PushFollow(Follow._func_name_in_func_def2683);
			func_name294=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name294.Tree);
			DebugLocation(376, 86);
			// SugarCpp.g:376:86: ( ( WS )* generic_parameter_ident )?
			int alt196=2;
			try { DebugEnterSubRule(196);
			try { DebugEnterDecision(196, false);
			try
			{
				alt196 = dfa196.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:87: ( WS )* generic_parameter_ident
				{
				DebugLocation(376, 87);
				// SugarCpp.g:376:87: ( WS )*
				try { DebugEnterSubRule(195);
				while (true)
				{
					int alt195=2;
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==WS))
					{
						alt195 = 1;
					}


					} finally { DebugExitDecision(195); }
					switch ( alt195 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:87: WS
						{
						DebugLocation(376, 87);
						WS295=(IToken)Match(input,WS,Follow._WS_in_func_def2686); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS295);


						}
						break;

					default:
						goto loop195;
					}
				}

				loop195:
					;

				} finally { DebugExitSubRule(195); }

				DebugLocation(376, 91);
				PushFollow(Follow._generic_parameter_ident_in_func_def2689);
				generic_parameter_ident296=generic_parameter_ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter_ident.Add(generic_parameter_ident296.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(196); }

			DebugLocation(376, 117);
			// SugarCpp.g:376:117: ( WS )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=2;
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==WS))
				{
					alt197 = 1;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:117: WS
					{
					DebugLocation(376, 117);
					WS297=(IToken)Match(input,WS,Follow._WS_in_func_def2693); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS297);


					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }

			DebugLocation(376, 121);
			char_literal298=(IToken)Match(input,93,Follow._93_in_func_def2696); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal298);

			DebugLocation(376, 125);
			// SugarCpp.g:376:125: ( ( WS )* func_args )?
			int alt199=2;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			try
			{
				alt199 = dfa199.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:126: ( WS )* func_args
				{
				DebugLocation(376, 126);
				// SugarCpp.g:376:126: ( WS )*
				try { DebugEnterSubRule(198);
				while (true)
				{
					int alt198=2;
					try { DebugEnterDecision(198, false);
					int LA198_0 = input.LA(1);

					if ((LA198_0==WS))
					{
						alt198 = 1;
					}


					} finally { DebugExitDecision(198); }
					switch ( alt198 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:126: WS
						{
						DebugLocation(376, 126);
						WS299=(IToken)Match(input,WS,Follow._WS_in_func_def2699); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS299);


						}
						break;

					default:
						goto loop198;
					}
				}

				loop198:
					;

				} finally { DebugExitSubRule(198); }

				DebugLocation(376, 130);
				PushFollow(Follow._func_args_in_func_def2702);
				func_args300=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args300.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(199); }

			DebugLocation(376, 142);
			// SugarCpp.g:376:142: ( WS )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==WS))
				{
					alt200 = 1;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:142: WS
					{
					DebugLocation(376, 142);
					WS301=(IToken)Match(input,WS,Follow._WS_in_func_def2706); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS301);


					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }

			DebugLocation(376, 146);
			char_literal302=(IToken)Match(input,94,Follow._94_in_func_def2709); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal302);

			DebugLocation(376, 150);
			// SugarCpp.g:376:150: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )
			int alt212=3;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			try
			{
				alt212 = dfa212.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:376:152: ( WS )* ( NEWLINE )+ stmt_block
				{
				DebugLocation(376, 152);
				// SugarCpp.g:376:152: ( WS )*
				try { DebugEnterSubRule(201);
				while (true)
				{
					int alt201=2;
					try { DebugEnterDecision(201, false);
					int LA201_0 = input.LA(1);

					if ((LA201_0==WS))
					{
						alt201 = 1;
					}


					} finally { DebugExitDecision(201); }
					switch ( alt201 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:152: WS
						{
						DebugLocation(376, 152);
						WS303=(IToken)Match(input,WS,Follow._WS_in_func_def2713); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS303);


						}
						break;

					default:
						goto loop201;
					}
				}

				loop201:
					;

				} finally { DebugExitSubRule(201); }

				DebugLocation(376, 156);
				// SugarCpp.g:376:156: ( NEWLINE )+
				int cnt202=0;
				try { DebugEnterSubRule(202);
				while (true)
				{
					int alt202=2;
					try { DebugEnterDecision(202, false);
					int LA202_0 = input.LA(1);

					if ((LA202_0==NEWLINE))
					{
						alt202 = 1;
					}


					} finally { DebugExitDecision(202); }
					switch (alt202)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:156: NEWLINE
						{
						DebugLocation(376, 156);
						NEWLINE304=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2716); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE304);


						}
						break;

					default:
						if (cnt202 >= 1)
							goto loop202;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee202 = new EarlyExitException( 202, input );
						DebugRecognitionException(eee202);
						throw eee202;
					}
					cnt202++;
				}
				loop202:
					;

				} finally { DebugExitSubRule(202); }

				DebugLocation(376, 165);
				PushFollow(Follow._stmt_block_in_func_def2719);
				stmt_block305=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block305.Tree);


				{
				// AST REWRITE
				// elements: func_args, 186, stmt_block, func_type, 178, generic_parameter_ident, func_name, attribute, 163
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 376:176: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block )
				{
					DebugLocation(376, 179);
					// SugarCpp.g:376:179: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(376, 181);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(376, 190);
					// SugarCpp.g:376:190: ( 'public' )?
					if (stream_163.HasNext)
					{
						DebugLocation(376, 190);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(376, 200);
					// SugarCpp.g:376:200: ( 'virtual' )?
					if (stream_178.HasNext)
					{
						DebugLocation(376, 200);
						adaptor.AddChild(root_1, stream_178.NextNode());

					}
					stream_178.Reset();
					DebugLocation(376, 211);
					// SugarCpp.g:376:211: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(376, 211);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(376, 222);
					// SugarCpp.g:376:222: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(376, 222);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(376, 233);
					// SugarCpp.g:376:233: ( '~' )?
					if (stream_186.HasNext)
					{
						DebugLocation(376, 233);
						adaptor.AddChild(root_1, stream_186.NextNode());

					}
					stream_186.Reset();
					DebugLocation(376, 238);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(376, 248);
					// SugarCpp.g:376:248: ( generic_parameter_ident )?
					if (stream_generic_parameter_ident.HasNext)
					{
						DebugLocation(376, 248);
						adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

					}
					stream_generic_parameter_ident.Reset();
					DebugLocation(376, 273);
					// SugarCpp.g:376:273: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(376, 273);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(376, 284);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:377:80: ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(377, 80);
				// SugarCpp.g:377:80: ( WS )*
				try { DebugEnterSubRule(203);
				while (true)
				{
					int alt203=2;
					try { DebugEnterDecision(203, false);
					int LA203_0 = input.LA(1);

					if ((LA203_0==WS))
					{
						alt203 = 1;
					}


					} finally { DebugExitDecision(203); }
					switch ( alt203 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:377:80: WS
						{
						DebugLocation(377, 80);
						WS306=(IToken)Match(input,WS,Follow._WS_in_func_def2831); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS306);


						}
						break;

					default:
						goto loop203;
					}
				}

				loop203:
					;

				} finally { DebugExitSubRule(203); }

				DebugLocation(377, 84);
				char_literal307=(IToken)Match(input,121,Follow._121_in_func_def2834); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_121.Add(char_literal307);

				DebugLocation(377, 88);
				// SugarCpp.g:377:88: ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt211=2;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				try
				{
					alt211 = dfa211.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:90: ( WS )* where_expr
					{
					DebugLocation(377, 90);
					// SugarCpp.g:377:90: ( WS )*
					try { DebugEnterSubRule(204);
					while (true)
					{
						int alt204=2;
						try { DebugEnterDecision(204, false);
						int LA204_0 = input.LA(1);

						if ((LA204_0==WS))
						{
							alt204 = 1;
						}


						} finally { DebugExitDecision(204); }
						switch ( alt204 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:377:90: WS
							{
							DebugLocation(377, 90);
							WS308=(IToken)Match(input,WS,Follow._WS_in_func_def2838); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS308);


							}
							break;

						default:
							goto loop204;
						}
					}

					loop204:
						;

					} finally { DebugExitSubRule(204); }

					DebugLocation(377, 94);
					PushFollow(Follow._where_expr_in_func_def2841);
					where_expr309=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr309.Tree);


					{
					// AST REWRITE
					// elements: where_expr, 186, 163, generic_parameter_ident, func_args, func_name, 178, func_type, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:105: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr )
					{
						DebugLocation(377, 108);
						// SugarCpp.g:377:108: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 110);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(377, 119);
						// SugarCpp.g:377:119: ( 'public' )?
						if (stream_163.HasNext)
						{
							DebugLocation(377, 119);
							adaptor.AddChild(root_1, stream_163.NextNode());

						}
						stream_163.Reset();
						DebugLocation(377, 129);
						// SugarCpp.g:377:129: ( 'virtual' )?
						if (stream_178.HasNext)
						{
							DebugLocation(377, 129);
							adaptor.AddChild(root_1, stream_178.NextNode());

						}
						stream_178.Reset();
						DebugLocation(377, 140);
						// SugarCpp.g:377:140: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(377, 140);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(377, 151);
						// SugarCpp.g:377:151: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(377, 151);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(377, 162);
						// SugarCpp.g:377:162: ( '~' )?
						if (stream_186.HasNext)
						{
							DebugLocation(377, 162);
							adaptor.AddChild(root_1, stream_186.NextNode());

						}
						stream_186.Reset();
						DebugLocation(377, 167);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(377, 177);
						// SugarCpp.g:377:177: ( generic_parameter_ident )?
						if (stream_generic_parameter_ident.HasNext)
						{
							DebugLocation(377, 177);
							adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

						}
						stream_generic_parameter_ident.Reset();
						DebugLocation(377, 202);
						// SugarCpp.g:377:202: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(377, 202);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(377, 213);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:378:84: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(378, 84);
					// SugarCpp.g:378:84: ( WS )*
					try { DebugEnterSubRule(205);
					while (true)
					{
						int alt205=2;
						try { DebugEnterDecision(205, false);
						int LA205_0 = input.LA(1);

						if ((LA205_0==WS))
						{
							alt205 = 1;
						}


						} finally { DebugExitDecision(205); }
						switch ( alt205 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:378:84: WS
							{
							DebugLocation(378, 84);
							WS310=(IToken)Match(input,WS,Follow._WS_in_func_def2957); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS310);


							}
							break;

						default:
							goto loop205;
						}
					}

					loop205:
						;

					} finally { DebugExitSubRule(205); }

					DebugLocation(378, 88);
					// SugarCpp.g:378:88: ( NEWLINE )+
					int cnt206=0;
					try { DebugEnterSubRule(206);
					while (true)
					{
						int alt206=2;
						try { DebugEnterDecision(206, false);
						int LA206_0 = input.LA(1);

						if ((LA206_0==NEWLINE))
						{
							alt206 = 1;
						}


						} finally { DebugExitDecision(206); }
						switch (alt206)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:378:88: NEWLINE
							{
							DebugLocation(378, 88);
							NEWLINE311=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2960); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE311);


							}
							break;

						default:
							if (cnt206 >= 1)
								goto loop206;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee206 = new EarlyExitException( 206, input );
							DebugRecognitionException(eee206);
							throw eee206;
						}
						cnt206++;
					}
					loop206:
						;

					} finally { DebugExitSubRule(206); }

					DebugLocation(378, 97);
					INDENT312=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2963); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT312);

					DebugLocation(378, 104);
					// SugarCpp.g:378:104: ( NEWLINE )*
					try { DebugEnterSubRule(207);
					while (true)
					{
						int alt207=2;
						try { DebugEnterDecision(207, false);
						int LA207_0 = input.LA(1);

						if ((LA207_0==NEWLINE))
						{
							alt207 = 1;
						}


						} finally { DebugExitDecision(207); }
						switch ( alt207 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:378:104: NEWLINE
							{
							DebugLocation(378, 104);
							NEWLINE313=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2965); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE313);


							}
							break;

						default:
							goto loop207;
						}
					}

					loop207:
						;

					} finally { DebugExitSubRule(207); }

					DebugLocation(378, 113);
					// SugarCpp.g:378:113: ( match_item ( WS )* ( NEWLINE )+ )+
					int cnt210=0;
					try { DebugEnterSubRule(210);
					while (true)
					{
						int alt210=2;
						try { DebugEnterDecision(210, false);
						int LA210_0 = input.LA(1);

						if ((LA210_0==182))
						{
							alt210 = 1;
						}


						} finally { DebugExitDecision(210); }
						switch (alt210)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:378:114: match_item ( WS )* ( NEWLINE )+
							{
							DebugLocation(378, 114);
							PushFollow(Follow._match_item_in_func_def2969);
							match_item314=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item314.Tree);
							DebugLocation(378, 125);
							// SugarCpp.g:378:125: ( WS )*
							try { DebugEnterSubRule(208);
							while (true)
							{
								int alt208=2;
								try { DebugEnterDecision(208, false);
								int LA208_0 = input.LA(1);

								if ((LA208_0==WS))
								{
									alt208 = 1;
								}


								} finally { DebugExitDecision(208); }
								switch ( alt208 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:378:125: WS
									{
									DebugLocation(378, 125);
									WS315=(IToken)Match(input,WS,Follow._WS_in_func_def2971); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS315);


									}
									break;

								default:
									goto loop208;
								}
							}

							loop208:
								;

							} finally { DebugExitSubRule(208); }

							DebugLocation(378, 129);
							// SugarCpp.g:378:129: ( NEWLINE )+
							int cnt209=0;
							try { DebugEnterSubRule(209);
							while (true)
							{
								int alt209=2;
								try { DebugEnterDecision(209, false);
								int LA209_0 = input.LA(1);

								if ((LA209_0==NEWLINE))
								{
									alt209 = 1;
								}


								} finally { DebugExitDecision(209); }
								switch (alt209)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:378:129: NEWLINE
									{
									DebugLocation(378, 129);
									NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2974); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE316);


									}
									break;

								default:
									if (cnt209 >= 1)
										goto loop209;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee209 = new EarlyExitException( 209, input );
									DebugRecognitionException(eee209);
									throw eee209;
								}
								cnt209++;
							}
							loop209:
								;

							} finally { DebugExitSubRule(209); }


							}
							break;

						default:
							if (cnt210 >= 1)
								goto loop210;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee210 = new EarlyExitException( 210, input );
							DebugRecognitionException(eee210);
							throw eee210;
						}
						cnt210++;
					}
					loop210:
						;

					} finally { DebugExitSubRule(210); }

					DebugLocation(378, 140);
					DEDENT317=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2979); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT317);



					{
					// AST REWRITE
					// elements: func_args, generic_parameter_ident, 163, func_type, attribute, 178, 186, func_name, match_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:147: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(378, 150);
						// SugarCpp.g:378:150: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 152);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(378, 161);
						// SugarCpp.g:378:161: ( 'public' )?
						if (stream_163.HasNext)
						{
							DebugLocation(378, 161);
							adaptor.AddChild(root_1, stream_163.NextNode());

						}
						stream_163.Reset();
						DebugLocation(378, 171);
						// SugarCpp.g:378:171: ( 'virtual' )?
						if (stream_178.HasNext)
						{
							DebugLocation(378, 171);
							adaptor.AddChild(root_1, stream_178.NextNode());

						}
						stream_178.Reset();
						DebugLocation(378, 182);
						// SugarCpp.g:378:182: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(378, 182);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(378, 193);
						// SugarCpp.g:378:193: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(378, 193);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(378, 204);
						// SugarCpp.g:378:204: ( '~' )?
						if (stream_186.HasNext)
						{
							DebugLocation(378, 204);
							adaptor.AddChild(root_1, stream_186.NextNode());

						}
						stream_186.Reset();
						DebugLocation(378, 209);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(378, 219);
						// SugarCpp.g:378:219: ( generic_parameter_ident )?
						if (stream_generic_parameter_ident.HasNext)
						{
							DebugLocation(378, 219);
							adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

						}
						stream_generic_parameter_ident.Reset();
						DebugLocation(378, 244);
						// SugarCpp.g:378:244: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(378, 244);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(378, 255);
						// SugarCpp.g:378:255: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 257);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(378, 268);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(378, 268);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(211); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:380:80: 
				{

				{
				// AST REWRITE
				// elements: 178, func_type, func_name, func_args, attribute, 163, generic_parameter_ident, 186
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:80: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare )
				{
					DebugLocation(380, 83);
					// SugarCpp.g:380:83: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(380, 94);
					// SugarCpp.g:380:94: ( 'public' )?
					if (stream_163.HasNext)
					{
						DebugLocation(380, 94);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(380, 104);
					// SugarCpp.g:380:104: ( 'virtual' )?
					if (stream_178.HasNext)
					{
						DebugLocation(380, 104);
						adaptor.AddChild(root_1, stream_178.NextNode());

					}
					stream_178.Reset();
					DebugLocation(380, 115);
					// SugarCpp.g:380:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(380, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(380, 126);
					// SugarCpp.g:380:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(380, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(380, 137);
					// SugarCpp.g:380:137: ( '~' )?
					if (stream_186.HasNext)
					{
						DebugLocation(380, 137);
						adaptor.AddChild(root_1, stream_186.NextNode());

					}
					stream_186.Reset();
					DebugLocation(380, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(380, 152);
					// SugarCpp.g:380:152: ( generic_parameter_ident )?
					if (stream_generic_parameter_ident.HasNext)
					{
						DebugLocation(380, 152);
						adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

					}
					stream_generic_parameter_ident.Reset();
					DebugLocation(380, 177);
					// SugarCpp.g:380:177: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(380, 177);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(380, 188);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(Func_Declare, "Func_Declare"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 31);
			LeaveRule("func_def", 31);
			LeaveRule_func_def();
		}
		DebugLocation(382, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:384:1: stmt_block_item : ( stmt_complex ( WS )* ( NEWLINE )+ -> stmt_complex | stmt_simple ( WS )* ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 32);
		TraceIn("stmt_block_item", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS319 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken WS322 = default(IToken);
		IToken NEWLINE323 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken NEWLINE325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS319_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree WS322_tree = default(CommonTree);
		CommonTree NEWLINE323_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		CommonTree NEWLINE325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(384, 1);
		try
		{
			// SugarCpp.g:385:2: ( stmt_complex ( WS )* ( NEWLINE )+ -> stmt_complex | stmt_simple ( WS )* ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt219=2;
			try { DebugEnterDecision(219, false);
			int LA219_0 = input.LA(1);

			if ((LA219_0==143||(LA219_0>=148 && LA219_0<=150)||LA219_0==155||LA219_0==157||LA219_0==168||LA219_0==173||(LA219_0>=175 && LA219_0<=176)||LA219_0==181))
			{
				alt219 = 1;
			}
			else if ((LA219_0==IDENT||LA219_0==86||LA219_0==91||LA219_0==93||LA219_0==95||(LA219_0>=97 && LA219_0<=98)||(LA219_0>=101 && LA219_0<=102)||LA219_0==131||LA219_0==161||LA219_0==164||LA219_0==174||LA219_0==177||LA219_0==186))
			{
				alt219 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 219, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(219); }
			switch (alt219)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:385:4: stmt_complex ( WS )* ( NEWLINE )+
				{
				DebugLocation(385, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item3301);
				stmt_complex318=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex318.Tree);
				DebugLocation(385, 17);
				// SugarCpp.g:385:17: ( WS )*
				try { DebugEnterSubRule(213);
				while (true)
				{
					int alt213=2;
					try { DebugEnterDecision(213, false);
					int LA213_0 = input.LA(1);

					if ((LA213_0==WS))
					{
						alt213 = 1;
					}


					} finally { DebugExitDecision(213); }
					switch ( alt213 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:17: WS
						{
						DebugLocation(385, 17);
						WS319=(IToken)Match(input,WS,Follow._WS_in_stmt_block_item3303); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS319);


						}
						break;

					default:
						goto loop213;
					}
				}

				loop213:
					;

				} finally { DebugExitSubRule(213); }

				DebugLocation(385, 21);
				// SugarCpp.g:385:21: ( NEWLINE )+
				int cnt214=0;
				try { DebugEnterSubRule(214);
				while (true)
				{
					int alt214=2;
					try { DebugEnterDecision(214, false);
					int LA214_0 = input.LA(1);

					if ((LA214_0==NEWLINE))
					{
						alt214 = 1;
					}


					} finally { DebugExitDecision(214); }
					switch (alt214)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:21: NEWLINE
						{
						DebugLocation(385, 21);
						NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item3306); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE320);


						}
						break;

					default:
						if (cnt214 >= 1)
							goto loop214;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee214 = new EarlyExitException( 214, input );
						DebugRecognitionException(eee214);
						throw eee214;
					}
					cnt214++;
				}
				loop214:
					;

				} finally { DebugExitSubRule(214); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:30: -> stmt_complex
				{
					DebugLocation(385, 33);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:386:4: stmt_simple ( WS )* ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(386, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item3316);
				stmt_simple321=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple321.Tree);
				DebugLocation(386, 16);
				// SugarCpp.g:386:16: ( WS )*
				try { DebugEnterSubRule(215);
				while (true)
				{
					int alt215=2;
					try { DebugEnterDecision(215, false);
					int LA215_0 = input.LA(1);

					if ((LA215_0==WS))
					{
						alt215 = 1;
					}


					} finally { DebugExitDecision(215); }
					switch ( alt215 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:386:16: WS
						{
						DebugLocation(386, 16);
						WS322=(IToken)Match(input,WS,Follow._WS_in_stmt_block_item3318); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS322);


						}
						break;

					default:
						goto loop215;
					}
				}

				loop215:
					;

				} finally { DebugExitSubRule(215); }

				DebugLocation(386, 20);
				// SugarCpp.g:386:20: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt218=2;
				try { DebugEnterSubRule(218);
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==NEWLINE))
				{
					alt218 = 1;
				}
				else if ((LA218_0==114))
				{
					alt218 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:386:21: ( NEWLINE )+
					{
					DebugLocation(386, 21);
					// SugarCpp.g:386:21: ( NEWLINE )+
					int cnt216=0;
					try { DebugEnterSubRule(216);
					while (true)
					{
						int alt216=2;
						try { DebugEnterDecision(216, false);
						int LA216_0 = input.LA(1);

						if ((LA216_0==NEWLINE))
						{
							alt216 = 1;
						}


						} finally { DebugExitDecision(216); }
						switch (alt216)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:386:21: NEWLINE
							{
							DebugLocation(386, 21);
							NEWLINE323=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item3322); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE323);


							}
							break;

						default:
							if (cnt216 >= 1)
								goto loop216;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee216 = new EarlyExitException( 216, input );
							DebugRecognitionException(eee216);
							throw eee216;
						}
						cnt216++;
					}
					loop216:
						;

					} finally { DebugExitSubRule(216); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:386:32: ';' ( NEWLINE )*
					{
					DebugLocation(386, 32);
					char_literal324=(IToken)Match(input,114,Follow._114_in_stmt_block_item3327); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal324);

					DebugLocation(386, 36);
					// SugarCpp.g:386:36: ( NEWLINE )*
					try { DebugEnterSubRule(217);
					while (true)
					{
						int alt217=2;
						try { DebugEnterDecision(217, false);
						int LA217_0 = input.LA(1);

						if ((LA217_0==NEWLINE))
						{
							alt217 = 1;
						}


						} finally { DebugExitDecision(217); }
						switch ( alt217 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:386:36: NEWLINE
							{
							DebugLocation(386, 36);
							NEWLINE325=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item3329); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE325);


							}
							break;

						default:
							goto loop217;
						}
					}

					loop217:
						;

					} finally { DebugExitSubRule(217); }


					}
					break;

				}
				} finally { DebugExitSubRule(218); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:46: -> stmt_simple
				{
					DebugLocation(386, 49);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 32);
			LeaveRule("stmt_block_item", 32);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:389:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 33);
		TraceIn("stmt_block", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT326 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken DEDENT329 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT326_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree DEDENT329_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(390, 4);
			INDENT326=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block3346); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT326);

			DebugLocation(390, 11);
			// SugarCpp.g:390:11: ( NEWLINE )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==NEWLINE))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:11: NEWLINE
					{
					DebugLocation(390, 11);
					NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block3348); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE327);


					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }

			DebugLocation(390, 20);
			// SugarCpp.g:390:20: ( stmt_block_item )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==IDENT||LA221_0==86||LA221_0==91||LA221_0==93||LA221_0==95||(LA221_0>=97 && LA221_0<=98)||(LA221_0>=101 && LA221_0<=102)||LA221_0==131||LA221_0==143||(LA221_0>=148 && LA221_0<=150)||LA221_0==155||LA221_0==157||LA221_0==161||LA221_0==164||LA221_0==168||(LA221_0>=173 && LA221_0<=177)||LA221_0==181||LA221_0==186))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:20: stmt_block_item
					{
					DebugLocation(390, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block3351);
					stmt_block_item328=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item328.Tree);

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }

			DebugLocation(390, 37);
			DEDENT329=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block3354); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT329);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(390, 47);
				// SugarCpp.g:390:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(390, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(390, 60);
				// SugarCpp.g:390:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(390, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 33);
			LeaveRule("stmt_block", 33);
			LeaveRule_stmt_block();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:393:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 34);
		TraceIn("stmt", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex331 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(393, 1);
		try
		{
			// SugarCpp.g:394:2: ( stmt_simple | stmt_complex )
			int alt222=2;
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==IDENT||LA222_0==86||LA222_0==91||LA222_0==93||LA222_0==95||(LA222_0>=97 && LA222_0<=98)||(LA222_0>=101 && LA222_0<=102)||LA222_0==131||LA222_0==161||LA222_0==164||LA222_0==174||LA222_0==177||LA222_0==186))
			{
				alt222 = 1;
			}
			else if ((LA222_0==143||(LA222_0>=148 && LA222_0<=150)||LA222_0==155||LA222_0==157||LA222_0==168||LA222_0==173||(LA222_0>=175 && LA222_0<=176)||LA222_0==181))
			{
				alt222 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 222, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._stmt_simple_in_stmt3374);
				stmt_simple330=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple330.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:395:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._stmt_complex_in_stmt3379);
				stmt_complex331=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex331.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 34);
			LeaveRule("stmt", 34);
			LeaveRule_stmt();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:398:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 35);
		TraceIn("stmt_simple", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(398, 1);
		try
		{
			// SugarCpp.g:399:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:399:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(399, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple3390);
			stmt_expr332=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr332.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 35);
			LeaveRule("stmt_simple", 35);
			LeaveRule_stmt_simple();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:402:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 36);
		TraceIn("stmt_complex", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer338 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt223=6;
			try { DebugEnterDecision(223, false);
			switch (input.LA(1))
			{
			case 150:
			case 175:
				{
				alt223 = 1;
				}
				break;
			case 149:
			case 155:
				{
				alt223 = 2;
				}
				break;
			case 157:
			case 176:
			case 181:
				{
				alt223 = 3;
				}
				break;
			case 173:
				{
				alt223 = 4;
				}
				break;
			case 168:
				{
				alt223 = 5;
				}
				break;
			case 143:
			case 148:
				{
				alt223 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 223, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:403:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex3401);
				stmt_if333=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if333.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:404:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex3406);
				stmt_for334=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for334.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:405:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex3411);
				stmt_while335=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while335.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:406:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex3416);
				stmt_try336=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try336.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:407:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(407, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex3421);
				stmt_switch337=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch337.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:408:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex3426);
				stmt_defer338=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer338.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 36);
			LeaveRule("stmt_complex", 36);
			LeaveRule_stmt_complex();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:411:1: stmt_expr : (a= stmt_expr_item -> $a) ( ( WS )* 'if' ( WS )* expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'unless' ( WS )* expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'while' ( WS )* expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'until' ( WS )* expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 37);
		TraceIn("stmt_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS339 = default(IToken);
		IToken string_literal340 = default(IToken);
		IToken WS341 = default(IToken);
		IToken WS343 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken WS345 = default(IToken);
		IToken WS347 = default(IToken);
		IToken string_literal348 = default(IToken);
		IToken WS349 = default(IToken);
		IToken WS351 = default(IToken);
		IToken string_literal352 = default(IToken);
		IToken WS353 = default(IToken);
		IToken WS355 = default(IToken);
		IToken string_literal356 = default(IToken);
		IToken WS357 = default(IToken);
		IToken WS359 = default(IToken);
		IToken char_literal360 = default(IToken);
		IToken WS361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr350 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS339_tree = default(CommonTree);
		CommonTree string_literal340_tree = default(CommonTree);
		CommonTree WS341_tree = default(CommonTree);
		CommonTree WS343_tree = default(CommonTree);
		CommonTree string_literal344_tree = default(CommonTree);
		CommonTree WS345_tree = default(CommonTree);
		CommonTree WS347_tree = default(CommonTree);
		CommonTree string_literal348_tree = default(CommonTree);
		CommonTree WS349_tree = default(CommonTree);
		CommonTree WS351_tree = default(CommonTree);
		CommonTree string_literal352_tree = default(CommonTree);
		CommonTree WS353_tree = default(CommonTree);
		CommonTree WS355_tree = default(CommonTree);
		CommonTree string_literal356_tree = default(CommonTree);
		CommonTree WS357_tree = default(CommonTree);
		CommonTree WS359_tree = default(CommonTree);
		CommonTree char_literal360_tree = default(CommonTree);
		CommonTree WS361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( (a= stmt_expr_item -> $a) ( ( WS )* 'if' ( WS )* expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'unless' ( WS )* expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'while' ( WS )* expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'until' ( WS )* expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:412:4: (a= stmt_expr_item -> $a) ( ( WS )* 'if' ( WS )* expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'unless' ( WS )* expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'while' ( WS )* expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'until' ( WS )* expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(412, 4);
			// SugarCpp.g:412:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:412:5: a= stmt_expr_item
			{
			DebugLocation(412, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr3440);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 412:22: -> $a
			{
				DebugLocation(412, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(412, 29);
			// SugarCpp.g:412:29: ( ( WS )* 'if' ( WS )* expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'unless' ( WS )* expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'while' ( WS )* expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'until' ( WS )* expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(237);
			while (true)
			{
				int alt237=6;
				try { DebugEnterDecision(237, false);
				try
				{
					alt237 = dfa237.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(237); }
				switch ( alt237 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:412:31: ( WS )* 'if' ( WS )* expr
					{
					DebugLocation(412, 31);
					// SugarCpp.g:412:31: ( WS )*
					try { DebugEnterSubRule(224);
					while (true)
					{
						int alt224=2;
						try { DebugEnterDecision(224, false);
						int LA224_0 = input.LA(1);

						if ((LA224_0==WS))
						{
							alt224 = 1;
						}


						} finally { DebugExitDecision(224); }
						switch ( alt224 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:412:31: WS
							{
							DebugLocation(412, 31);
							WS339=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3450); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS339);


							}
							break;

						default:
							goto loop224;
						}
					}

					loop224:
						;

					} finally { DebugExitSubRule(224); }

					DebugLocation(412, 35);
					string_literal340=(IToken)Match(input,150,Follow._150_in_stmt_expr3453); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_150.Add(string_literal340);

					DebugLocation(412, 40);
					// SugarCpp.g:412:40: ( WS )*
					try { DebugEnterSubRule(225);
					while (true)
					{
						int alt225=2;
						try { DebugEnterDecision(225, false);
						int LA225_0 = input.LA(1);

						if ((LA225_0==WS))
						{
							alt225 = 1;
						}


						} finally { DebugExitDecision(225); }
						switch ( alt225 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:412:40: WS
							{
							DebugLocation(412, 40);
							WS341=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3455); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS341);


							}
							break;

						default:
							goto loop225;
						}
					}

					loop225:
						;

					} finally { DebugExitSubRule(225); }

					DebugLocation(412, 44);
					PushFollow(Follow._expr_in_stmt_expr3458);
					expr342=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr342.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:49: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(412, 52);
						// SugarCpp.g:412:52: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(412, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(412, 67);
						// SugarCpp.g:412:67: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 69);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(412, 81);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:413:13: ( WS )* 'unless' ( WS )* expr
					{
					DebugLocation(413, 13);
					// SugarCpp.g:413:13: ( WS )*
					try { DebugEnterSubRule(226);
					while (true)
					{
						int alt226=2;
						try { DebugEnterDecision(226, false);
						int LA226_0 = input.LA(1);

						if ((LA226_0==WS))
						{
							alt226 = 1;
						}


						} finally { DebugExitDecision(226); }
						switch ( alt226 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:413:13: WS
							{
							DebugLocation(413, 13);
							WS343=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3487); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS343);


							}
							break;

						default:
							goto loop226;
						}
					}

					loop226:
						;

					} finally { DebugExitSubRule(226); }

					DebugLocation(413, 17);
					string_literal344=(IToken)Match(input,175,Follow._175_in_stmt_expr3490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_175.Add(string_literal344);

					DebugLocation(413, 26);
					// SugarCpp.g:413:26: ( WS )*
					try { DebugEnterSubRule(227);
					while (true)
					{
						int alt227=2;
						try { DebugEnterDecision(227, false);
						int LA227_0 = input.LA(1);

						if ((LA227_0==WS))
						{
							alt227 = 1;
						}


						} finally { DebugExitDecision(227); }
						switch ( alt227 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:413:26: WS
							{
							DebugLocation(413, 26);
							WS345=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3492); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS345);


							}
							break;

						default:
							goto loop227;
						}
					}

					loop227:
						;

					} finally { DebugExitSubRule(227); }

					DebugLocation(413, 30);
					PushFollow(Follow._expr_in_stmt_expr3495);
					expr346=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr346.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 413:35: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(413, 38);
						// SugarCpp.g:413:38: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(413, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(413, 57);
						// SugarCpp.g:413:57: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 59);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(413, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:414:13: ( WS )* 'while' ( WS )* expr
					{
					DebugLocation(414, 13);
					// SugarCpp.g:414:13: ( WS )*
					try { DebugEnterSubRule(228);
					while (true)
					{
						int alt228=2;
						try { DebugEnterDecision(228, false);
						int LA228_0 = input.LA(1);

						if ((LA228_0==WS))
						{
							alt228 = 1;
						}


						} finally { DebugExitDecision(228); }
						switch ( alt228 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:13: WS
							{
							DebugLocation(414, 13);
							WS347=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3524); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS347);


							}
							break;

						default:
							goto loop228;
						}
					}

					loop228:
						;

					} finally { DebugExitSubRule(228); }

					DebugLocation(414, 17);
					string_literal348=(IToken)Match(input,181,Follow._181_in_stmt_expr3527); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_181.Add(string_literal348);

					DebugLocation(414, 25);
					// SugarCpp.g:414:25: ( WS )*
					try { DebugEnterSubRule(229);
					while (true)
					{
						int alt229=2;
						try { DebugEnterDecision(229, false);
						int LA229_0 = input.LA(1);

						if ((LA229_0==WS))
						{
							alt229 = 1;
						}


						} finally { DebugExitDecision(229); }
						switch ( alt229 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:25: WS
							{
							DebugLocation(414, 25);
							WS349=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3529); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS349);


							}
							break;

						default:
							goto loop229;
						}
					}

					loop229:
						;

					} finally { DebugExitSubRule(229); }

					DebugLocation(414, 29);
					PushFollow(Follow._expr_in_stmt_expr3532);
					expr350=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr350.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 414:34: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(414, 37);
						// SugarCpp.g:414:37: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(414, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(414, 50);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(414, 55);
						// SugarCpp.g:414:55: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(414, 57);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(414, 69);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:415:13: ( WS )* 'until' ( WS )* expr
					{
					DebugLocation(415, 13);
					// SugarCpp.g:415:13: ( WS )*
					try { DebugEnterSubRule(230);
					while (true)
					{
						int alt230=2;
						try { DebugEnterDecision(230, false);
						int LA230_0 = input.LA(1);

						if ((LA230_0==WS))
						{
							alt230 = 1;
						}


						} finally { DebugExitDecision(230); }
						switch ( alt230 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:415:13: WS
							{
							DebugLocation(415, 13);
							WS351=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3561); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS351);


							}
							break;

						default:
							goto loop230;
						}
					}

					loop230:
						;

					} finally { DebugExitSubRule(230); }

					DebugLocation(415, 17);
					string_literal352=(IToken)Match(input,176,Follow._176_in_stmt_expr3564); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(string_literal352);

					DebugLocation(415, 25);
					// SugarCpp.g:415:25: ( WS )*
					try { DebugEnterSubRule(231);
					while (true)
					{
						int alt231=2;
						try { DebugEnterDecision(231, false);
						int LA231_0 = input.LA(1);

						if ((LA231_0==WS))
						{
							alt231 = 1;
						}


						} finally { DebugExitDecision(231); }
						switch ( alt231 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:415:25: WS
							{
							DebugLocation(415, 25);
							WS353=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3566); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS353);


							}
							break;

						default:
							goto loop231;
						}
					}

					loop231:
						;

					} finally { DebugExitSubRule(231); }

					DebugLocation(415, 29);
					PushFollow(Follow._expr_in_stmt_expr3569);
					expr354=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr354.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 415:34: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(415, 37);
						// SugarCpp.g:415:37: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(415, 50);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(415, 55);
						// SugarCpp.g:415:55: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 57);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(415, 69);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:416:13: ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )*
					{
					DebugLocation(416, 13);
					// SugarCpp.g:416:13: ( WS )*
					try { DebugEnterSubRule(232);
					while (true)
					{
						int alt232=2;
						try { DebugEnterDecision(232, false);
						int LA232_0 = input.LA(1);

						if ((LA232_0==WS))
						{
							alt232 = 1;
						}


						} finally { DebugExitDecision(232); }
						switch ( alt232 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:416:13: WS
							{
							DebugLocation(416, 13);
							WS355=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3598); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS355);


							}
							break;

						default:
							goto loop232;
						}
					}

					loop232:
						;

					} finally { DebugExitSubRule(232); }

					DebugLocation(416, 17);
					string_literal356=(IToken)Match(input,149,Follow._149_in_stmt_expr3601); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_149.Add(string_literal356);

					DebugLocation(416, 23);
					// SugarCpp.g:416:23: ( WS )*
					try { DebugEnterSubRule(233);
					while (true)
					{
						int alt233=2;
						try { DebugEnterDecision(233, false);
						int LA233_0 = input.LA(1);

						if ((LA233_0==WS))
						{
							alt233 = 1;
						}


						} finally { DebugExitDecision(233); }
						switch ( alt233 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:416:23: WS
							{
							DebugLocation(416, 23);
							WS357=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3603); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS357);


							}
							break;

						default:
							goto loop233;
						}
					}

					loop233:
						;

					} finally { DebugExitSubRule(233); }

					DebugLocation(416, 27);
					PushFollow(Follow._for_item_in_stmt_expr3606);
					for_item358=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item358.Tree);
					DebugLocation(416, 36);
					// SugarCpp.g:416:36: ( ( WS )* ',' ( WS )* for_item )*
					try { DebugEnterSubRule(236);
					while (true)
					{
						int alt236=2;
						try { DebugEnterDecision(236, false);
						try
						{
							alt236 = dfa236.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(236); }
						switch ( alt236 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:416:37: ( WS )* ',' ( WS )* for_item
							{
							DebugLocation(416, 37);
							// SugarCpp.g:416:37: ( WS )*
							try { DebugEnterSubRule(234);
							while (true)
							{
								int alt234=2;
								try { DebugEnterDecision(234, false);
								int LA234_0 = input.LA(1);

								if ((LA234_0==WS))
								{
									alt234 = 1;
								}


								} finally { DebugExitDecision(234); }
								switch ( alt234 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:416:37: WS
									{
									DebugLocation(416, 37);
									WS359=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3609); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS359);


									}
									break;

								default:
									goto loop234;
								}
							}

							loop234:
								;

							} finally { DebugExitSubRule(234); }

							DebugLocation(416, 41);
							char_literal360=(IToken)Match(input,100,Follow._100_in_stmt_expr3612); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal360);

							DebugLocation(416, 45);
							// SugarCpp.g:416:45: ( WS )*
							try { DebugEnterSubRule(235);
							while (true)
							{
								int alt235=2;
								try { DebugEnterDecision(235, false);
								int LA235_0 = input.LA(1);

								if ((LA235_0==WS))
								{
									alt235 = 1;
								}


								} finally { DebugExitDecision(235); }
								switch ( alt235 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:416:45: WS
									{
									DebugLocation(416, 45);
									WS361=(IToken)Match(input,WS,Follow._WS_in_stmt_expr3614); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS361);


									}
									break;

								default:
									goto loop235;
								}
							}

							loop235:
								;

							} finally { DebugExitSubRule(235); }

							DebugLocation(416, 49);
							PushFollow(Follow._for_item_in_stmt_expr3617);
							for_item362=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item362.Tree);

							}
							break;

						default:
							goto loop236;
						}
					}

					loop236:
						;

					} finally { DebugExitSubRule(236); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 416:60: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(416, 63);
						// SugarCpp.g:416:63: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(416, 65);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(416, 74);
						// SugarCpp.g:416:74: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(416, 74);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(416, 84);
						// SugarCpp.g:416:84: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(416, 86);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(416, 98);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop237;
				}
			}

			loop237:
				;

			} finally { DebugExitSubRule(237); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 37);
			LeaveRule("stmt_expr", 37);
			LeaveRule_stmt_expr();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:420:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 38);
		TraceIn("stmt_expr_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc363 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(420, 1);
		try
		{
			// SugarCpp.g:421:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt238=5;
			try { DebugEnterDecision(238, false);
			try
			{
				alt238 = dfa238.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(238); }
			switch (alt238)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:421:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(421, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item3659);
				stmt_alloc363=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc363.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:422:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(422, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item3664);
				stmt_return364=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return364.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:423:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(423, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item3669);
				stmt_using365=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using365.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:424:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(424, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item3674);
				stmt_typedef366=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef366.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:425:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(425, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item3679);
				stmt_modify367=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify367.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 38);
			LeaveRule("stmt_expr_item", 38);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:428:1: stmt_defer : ( 'defer' ( WS )* stmt -> ^( Stmt_Defer stmt ) | 'finally' ( WS )* stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 39);
		TraceIn("stmt_defer", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal368 = default(IToken);
		IToken WS369 = default(IToken);
		IToken string_literal371 = default(IToken);
		IToken WS372 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt370 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt373 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal368_tree = default(CommonTree);
		CommonTree WS369_tree = default(CommonTree);
		CommonTree string_literal371_tree = default(CommonTree);
		CommonTree WS372_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( 'defer' ( WS )* stmt -> ^( Stmt_Defer stmt ) | 'finally' ( WS )* stmt -> ^( Stmt_Finally stmt ) )
			int alt241=2;
			try { DebugEnterDecision(241, false);
			int LA241_0 = input.LA(1);

			if ((LA241_0==143))
			{
				alt241 = 1;
			}
			else if ((LA241_0==148))
			{
				alt241 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:429:4: 'defer' ( WS )* stmt
				{
				DebugLocation(429, 4);
				string_literal368=(IToken)Match(input,143,Follow._143_in_stmt_defer3690); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal368);

				DebugLocation(429, 12);
				// SugarCpp.g:429:12: ( WS )*
				try { DebugEnterSubRule(239);
				while (true)
				{
					int alt239=2;
					try { DebugEnterDecision(239, false);
					int LA239_0 = input.LA(1);

					if ((LA239_0==WS))
					{
						alt239 = 1;
					}


					} finally { DebugExitDecision(239); }
					switch ( alt239 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:429:12: WS
						{
						DebugLocation(429, 12);
						WS369=(IToken)Match(input,WS,Follow._WS_in_stmt_defer3692); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS369);


						}
						break;

					default:
						goto loop239;
					}
				}

				loop239:
					;

				} finally { DebugExitSubRule(239); }

				DebugLocation(429, 16);
				PushFollow(Follow._stmt_in_stmt_defer3695);
				stmt370=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt370.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 429:21: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(429, 24);
					// SugarCpp.g:429:24: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(429, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(429, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:430:4: 'finally' ( WS )* stmt
				{
				DebugLocation(430, 4);
				string_literal371=(IToken)Match(input,148,Follow._148_in_stmt_defer3708); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal371);

				DebugLocation(430, 14);
				// SugarCpp.g:430:14: ( WS )*
				try { DebugEnterSubRule(240);
				while (true)
				{
					int alt240=2;
					try { DebugEnterDecision(240, false);
					int LA240_0 = input.LA(1);

					if ((LA240_0==WS))
					{
						alt240 = 1;
					}


					} finally { DebugExitDecision(240); }
					switch ( alt240 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:430:14: WS
						{
						DebugLocation(430, 14);
						WS372=(IToken)Match(input,WS,Follow._WS_in_stmt_defer3710); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS372);


						}
						break;

					default:
						goto loop240;
					}
				}

				loop240:
					;

				} finally { DebugExitSubRule(240); }

				DebugLocation(430, 18);
				PushFollow(Follow._stmt_in_stmt_defer3713);
				stmt373=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt373.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 430:23: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(430, 26);
					// SugarCpp.g:430:26: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(430, 28);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(430, 41);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 39);
			LeaveRule("stmt_defer", 39);
			LeaveRule_stmt_defer();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:433:1: stmt_typedef : 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 40);
		TraceIn("stmt_typedef", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal374 = default(IToken);
		IToken WS375 = default(IToken);
		IToken WS377 = default(IToken);
		IToken char_literal378 = default(IToken);
		IToken WS379 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident376 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name380 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal374_tree = default(CommonTree);
		CommonTree WS375_tree = default(CommonTree);
		CommonTree WS377_tree = default(CommonTree);
		CommonTree char_literal378_tree = default(CommonTree);
		CommonTree WS379_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: 'typedef' ( WS )* ident ( WS )* '=' ( WS )* type_name
			{
			DebugLocation(434, 4);
			string_literal374=(IToken)Match(input,174,Follow._174_in_stmt_typedef3732); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(string_literal374);

			DebugLocation(434, 14);
			// SugarCpp.g:434:14: ( WS )*
			try { DebugEnterSubRule(242);
			while (true)
			{
				int alt242=2;
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==WS))
				{
					alt242 = 1;
				}


				} finally { DebugExitDecision(242); }
				switch ( alt242 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:14: WS
					{
					DebugLocation(434, 14);
					WS375=(IToken)Match(input,WS,Follow._WS_in_stmt_typedef3734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS375);


					}
					break;

				default:
					goto loop242;
				}
			}

			loop242:
				;

			} finally { DebugExitSubRule(242); }

			DebugLocation(434, 18);
			PushFollow(Follow._ident_in_stmt_typedef3737);
			ident376=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident376.Tree);
			DebugLocation(434, 24);
			// SugarCpp.g:434:24: ( WS )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=2;
				try { DebugEnterDecision(243, false);
				int LA243_0 = input.LA(1);

				if ((LA243_0==WS))
				{
					alt243 = 1;
				}


				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:24: WS
					{
					DebugLocation(434, 24);
					WS377=(IToken)Match(input,WS,Follow._WS_in_stmt_typedef3739); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS377);


					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }

			DebugLocation(434, 28);
			char_literal378=(IToken)Match(input,121,Follow._121_in_stmt_typedef3742); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal378);

			DebugLocation(434, 32);
			// SugarCpp.g:434:32: ( WS )*
			try { DebugEnterSubRule(244);
			while (true)
			{
				int alt244=2;
				try { DebugEnterDecision(244, false);
				int LA244_0 = input.LA(1);

				if ((LA244_0==WS))
				{
					alt244 = 1;
				}


				} finally { DebugExitDecision(244); }
				switch ( alt244 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:32: WS
					{
					DebugLocation(434, 32);
					WS379=(IToken)Match(input,WS,Follow._WS_in_stmt_typedef3744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS379);


					}
					break;

				default:
					goto loop244;
				}
			}

			loop244:
				;

			} finally { DebugExitSubRule(244); }

			DebugLocation(434, 36);
			PushFollow(Follow._type_name_in_stmt_typedef3747);
			type_name380=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name380.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 434:46: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(434, 49);
				// SugarCpp.g:434:49: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(434, 51);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(434, 64);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(434, 74);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 40);
			LeaveRule("stmt_typedef", 40);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:437:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 41);
		TraceIn("stmt_using_item", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal382 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal382_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(437, 36);
		try
		{
			// SugarCpp.g:437:16: ( ident | 'namespace' )
			int alt245=2;
			try { DebugEnterDecision(245, false);
			int LA245_0 = input.LA(1);

			if ((LA245_0==IDENT))
			{
				alt245 = 1;
			}
			else if ((LA245_0==159))
			{
				alt245 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:437:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(437, 18);
				PushFollow(Follow._ident_in_stmt_using_item3766);
				ident381=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident381.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:437:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(437, 26);
				string_literal382=(IToken)Match(input,159,Follow._159_in_stmt_using_item3770); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal382_tree = (CommonTree)adaptor.Create(string_literal382);
				adaptor.AddChild(root_0, string_literal382_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 41);
			LeaveRule("stmt_using_item", 41);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(437, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:438:1: stmt_using : 'using' ( ( WS )* stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 42);
		TraceIn("stmt_using", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal383 = default(IToken);
		IToken WS384 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item385 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal383_tree = default(CommonTree);
		CommonTree WS384_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( 'using' ( ( WS )* stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:439:4: 'using' ( ( WS )* stmt_using_item )*
			{
			DebugLocation(439, 4);
			string_literal383=(IToken)Match(input,177,Follow._177_in_stmt_using3778); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(string_literal383);

			DebugLocation(439, 12);
			// SugarCpp.g:439:12: ( ( WS )* stmt_using_item )*
			try { DebugEnterSubRule(247);
			while (true)
			{
				int alt247=2;
				try { DebugEnterDecision(247, false);
				try
				{
					alt247 = dfa247.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(247); }
				switch ( alt247 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:13: ( WS )* stmt_using_item
					{
					DebugLocation(439, 13);
					// SugarCpp.g:439:13: ( WS )*
					try { DebugEnterSubRule(246);
					while (true)
					{
						int alt246=2;
						try { DebugEnterDecision(246, false);
						int LA246_0 = input.LA(1);

						if ((LA246_0==WS))
						{
							alt246 = 1;
						}


						} finally { DebugExitDecision(246); }
						switch ( alt246 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:13: WS
							{
							DebugLocation(439, 13);
							WS384=(IToken)Match(input,WS,Follow._WS_in_stmt_using3781); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS384);


							}
							break;

						default:
							goto loop246;
						}
					}

					loop246:
						;

					} finally { DebugExitSubRule(246); }

					DebugLocation(439, 17);
					PushFollow(Follow._stmt_using_item_in_stmt_using3784);
					stmt_using_item385=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item385.Tree);

					}
					break;

				default:
					goto loop247;
				}
			}

			loop247:
				;

			} finally { DebugExitSubRule(247); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 439:35: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(439, 38);
				// SugarCpp.g:439:38: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(439, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(439, 51);
				// SugarCpp.g:439:51: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(439, 51);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 42);
			LeaveRule("stmt_using", 42);
			LeaveRule_stmt_using();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:442:1: stmt_return : 'return' ( ( WS )* expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 43);
		TraceIn("stmt_return", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal386 = default(IToken);
		IToken WS387 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal386_tree = default(CommonTree);
		CommonTree WS387_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(442, 1);
		try
		{
			// SugarCpp.g:443:2: ( 'return' ( ( WS )* expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:443:4: 'return' ( ( WS )* expr )?
			{
			DebugLocation(443, 4);
			string_literal386=(IToken)Match(input,164,Follow._164_in_stmt_return3806); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_164.Add(string_literal386);

			DebugLocation(443, 13);
			// SugarCpp.g:443:13: ( ( WS )* expr )?
			int alt249=2;
			try { DebugEnterSubRule(249);
			try { DebugEnterDecision(249, false);
			try
			{
				alt249 = dfa249.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:443:14: ( WS )* expr
				{
				DebugLocation(443, 14);
				// SugarCpp.g:443:14: ( WS )*
				try { DebugEnterSubRule(248);
				while (true)
				{
					int alt248=2;
					try { DebugEnterDecision(248, false);
					int LA248_0 = input.LA(1);

					if ((LA248_0==WS))
					{
						alt248 = 1;
					}


					} finally { DebugExitDecision(248); }
					switch ( alt248 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:443:14: WS
						{
						DebugLocation(443, 14);
						WS387=(IToken)Match(input,WS,Follow._WS_in_stmt_return3809); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS387);


						}
						break;

					default:
						goto loop248;
					}
				}

				loop248:
					;

				} finally { DebugExitSubRule(248); }

				DebugLocation(443, 18);
				PushFollow(Follow._expr_in_stmt_return3812);
				expr388=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr388.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(249); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 443:25: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(443, 28);
				// SugarCpp.g:443:28: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(443, 30);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(443, 42);
				// SugarCpp.g:443:42: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(443, 42);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 43);
			LeaveRule("stmt_return", 43);
			LeaveRule_stmt_return();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:446:1: inline_stmt_block : stmt_simple ( ( WS )* ';' ( WS )* stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 44);
		TraceIn("inline_stmt_block", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS390 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken WS392 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple389 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple393 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS390_tree = default(CommonTree);
		CommonTree char_literal391_tree = default(CommonTree);
		CommonTree WS392_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( stmt_simple ( ( WS )* ';' ( WS )* stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:447:4: stmt_simple ( ( WS )* ';' ( WS )* stmt_simple )*
			{
			DebugLocation(447, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block3834);
			stmt_simple389=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple389.Tree);
			DebugLocation(447, 16);
			// SugarCpp.g:447:16: ( ( WS )* ';' ( WS )* stmt_simple )*
			try { DebugEnterSubRule(252);
			while (true)
			{
				int alt252=2;
				try { DebugEnterDecision(252, false);
				try
				{
					alt252 = dfa252.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(252); }
				switch ( alt252 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:17: ( WS )* ';' ( WS )* stmt_simple
					{
					DebugLocation(447, 17);
					// SugarCpp.g:447:17: ( WS )*
					try { DebugEnterSubRule(250);
					while (true)
					{
						int alt250=2;
						try { DebugEnterDecision(250, false);
						int LA250_0 = input.LA(1);

						if ((LA250_0==WS))
						{
							alt250 = 1;
						}


						} finally { DebugExitDecision(250); }
						switch ( alt250 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:447:17: WS
							{
							DebugLocation(447, 17);
							WS390=(IToken)Match(input,WS,Follow._WS_in_inline_stmt_block3837); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS390);


							}
							break;

						default:
							goto loop250;
						}
					}

					loop250:
						;

					} finally { DebugExitSubRule(250); }

					DebugLocation(447, 21);
					char_literal391=(IToken)Match(input,114,Follow._114_in_inline_stmt_block3840); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal391);

					DebugLocation(447, 25);
					// SugarCpp.g:447:25: ( WS )*
					try { DebugEnterSubRule(251);
					while (true)
					{
						int alt251=2;
						try { DebugEnterDecision(251, false);
						int LA251_0 = input.LA(1);

						if ((LA251_0==WS))
						{
							alt251 = 1;
						}


						} finally { DebugExitDecision(251); }
						switch ( alt251 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:447:25: WS
							{
							DebugLocation(447, 25);
							WS392=(IToken)Match(input,WS,Follow._WS_in_inline_stmt_block3842); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS392);


							}
							break;

						default:
							goto loop251;
						}
					}

					loop251:
						;

					} finally { DebugExitSubRule(251); }

					DebugLocation(447, 29);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block3845);
					stmt_simple393=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple393.Tree);

					}
					break;

				default:
					goto loop252;
				}
			}

			loop252:
				;

			} finally { DebugExitSubRule(252); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 447:43: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(447, 46);
				// SugarCpp.g:447:46: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(447, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(447, 59);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(447, 59);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 44);
			LeaveRule("inline_stmt_block", 44);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:450:1: stmt_if : ( 'if' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | ( WS )* 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 45);
		TraceIn("stmt_if", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal394 = default(IToken);
		IToken WS395 = default(IToken);
		IToken WS397 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken string_literal401 = default(IToken);
		IToken NEWLINE402 = default(IToken);
		IToken WS404 = default(IToken);
		IToken string_literal405 = default(IToken);
		IToken WS406 = default(IToken);
		IToken string_literal408 = default(IToken);
		IToken WS409 = default(IToken);
		IToken WS411 = default(IToken);
		IToken NEWLINE412 = default(IToken);
		IToken NEWLINE414 = default(IToken);
		IToken string_literal415 = default(IToken);
		IToken NEWLINE416 = default(IToken);
		IToken WS418 = default(IToken);
		IToken string_literal419 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block407 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block420 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal394_tree = default(CommonTree);
		CommonTree WS395_tree = default(CommonTree);
		CommonTree WS397_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree string_literal401_tree = default(CommonTree);
		CommonTree NEWLINE402_tree = default(CommonTree);
		CommonTree WS404_tree = default(CommonTree);
		CommonTree string_literal405_tree = default(CommonTree);
		CommonTree WS406_tree = default(CommonTree);
		CommonTree string_literal408_tree = default(CommonTree);
		CommonTree WS409_tree = default(CommonTree);
		CommonTree WS411_tree = default(CommonTree);
		CommonTree NEWLINE412_tree = default(CommonTree);
		CommonTree NEWLINE414_tree = default(CommonTree);
		CommonTree string_literal415_tree = default(CommonTree);
		CommonTree NEWLINE416_tree = default(CommonTree);
		CommonTree WS418_tree = default(CommonTree);
		CommonTree string_literal419_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( 'if' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | ( WS )* 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt270=2;
			try { DebugEnterDecision(270, false);
			int LA270_0 = input.LA(1);

			if ((LA270_0==150))
			{
				alt270 = 1;
			}
			else if ((LA270_0==175))
			{
				alt270 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 270, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(270); }
			switch (alt270)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:451:4: 'if' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(451, 4);
				string_literal394=(IToken)Match(input,150,Follow._150_in_stmt_if3867); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal394);

				DebugLocation(451, 9);
				// SugarCpp.g:451:9: ( WS )*
				try { DebugEnterSubRule(253);
				while (true)
				{
					int alt253=2;
					try { DebugEnterDecision(253, false);
					int LA253_0 = input.LA(1);

					if ((LA253_0==WS))
					{
						alt253 = 1;
					}


					} finally { DebugExitDecision(253); }
					switch ( alt253 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:451:9: WS
						{
						DebugLocation(451, 9);
						WS395=(IToken)Match(input,WS,Follow._WS_in_stmt_if3869); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS395);


						}
						break;

					default:
						goto loop253;
					}
				}

				loop253:
					;

				} finally { DebugExitSubRule(253); }

				DebugLocation(451, 13);
				PushFollow(Follow._expr_in_stmt_if3872);
				expr396=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr396.Tree);
				DebugLocation(451, 18);
				// SugarCpp.g:451:18: ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt261=2;
				try { DebugEnterSubRule(261);
				try { DebugEnterDecision(261, false);
				try
				{
					alt261 = dfa261.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(261); }
				switch (alt261)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:20: ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(451, 20);
					// SugarCpp.g:451:20: ( WS )*
					try { DebugEnterSubRule(254);
					while (true)
					{
						int alt254=2;
						try { DebugEnterDecision(254, false);
						int LA254_0 = input.LA(1);

						if ((LA254_0==WS))
						{
							alt254 = 1;
						}


						} finally { DebugExitDecision(254); }
						switch ( alt254 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:451:20: WS
							{
							DebugLocation(451, 20);
							WS397=(IToken)Match(input,WS,Follow._WS_in_stmt_if3876); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS397);


							}
							break;

						default:
							goto loop254;
						}
					}

					loop254:
						;

					} finally { DebugExitSubRule(254); }

					DebugLocation(451, 24);
					// SugarCpp.g:451:24: ( NEWLINE )+
					int cnt255=0;
					try { DebugEnterSubRule(255);
					while (true)
					{
						int alt255=2;
						try { DebugEnterDecision(255, false);
						int LA255_0 = input.LA(1);

						if ((LA255_0==NEWLINE))
						{
							alt255 = 1;
						}


						} finally { DebugExitDecision(255); }
						switch (alt255)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:451:24: NEWLINE
							{
							DebugLocation(451, 24);
							NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3879); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE398);


							}
							break;

						default:
							if (cnt255 >= 1)
								goto loop255;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee255 = new EarlyExitException( 255, input );
							DebugRecognitionException(eee255);
							throw eee255;
						}
						cnt255++;
					}
					loop255:
						;

					} finally { DebugExitSubRule(255); }

					DebugLocation(451, 33);
					PushFollow(Follow._stmt_block_in_stmt_if3882);
					stmt_block399=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block399.Tree);
					DebugLocation(451, 44);
					// SugarCpp.g:451:44: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt258=2;
					try { DebugEnterSubRule(258);
					try { DebugEnterDecision(258, false);
					try
					{
						alt258 = dfa258.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(258); }
					switch (alt258)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:451:45: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(451, 45);
						// SugarCpp.g:451:45: ( NEWLINE )*
						try { DebugEnterSubRule(256);
						while (true)
						{
							int alt256=2;
							try { DebugEnterDecision(256, false);
							int LA256_0 = input.LA(1);

							if ((LA256_0==NEWLINE))
							{
								alt256 = 1;
							}


							} finally { DebugExitDecision(256); }
							switch ( alt256 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:451:45: NEWLINE
								{
								DebugLocation(451, 45);
								NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3885); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE400);


								}
								break;

							default:
								goto loop256;
							}
						}

						loop256:
							;

						} finally { DebugExitSubRule(256); }

						DebugLocation(451, 54);
						string_literal401=(IToken)Match(input,145,Follow._145_in_stmt_if3888); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_145.Add(string_literal401);

						DebugLocation(451, 61);
						// SugarCpp.g:451:61: ( NEWLINE )+
						int cnt257=0;
						try { DebugEnterSubRule(257);
						while (true)
						{
							int alt257=2;
							try { DebugEnterDecision(257, false);
							int LA257_0 = input.LA(1);

							if ((LA257_0==NEWLINE))
							{
								alt257 = 1;
							}


							} finally { DebugExitDecision(257); }
							switch (alt257)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:451:61: NEWLINE
								{
								DebugLocation(451, 61);
								NEWLINE402=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3890); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE402);


								}
								break;

							default:
								if (cnt257 >= 1)
									goto loop257;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee257 = new EarlyExitException( 257, input );
								DebugRecognitionException(eee257);
								throw eee257;
							}
							cnt257++;
						}
						loop257:
							;

						} finally { DebugExitSubRule(257); }

						DebugLocation(451, 70);
						PushFollow(Follow._stmt_block_in_stmt_if3893);
						stmt_block403=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block403.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(258); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:83: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(451, 86);
						// SugarCpp.g:451:86: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 88);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(451, 96);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(451, 101);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(451, 112);
						// SugarCpp.g:451:112: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(451, 112);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:452:20: ( WS )* 'then' ( WS )* inline_stmt_block
					{
					DebugLocation(452, 20);
					// SugarCpp.g:452:20: ( WS )*
					try { DebugEnterSubRule(259);
					while (true)
					{
						int alt259=2;
						try { DebugEnterDecision(259, false);
						int LA259_0 = input.LA(1);

						if ((LA259_0==WS))
						{
							alt259 = 1;
						}


						} finally { DebugExitDecision(259); }
						switch ( alt259 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:452:20: WS
							{
							DebugLocation(452, 20);
							WS404=(IToken)Match(input,WS,Follow._WS_in_stmt_if3929); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS404);


							}
							break;

						default:
							goto loop259;
						}
					}

					loop259:
						;

					} finally { DebugExitSubRule(259); }

					DebugLocation(452, 24);
					string_literal405=(IToken)Match(input,169,Follow._169_in_stmt_if3932); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal405);

					DebugLocation(452, 31);
					// SugarCpp.g:452:31: ( WS )*
					try { DebugEnterSubRule(260);
					while (true)
					{
						int alt260=2;
						try { DebugEnterDecision(260, false);
						int LA260_0 = input.LA(1);

						if ((LA260_0==WS))
						{
							alt260 = 1;
						}


						} finally { DebugExitDecision(260); }
						switch ( alt260 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:452:31: WS
							{
							DebugLocation(452, 31);
							WS406=(IToken)Match(input,WS,Follow._WS_in_stmt_if3934); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS406);


							}
							break;

						default:
							goto loop260;
						}
					}

					loop260:
						;

					} finally { DebugExitSubRule(260); }

					DebugLocation(452, 35);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3937);
					inline_stmt_block407=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block407.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 452:53: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(452, 56);
						// SugarCpp.g:452:56: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(452, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(452, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(452, 71);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(261); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:454:4: 'unless' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | ( WS )* 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(454, 4);
				string_literal408=(IToken)Match(input,175,Follow._175_in_stmt_if3962); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(string_literal408);

				DebugLocation(454, 13);
				// SugarCpp.g:454:13: ( WS )*
				try { DebugEnterSubRule(262);
				while (true)
				{
					int alt262=2;
					try { DebugEnterDecision(262, false);
					int LA262_0 = input.LA(1);

					if ((LA262_0==WS))
					{
						alt262 = 1;
					}


					} finally { DebugExitDecision(262); }
					switch ( alt262 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:13: WS
						{
						DebugLocation(454, 13);
						WS409=(IToken)Match(input,WS,Follow._WS_in_stmt_if3964); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS409);


						}
						break;

					default:
						goto loop262;
					}
				}

				loop262:
					;

				} finally { DebugExitSubRule(262); }

				DebugLocation(454, 17);
				PushFollow(Follow._expr_in_stmt_if3967);
				expr410=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr410.Tree);
				DebugLocation(454, 22);
				// SugarCpp.g:454:22: ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | ( WS )* 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt269=2;
				try { DebugEnterSubRule(269);
				try { DebugEnterDecision(269, false);
				try
				{
					alt269 = dfa269.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(269); }
				switch (alt269)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:24: ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(454, 24);
					// SugarCpp.g:454:24: ( WS )*
					try { DebugEnterSubRule(263);
					while (true)
					{
						int alt263=2;
						try { DebugEnterDecision(263, false);
						int LA263_0 = input.LA(1);

						if ((LA263_0==WS))
						{
							alt263 = 1;
						}


						} finally { DebugExitDecision(263); }
						switch ( alt263 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:454:24: WS
							{
							DebugLocation(454, 24);
							WS411=(IToken)Match(input,WS,Follow._WS_in_stmt_if3971); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS411);


							}
							break;

						default:
							goto loop263;
						}
					}

					loop263:
						;

					} finally { DebugExitSubRule(263); }

					DebugLocation(454, 27);
					// SugarCpp.g:454:27: ( NEWLINE )+
					int cnt264=0;
					try { DebugEnterSubRule(264);
					while (true)
					{
						int alt264=2;
						try { DebugEnterDecision(264, false);
						int LA264_0 = input.LA(1);

						if ((LA264_0==NEWLINE))
						{
							alt264 = 1;
						}


						} finally { DebugExitDecision(264); }
						switch (alt264)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:454:27: NEWLINE
							{
							DebugLocation(454, 27);
							NEWLINE412=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3973); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE412);


							}
							break;

						default:
							if (cnt264 >= 1)
								goto loop264;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee264 = new EarlyExitException( 264, input );
							DebugRecognitionException(eee264);
							throw eee264;
						}
						cnt264++;
					}
					loop264:
						;

					} finally { DebugExitSubRule(264); }

					DebugLocation(454, 36);
					PushFollow(Follow._stmt_block_in_stmt_if3976);
					stmt_block413=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block413.Tree);
					DebugLocation(454, 47);
					// SugarCpp.g:454:47: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt267=2;
					try { DebugEnterSubRule(267);
					try { DebugEnterDecision(267, false);
					try
					{
						alt267 = dfa267.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(267); }
					switch (alt267)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:48: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(454, 48);
						// SugarCpp.g:454:48: ( NEWLINE )*
						try { DebugEnterSubRule(265);
						while (true)
						{
							int alt265=2;
							try { DebugEnterDecision(265, false);
							int LA265_0 = input.LA(1);

							if ((LA265_0==NEWLINE))
							{
								alt265 = 1;
							}


							} finally { DebugExitDecision(265); }
							switch ( alt265 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:454:48: NEWLINE
								{
								DebugLocation(454, 48);
								NEWLINE414=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3979); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE414);


								}
								break;

							default:
								goto loop265;
							}
						}

						loop265:
							;

						} finally { DebugExitSubRule(265); }

						DebugLocation(454, 57);
						string_literal415=(IToken)Match(input,145,Follow._145_in_stmt_if3982); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_145.Add(string_literal415);

						DebugLocation(454, 64);
						// SugarCpp.g:454:64: ( NEWLINE )+
						int cnt266=0;
						try { DebugEnterSubRule(266);
						while (true)
						{
							int alt266=2;
							try { DebugEnterDecision(266, false);
							int LA266_0 = input.LA(1);

							if ((LA266_0==NEWLINE))
							{
								alt266 = 1;
							}


							} finally { DebugExitDecision(266); }
							switch (alt266)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:454:64: NEWLINE
								{
								DebugLocation(454, 64);
								NEWLINE416=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3984); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE416);


								}
								break;

							default:
								if (cnt266 >= 1)
									goto loop266;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee266 = new EarlyExitException( 266, input );
								DebugRecognitionException(eee266);
								throw eee266;
							}
							cnt266++;
						}
						loop266:
							;

						} finally { DebugExitSubRule(266); }

						DebugLocation(454, 73);
						PushFollow(Follow._stmt_block_in_stmt_if3987);
						stmt_block417=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block417.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(267); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:86: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(454, 89);
						// SugarCpp.g:454:89: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 91);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(454, 103);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(454, 108);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(454, 119);
						// SugarCpp.g:454:119: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(454, 119);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:455:24: ( WS )* 'then' inline_stmt_block
					{
					DebugLocation(455, 24);
					// SugarCpp.g:455:24: ( WS )*
					try { DebugEnterSubRule(268);
					while (true)
					{
						int alt268=2;
						try { DebugEnterDecision(268, false);
						int LA268_0 = input.LA(1);

						if ((LA268_0==WS))
						{
							alt268 = 1;
						}


						} finally { DebugExitDecision(268); }
						switch ( alt268 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:455:24: WS
							{
							DebugLocation(455, 24);
							WS418=(IToken)Match(input,WS,Follow._WS_in_stmt_if4027); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS418);


							}
							break;

						default:
							goto loop268;
						}
					}

					loop268:
						;

					} finally { DebugExitSubRule(268); }

					DebugLocation(455, 28);
					string_literal419=(IToken)Match(input,169,Follow._169_in_stmt_if4030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal419);

					DebugLocation(455, 35);
					PushFollow(Follow._inline_stmt_block_in_stmt_if4032);
					inline_stmt_block420=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block420.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:53: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(455, 56);
						// SugarCpp.g:455:56: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(455, 70);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(455, 75);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(269); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 45);
			LeaveRule("stmt_if", 45);
			LeaveRule_stmt_if();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:459:1: stmt_while : ( 'while' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 46);
		TraceIn("stmt_while", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal421 = default(IToken);
		IToken WS422 = default(IToken);
		IToken WS424 = default(IToken);
		IToken NEWLINE425 = default(IToken);
		IToken WS427 = default(IToken);
		IToken string_literal428 = default(IToken);
		IToken WS429 = default(IToken);
		IToken string_literal431 = default(IToken);
		IToken WS433 = default(IToken);
		IToken NEWLINE434 = default(IToken);
		IToken WS436 = default(IToken);
		IToken string_literal437 = default(IToken);
		IToken WS438 = default(IToken);
		IToken string_literal440 = default(IToken);
		IToken WS441 = default(IToken);
		IToken WS443 = default(IToken);
		IToken NEWLINE444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr442 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal421_tree = default(CommonTree);
		CommonTree WS422_tree = default(CommonTree);
		CommonTree WS424_tree = default(CommonTree);
		CommonTree NEWLINE425_tree = default(CommonTree);
		CommonTree WS427_tree = default(CommonTree);
		CommonTree string_literal428_tree = default(CommonTree);
		CommonTree WS429_tree = default(CommonTree);
		CommonTree string_literal431_tree = default(CommonTree);
		CommonTree WS433_tree = default(CommonTree);
		CommonTree NEWLINE434_tree = default(CommonTree);
		CommonTree WS436_tree = default(CommonTree);
		CommonTree string_literal437_tree = default(CommonTree);
		CommonTree WS438_tree = default(CommonTree);
		CommonTree string_literal440_tree = default(CommonTree);
		CommonTree WS441_tree = default(CommonTree);
		CommonTree WS443_tree = default(CommonTree);
		CommonTree NEWLINE444_tree = default(CommonTree);
		RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(459, 1);
		try
		{
			// SugarCpp.g:460:2: ( 'while' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt286=3;
			try { DebugEnterDecision(286, false);
			switch (input.LA(1))
			{
			case 181:
				{
				alt286 = 1;
				}
				break;
			case 176:
				{
				alt286 = 2;
				}
				break;
			case 157:
				{
				alt286 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 286, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(286); }
			switch (alt286)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:460:4: 'while' ( WS )* expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(460, 4);
				string_literal421=(IToken)Match(input,181,Follow._181_in_stmt_while4067); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(string_literal421);

				DebugLocation(460, 12);
				// SugarCpp.g:460:12: ( WS )*
				try { DebugEnterSubRule(271);
				while (true)
				{
					int alt271=2;
					try { DebugEnterDecision(271, false);
					int LA271_0 = input.LA(1);

					if ((LA271_0==WS))
					{
						alt271 = 1;
					}


					} finally { DebugExitDecision(271); }
					switch ( alt271 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:460:12: WS
						{
						DebugLocation(460, 12);
						WS422=(IToken)Match(input,WS,Follow._WS_in_stmt_while4069); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS422);


						}
						break;

					default:
						goto loop271;
					}
				}

				loop271:
					;

				} finally { DebugExitSubRule(271); }

				DebugLocation(460, 16);
				PushFollow(Follow._expr_in_stmt_while4072);
				expr423=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr423.Tree);
				DebugLocation(460, 21);
				// SugarCpp.g:460:21: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt276=2;
				try { DebugEnterSubRule(276);
				try { DebugEnterDecision(276, false);
				try
				{
					alt276 = dfa276.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(276); }
				switch (alt276)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:460:23: ( WS )* ( NEWLINE )+ stmt_block
					{
					DebugLocation(460, 23);
					// SugarCpp.g:460:23: ( WS )*
					try { DebugEnterSubRule(272);
					while (true)
					{
						int alt272=2;
						try { DebugEnterDecision(272, false);
						int LA272_0 = input.LA(1);

						if ((LA272_0==WS))
						{
							alt272 = 1;
						}


						} finally { DebugExitDecision(272); }
						switch ( alt272 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:460:23: WS
							{
							DebugLocation(460, 23);
							WS424=(IToken)Match(input,WS,Follow._WS_in_stmt_while4076); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS424);


							}
							break;

						default:
							goto loop272;
						}
					}

					loop272:
						;

					} finally { DebugExitSubRule(272); }

					DebugLocation(460, 27);
					// SugarCpp.g:460:27: ( NEWLINE )+
					int cnt273=0;
					try { DebugEnterSubRule(273);
					while (true)
					{
						int alt273=2;
						try { DebugEnterDecision(273, false);
						int LA273_0 = input.LA(1);

						if ((LA273_0==NEWLINE))
						{
							alt273 = 1;
						}


						} finally { DebugExitDecision(273); }
						switch (alt273)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:460:27: NEWLINE
							{
							DebugLocation(460, 27);
							NEWLINE425=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while4079); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE425);


							}
							break;

						default:
							if (cnt273 >= 1)
								goto loop273;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee273 = new EarlyExitException( 273, input );
							DebugRecognitionException(eee273);
							throw eee273;
						}
						cnt273++;
					}
					loop273:
						;

					} finally { DebugExitSubRule(273); }

					DebugLocation(460, 36);
					PushFollow(Follow._stmt_block_in_stmt_while4082);
					stmt_block426=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block426.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:47: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(460, 50);
						// SugarCpp.g:460:50: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(460, 63);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(460, 68);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:461:17: ( WS )* 'then' ( WS )* inline_stmt_block
					{
					DebugLocation(461, 17);
					// SugarCpp.g:461:17: ( WS )*
					try { DebugEnterSubRule(274);
					while (true)
					{
						int alt274=2;
						try { DebugEnterDecision(274, false);
						int LA274_0 = input.LA(1);

						if ((LA274_0==WS))
						{
							alt274 = 1;
						}


						} finally { DebugExitDecision(274); }
						switch ( alt274 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:461:17: WS
							{
							DebugLocation(461, 17);
							WS427=(IToken)Match(input,WS,Follow._WS_in_stmt_while4110); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS427);


							}
							break;

						default:
							goto loop274;
						}
					}

					loop274:
						;

					} finally { DebugExitSubRule(274); }

					DebugLocation(461, 21);
					string_literal428=(IToken)Match(input,169,Follow._169_in_stmt_while4113); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal428);

					DebugLocation(461, 28);
					// SugarCpp.g:461:28: ( WS )*
					try { DebugEnterSubRule(275);
					while (true)
					{
						int alt275=2;
						try { DebugEnterDecision(275, false);
						int LA275_0 = input.LA(1);

						if ((LA275_0==WS))
						{
							alt275 = 1;
						}


						} finally { DebugExitDecision(275); }
						switch ( alt275 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:461:28: WS
							{
							DebugLocation(461, 28);
							WS429=(IToken)Match(input,WS,Follow._WS_in_stmt_while4115); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS429);


							}
							break;

						default:
							goto loop275;
						}
					}

					loop275:
						;

					} finally { DebugExitSubRule(275); }

					DebugLocation(461, 32);
					PushFollow(Follow._inline_stmt_block_in_stmt_while4118);
					inline_stmt_block430=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block430.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 461:50: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(461, 53);
						// SugarCpp.g:461:53: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(461, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(461, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(461, 71);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(276); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:463:4: 'until' expr ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(463, 4);
				string_literal431=(IToken)Match(input,176,Follow._176_in_stmt_while4146); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal431);

				DebugLocation(463, 12);
				PushFollow(Follow._expr_in_stmt_while4148);
				expr432=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr432.Tree);
				DebugLocation(463, 17);
				// SugarCpp.g:463:17: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt281=2;
				try { DebugEnterSubRule(281);
				try { DebugEnterDecision(281, false);
				try
				{
					alt281 = dfa281.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(281); }
				switch (alt281)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:19: ( WS )* ( NEWLINE )+ stmt_block
					{
					DebugLocation(463, 19);
					// SugarCpp.g:463:19: ( WS )*
					try { DebugEnterSubRule(277);
					while (true)
					{
						int alt277=2;
						try { DebugEnterDecision(277, false);
						int LA277_0 = input.LA(1);

						if ((LA277_0==WS))
						{
							alt277 = 1;
						}


						} finally { DebugExitDecision(277); }
						switch ( alt277 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:463:19: WS
							{
							DebugLocation(463, 19);
							WS433=(IToken)Match(input,WS,Follow._WS_in_stmt_while4152); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS433);


							}
							break;

						default:
							goto loop277;
						}
					}

					loop277:
						;

					} finally { DebugExitSubRule(277); }

					DebugLocation(463, 23);
					// SugarCpp.g:463:23: ( NEWLINE )+
					int cnt278=0;
					try { DebugEnterSubRule(278);
					while (true)
					{
						int alt278=2;
						try { DebugEnterDecision(278, false);
						int LA278_0 = input.LA(1);

						if ((LA278_0==NEWLINE))
						{
							alt278 = 1;
						}


						} finally { DebugExitDecision(278); }
						switch (alt278)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:463:23: NEWLINE
							{
							DebugLocation(463, 23);
							NEWLINE434=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while4155); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE434);


							}
							break;

						default:
							if (cnt278 >= 1)
								goto loop278;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee278 = new EarlyExitException( 278, input );
							DebugRecognitionException(eee278);
							throw eee278;
						}
						cnt278++;
					}
					loop278:
						;

					} finally { DebugExitSubRule(278); }

					DebugLocation(463, 32);
					PushFollow(Follow._stmt_block_in_stmt_while4158);
					stmt_block435=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block435.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 463:43: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(463, 46);
						// SugarCpp.g:463:46: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(463, 48);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(463, 59);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(463, 64);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:464:13: ( WS )* 'then' ( WS )* inline_stmt_block
					{
					DebugLocation(464, 13);
					// SugarCpp.g:464:13: ( WS )*
					try { DebugEnterSubRule(279);
					while (true)
					{
						int alt279=2;
						try { DebugEnterDecision(279, false);
						int LA279_0 = input.LA(1);

						if ((LA279_0==WS))
						{
							alt279 = 1;
						}


						} finally { DebugExitDecision(279); }
						switch ( alt279 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:464:13: WS
							{
							DebugLocation(464, 13);
							WS436=(IToken)Match(input,WS,Follow._WS_in_stmt_while4182); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS436);


							}
							break;

						default:
							goto loop279;
						}
					}

					loop279:
						;

					} finally { DebugExitSubRule(279); }

					DebugLocation(464, 17);
					string_literal437=(IToken)Match(input,169,Follow._169_in_stmt_while4185); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal437);

					DebugLocation(464, 24);
					// SugarCpp.g:464:24: ( WS )*
					try { DebugEnterSubRule(280);
					while (true)
					{
						int alt280=2;
						try { DebugEnterDecision(280, false);
						int LA280_0 = input.LA(1);

						if ((LA280_0==WS))
						{
							alt280 = 1;
						}


						} finally { DebugExitDecision(280); }
						switch ( alt280 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:464:24: WS
							{
							DebugLocation(464, 24);
							WS438=(IToken)Match(input,WS,Follow._WS_in_stmt_while4187); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS438);


							}
							break;

						default:
							goto loop280;
						}
					}

					loop280:
						;

					} finally { DebugExitSubRule(280); }

					DebugLocation(464, 28);
					PushFollow(Follow._inline_stmt_block_in_stmt_while4190);
					inline_stmt_block439=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block439.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 464:46: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(464, 49);
						// SugarCpp.g:464:49: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(464, 51);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(464, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(464, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(281); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:466:4: 'loop' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ stmt_block
				{
				DebugLocation(466, 4);
				string_literal440=(IToken)Match(input,157,Follow._157_in_stmt_while4214); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_157.Add(string_literal440);

				DebugLocation(466, 11);
				// SugarCpp.g:466:11: ( ( WS )* expr )?
				int alt283=2;
				try { DebugEnterSubRule(283);
				try { DebugEnterDecision(283, false);
				try
				{
					alt283 = dfa283.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(283); }
				switch (alt283)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:466:12: ( WS )* expr
					{
					DebugLocation(466, 12);
					// SugarCpp.g:466:12: ( WS )*
					try { DebugEnterSubRule(282);
					while (true)
					{
						int alt282=2;
						try { DebugEnterDecision(282, false);
						int LA282_0 = input.LA(1);

						if ((LA282_0==WS))
						{
							alt282 = 1;
						}


						} finally { DebugExitDecision(282); }
						switch ( alt282 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:466:12: WS
							{
							DebugLocation(466, 12);
							WS441=(IToken)Match(input,WS,Follow._WS_in_stmt_while4217); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS441);


							}
							break;

						default:
							goto loop282;
						}
					}

					loop282:
						;

					} finally { DebugExitSubRule(282); }

					DebugLocation(466, 16);
					PushFollow(Follow._expr_in_stmt_while4220);
					expr442=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr442.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(283); }

				DebugLocation(466, 23);
				// SugarCpp.g:466:23: ( WS )*
				try { DebugEnterSubRule(284);
				while (true)
				{
					int alt284=2;
					try { DebugEnterDecision(284, false);
					int LA284_0 = input.LA(1);

					if ((LA284_0==WS))
					{
						alt284 = 1;
					}


					} finally { DebugExitDecision(284); }
					switch ( alt284 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:466:23: WS
						{
						DebugLocation(466, 23);
						WS443=(IToken)Match(input,WS,Follow._WS_in_stmt_while4224); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS443);


						}
						break;

					default:
						goto loop284;
					}
				}

				loop284:
					;

				} finally { DebugExitSubRule(284); }

				DebugLocation(466, 27);
				// SugarCpp.g:466:27: ( NEWLINE )+
				int cnt285=0;
				try { DebugEnterSubRule(285);
				while (true)
				{
					int alt285=2;
					try { DebugEnterDecision(285, false);
					int LA285_0 = input.LA(1);

					if ((LA285_0==NEWLINE))
					{
						alt285 = 1;
					}


					} finally { DebugExitDecision(285); }
					switch (alt285)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:466:27: NEWLINE
						{
						DebugLocation(466, 27);
						NEWLINE444=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while4227); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE444);


						}
						break;

					default:
						if (cnt285 >= 1)
							goto loop285;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee285 = new EarlyExitException( 285, input );
						DebugRecognitionException(eee285);
						throw eee285;
					}
					cnt285++;
				}
				loop285:
					;

				} finally { DebugExitSubRule(285); }

				DebugLocation(466, 36);
				PushFollow(Follow._stmt_block_in_stmt_while4230);
				stmt_block445=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block445.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 466:47: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(466, 50);
					// SugarCpp.g:466:50: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(466, 52);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(466, 62);
					// SugarCpp.g:466:62: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(466, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(466, 68);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 46);
			LeaveRule("stmt_while", 46);
			LeaveRule_stmt_while();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:469:1: for_range : ident ( WS )* '<-' ( WS )* a= expr ( ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 47);
		TraceIn("for_range", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS447 = default(IToken);
		IToken string_literal448 = default(IToken);
		IToken WS449 = default(IToken);
		IToken WS450 = default(IToken);
		IToken string_literal451 = default(IToken);
		IToken WS452 = default(IToken);
		IToken WS453 = default(IToken);
		IToken string_literal454 = default(IToken);
		IToken WS455 = default(IToken);
		IToken WS456 = default(IToken);
		IToken string_literal457 = default(IToken);
		IToken WS458 = default(IToken);
		IToken WS459 = default(IToken);
		IToken string_literal460 = default(IToken);
		IToken WS461 = default(IToken);
		IToken WS462 = default(IToken);
		IToken string_literal463 = default(IToken);
		IToken WS464 = default(IToken);
		IToken WS465 = default(IToken);
		IToken string_literal466 = default(IToken);
		IToken WS467 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident446 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS447_tree = default(CommonTree);
		CommonTree string_literal448_tree = default(CommonTree);
		CommonTree WS449_tree = default(CommonTree);
		CommonTree WS450_tree = default(CommonTree);
		CommonTree string_literal451_tree = default(CommonTree);
		CommonTree WS452_tree = default(CommonTree);
		CommonTree WS453_tree = default(CommonTree);
		CommonTree string_literal454_tree = default(CommonTree);
		CommonTree WS455_tree = default(CommonTree);
		CommonTree WS456_tree = default(CommonTree);
		CommonTree string_literal457_tree = default(CommonTree);
		CommonTree WS458_tree = default(CommonTree);
		CommonTree WS459_tree = default(CommonTree);
		CommonTree string_literal460_tree = default(CommonTree);
		CommonTree WS461_tree = default(CommonTree);
		CommonTree WS462_tree = default(CommonTree);
		CommonTree string_literal463_tree = default(CommonTree);
		CommonTree WS464_tree = default(CommonTree);
		CommonTree WS465_tree = default(CommonTree);
		CommonTree string_literal466_tree = default(CommonTree);
		CommonTree WS467_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(469, 1);
		try
		{
			// SugarCpp.g:470:2: ( ident ( WS )* '<-' ( WS )* a= expr ( ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:470:4: ident ( WS )* '<-' ( WS )* a= expr ( ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(470, 4);
			PushFollow(Follow._ident_in_for_range4252);
			ident446=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident446.Tree);
			DebugLocation(470, 10);
			// SugarCpp.g:470:10: ( WS )*
			try { DebugEnterSubRule(287);
			while (true)
			{
				int alt287=2;
				try { DebugEnterDecision(287, false);
				int LA287_0 = input.LA(1);

				if ((LA287_0==WS))
				{
					alt287 = 1;
				}


				} finally { DebugExitDecision(287); }
				switch ( alt287 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:10: WS
					{
					DebugLocation(470, 10);
					WS447=(IToken)Match(input,WS,Follow._WS_in_for_range4254); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS447);


					}
					break;

				default:
					goto loop287;
				}
			}

			loop287:
				;

			} finally { DebugExitSubRule(287); }

			DebugLocation(470, 14);
			string_literal448=(IToken)Match(input,116,Follow._116_in_for_range4257); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal448);

			DebugLocation(470, 19);
			// SugarCpp.g:470:19: ( WS )*
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, false);
				int LA288_0 = input.LA(1);

				if ((LA288_0==WS))
				{
					alt288 = 1;
				}


				} finally { DebugExitDecision(288); }
				switch ( alt288 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:19: WS
					{
					DebugLocation(470, 19);
					WS449=(IToken)Match(input,WS,Follow._WS_in_for_range4259); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS449);


					}
					break;

				default:
					goto loop288;
				}
			}

			loop288:
				;

			} finally { DebugExitSubRule(288); }

			DebugLocation(470, 24);
			PushFollow(Follow._expr_in_for_range4264);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(470, 30);
			// SugarCpp.g:470:30: ( ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt304=4;
			try { DebugEnterSubRule(304);
			try { DebugEnterDecision(304, false);
			try
			{
				alt304 = dfa304.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(304); }
			switch (alt304)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:470:32: ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )?
				{
				DebugLocation(470, 32);
				// SugarCpp.g:470:32: ( WS )*
				try { DebugEnterSubRule(289);
				while (true)
				{
					int alt289=2;
					try { DebugEnterDecision(289, false);
					int LA289_0 = input.LA(1);

					if ((LA289_0==WS))
					{
						alt289 = 1;
					}


					} finally { DebugExitDecision(289); }
					switch ( alt289 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:32: WS
						{
						DebugLocation(470, 32);
						WS450=(IToken)Match(input,WS,Follow._WS_in_for_range4268); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS450);


						}
						break;

					default:
						goto loop289;
					}
				}

				loop289:
					;

				} finally { DebugExitSubRule(289); }

				DebugLocation(470, 36);
				string_literal451=(IToken)Match(input,172,Follow._172_in_for_range4271); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(string_literal451);

				DebugLocation(470, 41);
				// SugarCpp.g:470:41: ( WS )*
				try { DebugEnterSubRule(290);
				while (true)
				{
					int alt290=2;
					try { DebugEnterDecision(290, false);
					int LA290_0 = input.LA(1);

					if ((LA290_0==WS))
					{
						alt290 = 1;
					}


					} finally { DebugExitDecision(290); }
					switch ( alt290 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:41: WS
						{
						DebugLocation(470, 41);
						WS452=(IToken)Match(input,WS,Follow._WS_in_for_range4273); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS452);


						}
						break;

					default:
						goto loop290;
					}
				}

				loop290:
					;

				} finally { DebugExitSubRule(290); }

				DebugLocation(470, 46);
				PushFollow(Follow._expr_in_for_range4278);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(470, 52);
				// SugarCpp.g:470:52: ( ( WS )* 'by' ( WS )* c= expr )?
				int alt293=2;
				try { DebugEnterSubRule(293);
				try { DebugEnterDecision(293, false);
				try
				{
					alt293 = dfa293.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(293); }
				switch (alt293)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:53: ( WS )* 'by' ( WS )* c= expr
					{
					DebugLocation(470, 53);
					// SugarCpp.g:470:53: ( WS )*
					try { DebugEnterSubRule(291);
					while (true)
					{
						int alt291=2;
						try { DebugEnterDecision(291, false);
						int LA291_0 = input.LA(1);

						if ((LA291_0==WS))
						{
							alt291 = 1;
						}


						} finally { DebugExitDecision(291); }
						switch ( alt291 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:470:53: WS
							{
							DebugLocation(470, 53);
							WS453=(IToken)Match(input,WS,Follow._WS_in_for_range4281); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS453);


							}
							break;

						default:
							goto loop291;
						}
					}

					loop291:
						;

					} finally { DebugExitSubRule(291); }

					DebugLocation(470, 57);
					string_literal454=(IToken)Match(input,138,Follow._138_in_for_range4284); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal454);

					DebugLocation(470, 62);
					// SugarCpp.g:470:62: ( WS )*
					try { DebugEnterSubRule(292);
					while (true)
					{
						int alt292=2;
						try { DebugEnterDecision(292, false);
						int LA292_0 = input.LA(1);

						if ((LA292_0==WS))
						{
							alt292 = 1;
						}


						} finally { DebugExitDecision(292); }
						switch ( alt292 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:470:62: WS
							{
							DebugLocation(470, 62);
							WS455=(IToken)Match(input,WS,Follow._WS_in_for_range4286); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS455);


							}
							break;

						default:
							goto loop292;
						}
					}

					loop292:
						;

					} finally { DebugExitSubRule(292); }

					DebugLocation(470, 67);
					PushFollow(Follow._expr_in_for_range4291);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(293); }



				{
				// AST REWRITE
				// elements: ident, a, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 470:75: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(470, 78);
					// SugarCpp.g:470:78: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(470, 80);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(470, 92);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(470, 99);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(470, 102);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(470, 105);
					// SugarCpp.g:470:105: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(470, 105);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:471:17: ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )?
				{
				DebugLocation(471, 17);
				// SugarCpp.g:471:17: ( WS )*
				try { DebugEnterSubRule(294);
				while (true)
				{
					int alt294=2;
					try { DebugEnterDecision(294, false);
					int LA294_0 = input.LA(1);

					if ((LA294_0==WS))
					{
						alt294 = 1;
					}


					} finally { DebugExitDecision(294); }
					switch ( alt294 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:471:17: WS
						{
						DebugLocation(471, 17);
						WS456=(IToken)Match(input,WS,Follow._WS_in_for_range4329); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS456);


						}
						break;

					default:
						goto loop294;
					}
				}

				loop294:
					;

				} finally { DebugExitSubRule(294); }

				DebugLocation(471, 21);
				string_literal457=(IToken)Match(input,171,Follow._171_in_for_range4332); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal457);

				DebugLocation(471, 27);
				// SugarCpp.g:471:27: ( WS )*
				try { DebugEnterSubRule(295);
				while (true)
				{
					int alt295=2;
					try { DebugEnterDecision(295, false);
					int LA295_0 = input.LA(1);

					if ((LA295_0==WS))
					{
						alt295 = 1;
					}


					} finally { DebugExitDecision(295); }
					switch ( alt295 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:471:27: WS
						{
						DebugLocation(471, 27);
						WS458=(IToken)Match(input,WS,Follow._WS_in_for_range4334); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS458);


						}
						break;

					default:
						goto loop295;
					}
				}

				loop295:
					;

				} finally { DebugExitSubRule(295); }

				DebugLocation(471, 32);
				PushFollow(Follow._expr_in_for_range4339);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(471, 38);
				// SugarCpp.g:471:38: ( ( WS )* 'by' ( WS )* c= expr )?
				int alt298=2;
				try { DebugEnterSubRule(298);
				try { DebugEnterDecision(298, false);
				try
				{
					alt298 = dfa298.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(298); }
				switch (alt298)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:39: ( WS )* 'by' ( WS )* c= expr
					{
					DebugLocation(471, 39);
					// SugarCpp.g:471:39: ( WS )*
					try { DebugEnterSubRule(296);
					while (true)
					{
						int alt296=2;
						try { DebugEnterDecision(296, false);
						int LA296_0 = input.LA(1);

						if ((LA296_0==WS))
						{
							alt296 = 1;
						}


						} finally { DebugExitDecision(296); }
						switch ( alt296 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:471:39: WS
							{
							DebugLocation(471, 39);
							WS459=(IToken)Match(input,WS,Follow._WS_in_for_range4342); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS459);


							}
							break;

						default:
							goto loop296;
						}
					}

					loop296:
						;

					} finally { DebugExitSubRule(296); }

					DebugLocation(471, 43);
					string_literal460=(IToken)Match(input,138,Follow._138_in_for_range4345); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal460);

					DebugLocation(471, 48);
					// SugarCpp.g:471:48: ( WS )*
					try { DebugEnterSubRule(297);
					while (true)
					{
						int alt297=2;
						try { DebugEnterDecision(297, false);
						int LA297_0 = input.LA(1);

						if ((LA297_0==WS))
						{
							alt297 = 1;
						}


						} finally { DebugExitDecision(297); }
						switch ( alt297 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:471:48: WS
							{
							DebugLocation(471, 48);
							WS461=(IToken)Match(input,WS,Follow._WS_in_for_range4347); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS461);


							}
							break;

						default:
							goto loop297;
						}
					}

					loop297:
						;

					} finally { DebugExitSubRule(297); }

					DebugLocation(471, 53);
					PushFollow(Follow._expr_in_for_range4352);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(298); }



				{
				// AST REWRITE
				// elements: a, ident, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 471:61: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(471, 64);
					// SugarCpp.g:471:64: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(471, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(471, 79);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(471, 86);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(471, 89);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(471, 92);
					// SugarCpp.g:471:92: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(471, 92);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:472:17: ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )?
				{
				DebugLocation(472, 17);
				// SugarCpp.g:472:17: ( WS )*
				try { DebugEnterSubRule(299);
				while (true)
				{
					int alt299=2;
					try { DebugEnterDecision(299, false);
					int LA299_0 = input.LA(1);

					if ((LA299_0==WS))
					{
						alt299 = 1;
					}


					} finally { DebugExitDecision(299); }
					switch ( alt299 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:472:17: WS
						{
						DebugLocation(472, 17);
						WS462=(IToken)Match(input,WS,Follow._WS_in_for_range4390); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS462);


						}
						break;

					default:
						goto loop299;
					}
				}

				loop299:
					;

				} finally { DebugExitSubRule(299); }

				DebugLocation(472, 21);
				string_literal463=(IToken)Match(input,144,Follow._144_in_for_range4393); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal463);

				DebugLocation(472, 30);
				// SugarCpp.g:472:30: ( WS )*
				try { DebugEnterSubRule(300);
				while (true)
				{
					int alt300=2;
					try { DebugEnterDecision(300, false);
					int LA300_0 = input.LA(1);

					if ((LA300_0==WS))
					{
						alt300 = 1;
					}


					} finally { DebugExitDecision(300); }
					switch ( alt300 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:472:30: WS
						{
						DebugLocation(472, 30);
						WS464=(IToken)Match(input,WS,Follow._WS_in_for_range4395); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS464);


						}
						break;

					default:
						goto loop300;
					}
				}

				loop300:
					;

				} finally { DebugExitSubRule(300); }

				DebugLocation(472, 35);
				PushFollow(Follow._expr_in_for_range4400);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(472, 41);
				// SugarCpp.g:472:41: ( ( WS )* 'by' ( WS )* c= expr )?
				int alt303=2;
				try { DebugEnterSubRule(303);
				try { DebugEnterDecision(303, false);
				try
				{
					alt303 = dfa303.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(303); }
				switch (alt303)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:472:42: ( WS )* 'by' ( WS )* c= expr
					{
					DebugLocation(472, 42);
					// SugarCpp.g:472:42: ( WS )*
					try { DebugEnterSubRule(301);
					while (true)
					{
						int alt301=2;
						try { DebugEnterDecision(301, false);
						int LA301_0 = input.LA(1);

						if ((LA301_0==WS))
						{
							alt301 = 1;
						}


						} finally { DebugExitDecision(301); }
						switch ( alt301 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:42: WS
							{
							DebugLocation(472, 42);
							WS465=(IToken)Match(input,WS,Follow._WS_in_for_range4403); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS465);


							}
							break;

						default:
							goto loop301;
						}
					}

					loop301:
						;

					} finally { DebugExitSubRule(301); }

					DebugLocation(472, 46);
					string_literal466=(IToken)Match(input,138,Follow._138_in_for_range4406); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal466);

					DebugLocation(472, 51);
					// SugarCpp.g:472:51: ( WS )*
					try { DebugEnterSubRule(302);
					while (true)
					{
						int alt302=2;
						try { DebugEnterDecision(302, false);
						int LA302_0 = input.LA(1);

						if ((LA302_0==WS))
						{
							alt302 = 1;
						}


						} finally { DebugExitDecision(302); }
						switch ( alt302 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:51: WS
							{
							DebugLocation(472, 51);
							WS467=(IToken)Match(input,WS,Follow._WS_in_for_range4408); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS467);


							}
							break;

						default:
							goto loop302;
						}
					}

					loop302:
						;

					} finally { DebugExitSubRule(302); }

					DebugLocation(472, 56);
					PushFollow(Follow._expr_in_for_range4413);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(303); }



				{
				// AST REWRITE
				// elements: b, a, ident, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 472:64: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(472, 67);
					// SugarCpp.g:472:67: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(472, 69);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(472, 86);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(472, 93);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(472, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(472, 99);
					// SugarCpp.g:472:99: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(472, 99);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:473:17: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 473:17: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(473, 20);
					// SugarCpp.g:473:20: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(473, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(473, 36);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(473, 43);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(304); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 47);
			LeaveRule("for_range", 47);
			LeaveRule_for_range();
		}
		DebugLocation(475, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:477:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 48);
		TraceIn("for_when", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr468 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(477, 1);
		try
		{
			// SugarCpp.g:478:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:478:4: expr
			{
			DebugLocation(478, 4);
			PushFollow(Follow._expr_in_for_when4487);
			expr468=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr468.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 478:9: -> ^( For_Item_When expr )
			{
				DebugLocation(478, 12);
				// SugarCpp.g:478:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(478, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(478, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 48);
			LeaveRule("for_when", 48);
			LeaveRule_for_when();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:481:1: for_map : ident ( WS )* '=>' ( WS )* expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 49);
		TraceIn("for_map", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS470 = default(IToken);
		IToken string_literal471 = default(IToken);
		IToken WS472 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr473 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS470_tree = default(CommonTree);
		CommonTree string_literal471_tree = default(CommonTree);
		CommonTree WS472_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(481, 1);
		try
		{
			// SugarCpp.g:482:2: ( ident ( WS )* '=>' ( WS )* expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:482:4: ident ( WS )* '=>' ( WS )* expr
			{
			DebugLocation(482, 4);
			PushFollow(Follow._ident_in_for_map4506);
			ident469=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident469.Tree);
			DebugLocation(482, 10);
			// SugarCpp.g:482:10: ( WS )*
			try { DebugEnterSubRule(305);
			while (true)
			{
				int alt305=2;
				try { DebugEnterDecision(305, false);
				int LA305_0 = input.LA(1);

				if ((LA305_0==WS))
				{
					alt305 = 1;
				}


				} finally { DebugExitDecision(305); }
				switch ( alt305 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:482:10: WS
					{
					DebugLocation(482, 10);
					WS470=(IToken)Match(input,WS,Follow._WS_in_for_map4508); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS470);


					}
					break;

				default:
					goto loop305;
				}
			}

			loop305:
				;

			} finally { DebugExitSubRule(305); }

			DebugLocation(482, 14);
			string_literal471=(IToken)Match(input,124,Follow._124_in_for_map4511); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal471);

			DebugLocation(482, 19);
			// SugarCpp.g:482:19: ( WS )*
			try { DebugEnterSubRule(306);
			while (true)
			{
				int alt306=2;
				try { DebugEnterDecision(306, false);
				int LA306_0 = input.LA(1);

				if ((LA306_0==WS))
				{
					alt306 = 1;
				}


				} finally { DebugExitDecision(306); }
				switch ( alt306 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:482:19: WS
					{
					DebugLocation(482, 19);
					WS472=(IToken)Match(input,WS,Follow._WS_in_for_map4513); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS472);


					}
					break;

				default:
					goto loop306;
				}
			}

			loop306:
				;

			} finally { DebugExitSubRule(306); }

			DebugLocation(482, 23);
			PushFollow(Follow._expr_in_for_map4516);
			expr473=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr473.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 482:28: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(482, 31);
				// SugarCpp.g:482:31: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(482, 33);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(482, 46);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(482, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 49);
			LeaveRule("for_map", 49);
			LeaveRule_for_map();
		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:485:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 50);
		TraceIn("for_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map476 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(485, 1);
		try
		{
			// SugarCpp.g:486:2: ( for_range | for_when | for_map )
			int alt307=3;
			try { DebugEnterDecision(307, false);
			try
			{
				alt307 = dfa307.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(307); }
			switch (alt307)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(486, 4);
				PushFollow(Follow._for_range_in_for_item4537);
				for_range474=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range474.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:487:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(487, 4);
				PushFollow(Follow._for_when_in_for_item4542);
				for_when475=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when475.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:488:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(488, 4);
				PushFollow(Follow._for_map_in_for_item4547);
				for_map476=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map476.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 50);
			LeaveRule("for_item", 50);
			LeaveRule_for_item();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:491:1: stmt_for : ( 'for' | 'let' ) ( ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 51);
		TraceIn("stmt_for", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal477 = default(IToken);
		IToken string_literal478 = default(IToken);
		IToken WS479 = default(IToken);
		IToken WS481 = default(IToken);
		IToken char_literal482 = default(IToken);
		IToken WS483 = default(IToken);
		IToken WS485 = default(IToken);
		IToken NEWLINE486 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block487 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal477_tree = default(CommonTree);
		CommonTree string_literal478_tree = default(CommonTree);
		CommonTree WS479_tree = default(CommonTree);
		CommonTree WS481_tree = default(CommonTree);
		CommonTree char_literal482_tree = default(CommonTree);
		CommonTree WS483_tree = default(CommonTree);
		CommonTree WS485_tree = default(CommonTree);
		CommonTree NEWLINE486_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(491, 1);
		try
		{
			// SugarCpp.g:492:2: ( ( 'for' | 'let' ) ( ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:492:4: ( 'for' | 'let' ) ( ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(492, 4);
			// SugarCpp.g:492:4: ( 'for' | 'let' )
			int alt308=2;
			try { DebugEnterSubRule(308);
			try { DebugEnterDecision(308, false);
			int LA308_0 = input.LA(1);

			if ((LA308_0==149))
			{
				alt308 = 1;
			}
			else if ((LA308_0==155))
			{
				alt308 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 308, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(308); }
			switch (alt308)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:492:5: 'for'
				{
				DebugLocation(492, 5);
				string_literal477=(IToken)Match(input,149,Follow._149_in_stmt_for4559); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal477);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:492:13: 'let'
				{
				DebugLocation(492, 13);
				string_literal478=(IToken)Match(input,155,Follow._155_in_stmt_for4563); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(string_literal478);


				}
				break;

			}
			} finally { DebugExitSubRule(308); }

			DebugLocation(492, 20);
			// SugarCpp.g:492:20: ( ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:492:22: ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(492, 22);
			// SugarCpp.g:492:22: ( WS )*
			try { DebugEnterSubRule(309);
			while (true)
			{
				int alt309=2;
				try { DebugEnterDecision(309, false);
				int LA309_0 = input.LA(1);

				if ((LA309_0==WS))
				{
					alt309 = 1;
				}


				} finally { DebugExitDecision(309); }
				switch ( alt309 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:22: WS
					{
					DebugLocation(492, 22);
					WS479=(IToken)Match(input,WS,Follow._WS_in_stmt_for4568); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS479);


					}
					break;

				default:
					goto loop309;
				}
			}

			loop309:
				;

			} finally { DebugExitSubRule(309); }

			DebugLocation(492, 26);
			PushFollow(Follow._for_item_in_stmt_for4571);
			for_item480=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item480.Tree);
			DebugLocation(492, 35);
			// SugarCpp.g:492:35: ( ( WS )* ',' ( WS )* for_item )*
			try { DebugEnterSubRule(312);
			while (true)
			{
				int alt312=2;
				try { DebugEnterDecision(312, false);
				try
				{
					alt312 = dfa312.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(312); }
				switch ( alt312 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:36: ( WS )* ',' ( WS )* for_item
					{
					DebugLocation(492, 36);
					// SugarCpp.g:492:36: ( WS )*
					try { DebugEnterSubRule(310);
					while (true)
					{
						int alt310=2;
						try { DebugEnterDecision(310, false);
						int LA310_0 = input.LA(1);

						if ((LA310_0==WS))
						{
							alt310 = 1;
						}


						} finally { DebugExitDecision(310); }
						switch ( alt310 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:492:36: WS
							{
							DebugLocation(492, 36);
							WS481=(IToken)Match(input,WS,Follow._WS_in_stmt_for4574); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS481);


							}
							break;

						default:
							goto loop310;
						}
					}

					loop310:
						;

					} finally { DebugExitSubRule(310); }

					DebugLocation(492, 40);
					char_literal482=(IToken)Match(input,100,Follow._100_in_stmt_for4577); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal482);

					DebugLocation(492, 44);
					// SugarCpp.g:492:44: ( WS )*
					try { DebugEnterSubRule(311);
					while (true)
					{
						int alt311=2;
						try { DebugEnterDecision(311, false);
						int LA311_0 = input.LA(1);

						if ((LA311_0==WS))
						{
							alt311 = 1;
						}


						} finally { DebugExitDecision(311); }
						switch ( alt311 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:492:44: WS
							{
							DebugLocation(492, 44);
							WS483=(IToken)Match(input,WS,Follow._WS_in_stmt_for4579); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS483);


							}
							break;

						default:
							goto loop311;
						}
					}

					loop311:
						;

					} finally { DebugExitSubRule(311); }

					DebugLocation(492, 48);
					PushFollow(Follow._for_item_in_stmt_for4582);
					for_item484=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item484.Tree);

					}
					break;

				default:
					goto loop312;
				}
			}

			loop312:
				;

			} finally { DebugExitSubRule(312); }

			DebugLocation(492, 59);
			// SugarCpp.g:492:59: ( WS )*
			try { DebugEnterSubRule(313);
			while (true)
			{
				int alt313=2;
				try { DebugEnterDecision(313, false);
				int LA313_0 = input.LA(1);

				if ((LA313_0==WS))
				{
					alt313 = 1;
				}


				} finally { DebugExitDecision(313); }
				switch ( alt313 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:59: WS
					{
					DebugLocation(492, 59);
					WS485=(IToken)Match(input,WS,Follow._WS_in_stmt_for4586); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS485);


					}
					break;

				default:
					goto loop313;
				}
			}

			loop313:
				;

			} finally { DebugExitSubRule(313); }

			DebugLocation(492, 63);
			// SugarCpp.g:492:63: ( NEWLINE )+
			int cnt314=0;
			try { DebugEnterSubRule(314);
			while (true)
			{
				int alt314=2;
				try { DebugEnterDecision(314, false);
				int LA314_0 = input.LA(1);

				if ((LA314_0==NEWLINE))
				{
					alt314 = 1;
				}


				} finally { DebugExitDecision(314); }
				switch (alt314)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:63: NEWLINE
					{
					DebugLocation(492, 63);
					NEWLINE486=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for4589); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE486);


					}
					break;

				default:
					if (cnt314 >= 1)
						goto loop314;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee314 = new EarlyExitException( 314, input );
					DebugRecognitionException(eee314);
					throw eee314;
				}
				cnt314++;
			}
			loop314:
				;

			} finally { DebugExitSubRule(314); }

			DebugLocation(492, 72);
			PushFollow(Follow._stmt_block_in_stmt_for4592);
			stmt_block487=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block487.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 492:83: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(492, 86);
				// SugarCpp.g:492:86: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(492, 88);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(492, 97);
				// SugarCpp.g:492:97: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(492, 97);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(492, 107);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 51);
			LeaveRule("stmt_for", 51);
			LeaveRule_stmt_for();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:497:1: stmt_try : 'try' ( WS )* ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' ( WS )* stmt_alloc ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 52);
		TraceIn("stmt_try", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal488 = default(IToken);
		IToken WS489 = default(IToken);
		IToken NEWLINE490 = default(IToken);
		IToken NEWLINE492 = default(IToken);
		IToken string_literal493 = default(IToken);
		IToken WS494 = default(IToken);
		IToken WS496 = default(IToken);
		IToken NEWLINE497 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block498 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal488_tree = default(CommonTree);
		CommonTree WS489_tree = default(CommonTree);
		CommonTree NEWLINE490_tree = default(CommonTree);
		CommonTree NEWLINE492_tree = default(CommonTree);
		CommonTree string_literal493_tree = default(CommonTree);
		CommonTree WS494_tree = default(CommonTree);
		CommonTree WS496_tree = default(CommonTree);
		CommonTree NEWLINE497_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(497, 1);
		try
		{
			// SugarCpp.g:498:2: ( 'try' ( WS )* ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' ( WS )* stmt_alloc ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:498:4: 'try' ( WS )* ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' ( WS )* stmt_alloc ( WS )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(498, 4);
			string_literal488=(IToken)Match(input,173,Follow._173_in_stmt_try4641); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(string_literal488);

			DebugLocation(498, 10);
			// SugarCpp.g:498:10: ( WS )*
			try { DebugEnterSubRule(315);
			while (true)
			{
				int alt315=2;
				try { DebugEnterDecision(315, false);
				int LA315_0 = input.LA(1);

				if ((LA315_0==WS))
				{
					alt315 = 1;
				}


				} finally { DebugExitDecision(315); }
				switch ( alt315 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:10: WS
					{
					DebugLocation(498, 10);
					WS489=(IToken)Match(input,WS,Follow._WS_in_stmt_try4643); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS489);


					}
					break;

				default:
					goto loop315;
				}
			}

			loop315:
				;

			} finally { DebugExitSubRule(315); }

			DebugLocation(498, 14);
			// SugarCpp.g:498:14: ( NEWLINE )+
			int cnt316=0;
			try { DebugEnterSubRule(316);
			while (true)
			{
				int alt316=2;
				try { DebugEnterDecision(316, false);
				int LA316_0 = input.LA(1);

				if ((LA316_0==NEWLINE))
				{
					alt316 = 1;
				}


				} finally { DebugExitDecision(316); }
				switch (alt316)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:14: NEWLINE
					{
					DebugLocation(498, 14);
					NEWLINE490=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try4646); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE490);


					}
					break;

				default:
					if (cnt316 >= 1)
						goto loop316;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee316 = new EarlyExitException( 316, input );
					DebugRecognitionException(eee316);
					throw eee316;
				}
				cnt316++;
			}
			loop316:
				;

			} finally { DebugExitSubRule(316); }

			DebugLocation(498, 23);
			PushFollow(Follow._stmt_block_in_stmt_try4649);
			stmt_block491=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block491.Tree);
			DebugLocation(498, 34);
			// SugarCpp.g:498:34: ( NEWLINE )*
			try { DebugEnterSubRule(317);
			while (true)
			{
				int alt317=2;
				try { DebugEnterDecision(317, false);
				int LA317_0 = input.LA(1);

				if ((LA317_0==NEWLINE))
				{
					alt317 = 1;
				}


				} finally { DebugExitDecision(317); }
				switch ( alt317 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:34: NEWLINE
					{
					DebugLocation(498, 34);
					NEWLINE492=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try4651); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE492);


					}
					break;

				default:
					goto loop317;
				}
			}

			loop317:
				;

			} finally { DebugExitSubRule(317); }

			DebugLocation(498, 43);
			string_literal493=(IToken)Match(input,140,Follow._140_in_stmt_try4654); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_140.Add(string_literal493);

			DebugLocation(498, 51);
			// SugarCpp.g:498:51: ( WS )*
			try { DebugEnterSubRule(318);
			while (true)
			{
				int alt318=2;
				try { DebugEnterDecision(318, false);
				int LA318_0 = input.LA(1);

				if ((LA318_0==WS))
				{
					alt318 = 1;
				}


				} finally { DebugExitDecision(318); }
				switch ( alt318 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:51: WS
					{
					DebugLocation(498, 51);
					WS494=(IToken)Match(input,WS,Follow._WS_in_stmt_try4656); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS494);


					}
					break;

				default:
					goto loop318;
				}
			}

			loop318:
				;

			} finally { DebugExitSubRule(318); }

			DebugLocation(498, 55);
			PushFollow(Follow._stmt_alloc_in_stmt_try4659);
			stmt_alloc495=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc495.Tree);
			DebugLocation(498, 66);
			// SugarCpp.g:498:66: ( WS )*
			try { DebugEnterSubRule(319);
			while (true)
			{
				int alt319=2;
				try { DebugEnterDecision(319, false);
				int LA319_0 = input.LA(1);

				if ((LA319_0==WS))
				{
					alt319 = 1;
				}


				} finally { DebugExitDecision(319); }
				switch ( alt319 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:66: WS
					{
					DebugLocation(498, 66);
					WS496=(IToken)Match(input,WS,Follow._WS_in_stmt_try4661); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS496);


					}
					break;

				default:
					goto loop319;
				}
			}

			loop319:
				;

			} finally { DebugExitSubRule(319); }

			DebugLocation(498, 70);
			// SugarCpp.g:498:70: ( NEWLINE )+
			int cnt320=0;
			try { DebugEnterSubRule(320);
			while (true)
			{
				int alt320=2;
				try { DebugEnterDecision(320, false);
				int LA320_0 = input.LA(1);

				if ((LA320_0==NEWLINE))
				{
					alt320 = 1;
				}


				} finally { DebugExitDecision(320); }
				switch (alt320)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:70: NEWLINE
					{
					DebugLocation(498, 70);
					NEWLINE497=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try4664); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE497);


					}
					break;

				default:
					if (cnt320 >= 1)
						goto loop320;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee320 = new EarlyExitException( 320, input );
					DebugRecognitionException(eee320);
					throw eee320;
				}
				cnt320++;
			}
			loop320:
				;

			} finally { DebugExitSubRule(320); }

			DebugLocation(498, 79);
			PushFollow(Follow._stmt_block_in_stmt_try4667);
			stmt_block498=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block498.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 498:90: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(498, 93);
				// SugarCpp.g:498:93: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(498, 95);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(498, 104);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(498, 115);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(498, 126);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 52);
			LeaveRule("stmt_try", 52);
			LeaveRule_stmt_try();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:501:1: switch_item : 'when' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 53);
		TraceIn("switch_item", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal499 = default(IToken);
		IToken WS500 = default(IToken);
		IToken WS502 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken WS504 = default(IToken);
		IToken WS506 = default(IToken);
		IToken NEWLINE507 = default(IToken);
		IToken WS509 = default(IToken);
		IToken string_literal510 = default(IToken);
		IToken WS511 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr505 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block508 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block512 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal499_tree = default(CommonTree);
		CommonTree WS500_tree = default(CommonTree);
		CommonTree WS502_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree WS504_tree = default(CommonTree);
		CommonTree WS506_tree = default(CommonTree);
		CommonTree NEWLINE507_tree = default(CommonTree);
		CommonTree WS509_tree = default(CommonTree);
		CommonTree string_literal510_tree = default(CommonTree);
		CommonTree WS511_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(501, 1);
		try
		{
			// SugarCpp.g:502:2: ( 'when' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:502:4: 'when' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(502, 4);
			string_literal499=(IToken)Match(input,179,Follow._179_in_switch_item4690); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_179.Add(string_literal499);

			DebugLocation(502, 11);
			// SugarCpp.g:502:11: ( WS )*
			try { DebugEnterSubRule(321);
			while (true)
			{
				int alt321=2;
				try { DebugEnterDecision(321, false);
				int LA321_0 = input.LA(1);

				if ((LA321_0==WS))
				{
					alt321 = 1;
				}


				} finally { DebugExitDecision(321); }
				switch ( alt321 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:11: WS
					{
					DebugLocation(502, 11);
					WS500=(IToken)Match(input,WS,Follow._WS_in_switch_item4692); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS500);


					}
					break;

				default:
					goto loop321;
				}
			}

			loop321:
				;

			} finally { DebugExitSubRule(321); }

			DebugLocation(502, 15);
			PushFollow(Follow._expr_in_switch_item4695);
			expr501=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr501.Tree);
			DebugLocation(502, 20);
			// SugarCpp.g:502:20: ( ( WS )* ',' ( WS )* expr )*
			try { DebugEnterSubRule(324);
			while (true)
			{
				int alt324=2;
				try { DebugEnterDecision(324, false);
				try
				{
					alt324 = dfa324.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(324); }
				switch ( alt324 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:21: ( WS )* ',' ( WS )* expr
					{
					DebugLocation(502, 21);
					// SugarCpp.g:502:21: ( WS )*
					try { DebugEnterSubRule(322);
					while (true)
					{
						int alt322=2;
						try { DebugEnterDecision(322, false);
						int LA322_0 = input.LA(1);

						if ((LA322_0==WS))
						{
							alt322 = 1;
						}


						} finally { DebugExitDecision(322); }
						switch ( alt322 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:502:21: WS
							{
							DebugLocation(502, 21);
							WS502=(IToken)Match(input,WS,Follow._WS_in_switch_item4698); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS502);


							}
							break;

						default:
							goto loop322;
						}
					}

					loop322:
						;

					} finally { DebugExitSubRule(322); }

					DebugLocation(502, 25);
					char_literal503=(IToken)Match(input,100,Follow._100_in_switch_item4701); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal503);

					DebugLocation(502, 29);
					// SugarCpp.g:502:29: ( WS )*
					try { DebugEnterSubRule(323);
					while (true)
					{
						int alt323=2;
						try { DebugEnterDecision(323, false);
						int LA323_0 = input.LA(1);

						if ((LA323_0==WS))
						{
							alt323 = 1;
						}


						} finally { DebugExitDecision(323); }
						switch ( alt323 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:502:29: WS
							{
							DebugLocation(502, 29);
							WS504=(IToken)Match(input,WS,Follow._WS_in_switch_item4703); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS504);


							}
							break;

						default:
							goto loop323;
						}
					}

					loop323:
						;

					} finally { DebugExitSubRule(323); }

					DebugLocation(502, 33);
					PushFollow(Follow._expr_in_switch_item4706);
					expr505=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr505.Tree);

					}
					break;

				default:
					goto loop324;
				}
			}

			loop324:
				;

			} finally { DebugExitSubRule(324); }

			DebugLocation(502, 40);
			// SugarCpp.g:502:40: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt329=2;
			try { DebugEnterSubRule(329);
			try { DebugEnterDecision(329, false);
			try
			{
				alt329 = dfa329.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(329); }
			switch (alt329)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:502:42: ( WS )* ( NEWLINE )+ stmt_block
				{
				DebugLocation(502, 42);
				// SugarCpp.g:502:42: ( WS )*
				try { DebugEnterSubRule(325);
				while (true)
				{
					int alt325=2;
					try { DebugEnterDecision(325, false);
					int LA325_0 = input.LA(1);

					if ((LA325_0==WS))
					{
						alt325 = 1;
					}


					} finally { DebugExitDecision(325); }
					switch ( alt325 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:42: WS
						{
						DebugLocation(502, 42);
						WS506=(IToken)Match(input,WS,Follow._WS_in_switch_item4712); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS506);


						}
						break;

					default:
						goto loop325;
					}
				}

				loop325:
					;

				} finally { DebugExitSubRule(325); }

				DebugLocation(502, 46);
				// SugarCpp.g:502:46: ( NEWLINE )+
				int cnt326=0;
				try { DebugEnterSubRule(326);
				while (true)
				{
					int alt326=2;
					try { DebugEnterDecision(326, false);
					int LA326_0 = input.LA(1);

					if ((LA326_0==NEWLINE))
					{
						alt326 = 1;
					}


					} finally { DebugExitDecision(326); }
					switch (alt326)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:46: NEWLINE
						{
						DebugLocation(502, 46);
						NEWLINE507=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item4715); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE507);


						}
						break;

					default:
						if (cnt326 >= 1)
							goto loop326;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee326 = new EarlyExitException( 326, input );
						DebugRecognitionException(eee326);
						throw eee326;
					}
					cnt326++;
				}
				loop326:
					;

				} finally { DebugExitSubRule(326); }

				DebugLocation(502, 55);
				PushFollow(Follow._stmt_block_in_switch_item4718);
				stmt_block508=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block508.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 502:66: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(502, 69);
					// SugarCpp.g:502:69: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(502, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(502, 83);
					// SugarCpp.g:502:83: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(502, 85);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(502, 95);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(502, 95);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(502, 102);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:503:42: ( WS )* 'then' ( WS )* inline_stmt_block
				{
				DebugLocation(503, 42);
				// SugarCpp.g:503:42: ( WS )*
				try { DebugEnterSubRule(327);
				while (true)
				{
					int alt327=2;
					try { DebugEnterDecision(327, false);
					int LA327_0 = input.LA(1);

					if ((LA327_0==WS))
					{
						alt327 = 1;
					}


					} finally { DebugExitDecision(327); }
					switch ( alt327 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:42: WS
						{
						DebugLocation(503, 42);
						WS509=(IToken)Match(input,WS,Follow._WS_in_switch_item4776); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS509);


						}
						break;

					default:
						goto loop327;
					}
				}

				loop327:
					;

				} finally { DebugExitSubRule(327); }

				DebugLocation(503, 46);
				string_literal510=(IToken)Match(input,169,Follow._169_in_switch_item4779); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal510);

				DebugLocation(503, 53);
				// SugarCpp.g:503:53: ( WS )*
				try { DebugEnterSubRule(328);
				while (true)
				{
					int alt328=2;
					try { DebugEnterDecision(328, false);
					int LA328_0 = input.LA(1);

					if ((LA328_0==WS))
					{
						alt328 = 1;
					}


					} finally { DebugExitDecision(328); }
					switch ( alt328 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:53: WS
						{
						DebugLocation(503, 53);
						WS511=(IToken)Match(input,WS,Follow._WS_in_switch_item4781); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS511);


						}
						break;

					default:
						goto loop328;
					}
				}

				loop328:
					;

				} finally { DebugExitSubRule(328); }

				DebugLocation(503, 57);
				PushFollow(Follow._inline_stmt_block_in_switch_item4784);
				inline_stmt_block512=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block512.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:75: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(503, 78);
					// SugarCpp.g:503:78: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 80);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(503, 92);
					// SugarCpp.g:503:92: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 94);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(503, 104);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(503, 104);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(503, 111);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(329); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 53);
			LeaveRule("switch_item", 53);
			LeaveRule_switch_item();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:507:1: stmt_switch : 'switch' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( WS )* ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 54);
		TraceIn("stmt_switch", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal513 = default(IToken);
		IToken WS514 = default(IToken);
		IToken WS516 = default(IToken);
		IToken NEWLINE517 = default(IToken);
		IToken INDENT518 = default(IToken);
		IToken NEWLINE519 = default(IToken);
		IToken WS521 = default(IToken);
		IToken NEWLINE522 = default(IToken);
		IToken string_literal523 = default(IToken);
		IToken NEWLINE524 = default(IToken);
		IToken NEWLINE526 = default(IToken);
		IToken DEDENT527 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block525 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal513_tree = default(CommonTree);
		CommonTree WS514_tree = default(CommonTree);
		CommonTree WS516_tree = default(CommonTree);
		CommonTree NEWLINE517_tree = default(CommonTree);
		CommonTree INDENT518_tree = default(CommonTree);
		CommonTree NEWLINE519_tree = default(CommonTree);
		CommonTree WS521_tree = default(CommonTree);
		CommonTree NEWLINE522_tree = default(CommonTree);
		CommonTree string_literal523_tree = default(CommonTree);
		CommonTree NEWLINE524_tree = default(CommonTree);
		CommonTree NEWLINE526_tree = default(CommonTree);
		CommonTree DEDENT527_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( 'switch' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( WS )* ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:508:4: 'switch' ( ( WS )* expr )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( WS )* ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(508, 4);
			string_literal513=(IToken)Match(input,168,Follow._168_in_stmt_switch4836); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_168.Add(string_literal513);

			DebugLocation(508, 13);
			// SugarCpp.g:508:13: ( ( WS )* expr )?
			int alt331=2;
			try { DebugEnterSubRule(331);
			try { DebugEnterDecision(331, false);
			try
			{
				alt331 = dfa331.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(331); }
			switch (alt331)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:508:14: ( WS )* expr
				{
				DebugLocation(508, 14);
				// SugarCpp.g:508:14: ( WS )*
				try { DebugEnterSubRule(330);
				while (true)
				{
					int alt330=2;
					try { DebugEnterDecision(330, false);
					int LA330_0 = input.LA(1);

					if ((LA330_0==WS))
					{
						alt330 = 1;
					}


					} finally { DebugExitDecision(330); }
					switch ( alt330 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:508:14: WS
						{
						DebugLocation(508, 14);
						WS514=(IToken)Match(input,WS,Follow._WS_in_stmt_switch4839); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS514);


						}
						break;

					default:
						goto loop330;
					}
				}

				loop330:
					;

				} finally { DebugExitSubRule(330); }

				DebugLocation(508, 18);
				PushFollow(Follow._expr_in_stmt_switch4842);
				expr515=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr515.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(331); }

			DebugLocation(508, 25);
			// SugarCpp.g:508:25: ( WS )*
			try { DebugEnterSubRule(332);
			while (true)
			{
				int alt332=2;
				try { DebugEnterDecision(332, false);
				int LA332_0 = input.LA(1);

				if ((LA332_0==WS))
				{
					alt332 = 1;
				}


				} finally { DebugExitDecision(332); }
				switch ( alt332 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:25: WS
					{
					DebugLocation(508, 25);
					WS516=(IToken)Match(input,WS,Follow._WS_in_stmt_switch4846); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS516);


					}
					break;

				default:
					goto loop332;
				}
			}

			loop332:
				;

			} finally { DebugExitSubRule(332); }

			DebugLocation(508, 29);
			// SugarCpp.g:508:29: ( NEWLINE )+
			int cnt333=0;
			try { DebugEnterSubRule(333);
			while (true)
			{
				int alt333=2;
				try { DebugEnterDecision(333, false);
				int LA333_0 = input.LA(1);

				if ((LA333_0==NEWLINE))
				{
					alt333 = 1;
				}


				} finally { DebugExitDecision(333); }
				switch (alt333)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:29: NEWLINE
					{
					DebugLocation(508, 29);
					NEWLINE517=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch4849); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE517);


					}
					break;

				default:
					if (cnt333 >= 1)
						goto loop333;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee333 = new EarlyExitException( 333, input );
					DebugRecognitionException(eee333);
					throw eee333;
				}
				cnt333++;
			}
			loop333:
				;

			} finally { DebugExitSubRule(333); }

			DebugLocation(508, 38);
			INDENT518=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch4852); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT518);

			DebugLocation(508, 45);
			// SugarCpp.g:508:45: ( NEWLINE )*
			try { DebugEnterSubRule(334);
			while (true)
			{
				int alt334=2;
				try { DebugEnterDecision(334, false);
				int LA334_0 = input.LA(1);

				if ((LA334_0==NEWLINE))
				{
					alt334 = 1;
				}


				} finally { DebugExitDecision(334); }
				switch ( alt334 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:45: NEWLINE
					{
					DebugLocation(508, 45);
					NEWLINE519=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch4854); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE519);


					}
					break;

				default:
					goto loop334;
				}
			}

			loop334:
				;

			} finally { DebugExitSubRule(334); }

			DebugLocation(508, 54);
			// SugarCpp.g:508:54: ( switch_item ( WS )* ( NEWLINE )+ )+
			int cnt337=0;
			try { DebugEnterSubRule(337);
			while (true)
			{
				int alt337=2;
				try { DebugEnterDecision(337, false);
				int LA337_0 = input.LA(1);

				if ((LA337_0==179))
				{
					alt337 = 1;
				}


				} finally { DebugExitDecision(337); }
				switch (alt337)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:55: switch_item ( WS )* ( NEWLINE )+
					{
					DebugLocation(508, 55);
					PushFollow(Follow._switch_item_in_stmt_switch4858);
					switch_item520=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item520.Tree);
					DebugLocation(508, 67);
					// SugarCpp.g:508:67: ( WS )*
					try { DebugEnterSubRule(335);
					while (true)
					{
						int alt335=2;
						try { DebugEnterDecision(335, false);
						int LA335_0 = input.LA(1);

						if ((LA335_0==WS))
						{
							alt335 = 1;
						}


						} finally { DebugExitDecision(335); }
						switch ( alt335 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:508:67: WS
							{
							DebugLocation(508, 67);
							WS521=(IToken)Match(input,WS,Follow._WS_in_stmt_switch4860); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS521);


							}
							break;

						default:
							goto loop335;
						}
					}

					loop335:
						;

					} finally { DebugExitSubRule(335); }

					DebugLocation(508, 71);
					// SugarCpp.g:508:71: ( NEWLINE )+
					int cnt336=0;
					try { DebugEnterSubRule(336);
					while (true)
					{
						int alt336=2;
						try { DebugEnterDecision(336, false);
						int LA336_0 = input.LA(1);

						if ((LA336_0==NEWLINE))
						{
							alt336 = 1;
						}


						} finally { DebugExitDecision(336); }
						switch (alt336)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:508:71: NEWLINE
							{
							DebugLocation(508, 71);
							NEWLINE522=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch4863); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE522);


							}
							break;

						default:
							if (cnt336 >= 1)
								goto loop336;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee336 = new EarlyExitException( 336, input );
							DebugRecognitionException(eee336);
							throw eee336;
						}
						cnt336++;
					}
					loop336:
						;

					} finally { DebugExitSubRule(336); }


					}
					break;

				default:
					if (cnt337 >= 1)
						goto loop337;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee337 = new EarlyExitException( 337, input );
					DebugRecognitionException(eee337);
					throw eee337;
				}
				cnt337++;
			}
			loop337:
				;

			} finally { DebugExitSubRule(337); }

			DebugLocation(508, 82);
			// SugarCpp.g:508:82: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt340=2;
			try { DebugEnterSubRule(340);
			try { DebugEnterDecision(340, false);
			int LA340_0 = input.LA(1);

			if ((LA340_0==145))
			{
				alt340 = 1;
			}
			} finally { DebugExitDecision(340); }
			switch (alt340)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:508:83: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(508, 83);
				string_literal523=(IToken)Match(input,145,Follow._145_in_stmt_switch4869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_145.Add(string_literal523);

				DebugLocation(508, 90);
				// SugarCpp.g:508:90: ( NEWLINE )+
				int cnt338=0;
				try { DebugEnterSubRule(338);
				while (true)
				{
					int alt338=2;
					try { DebugEnterDecision(338, false);
					int LA338_0 = input.LA(1);

					if ((LA338_0==NEWLINE))
					{
						alt338 = 1;
					}


					} finally { DebugExitDecision(338); }
					switch (alt338)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:508:90: NEWLINE
						{
						DebugLocation(508, 90);
						NEWLINE524=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch4871); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE524);


						}
						break;

					default:
						if (cnt338 >= 1)
							goto loop338;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee338 = new EarlyExitException( 338, input );
						DebugRecognitionException(eee338);
						throw eee338;
					}
					cnt338++;
				}
				loop338:
					;

				} finally { DebugExitSubRule(338); }

				DebugLocation(508, 99);
				PushFollow(Follow._stmt_block_in_stmt_switch4874);
				stmt_block525=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block525.Tree);
				DebugLocation(508, 110);
				// SugarCpp.g:508:110: ( NEWLINE )*
				try { DebugEnterSubRule(339);
				while (true)
				{
					int alt339=2;
					try { DebugEnterDecision(339, false);
					int LA339_0 = input.LA(1);

					if ((LA339_0==NEWLINE))
					{
						alt339 = 1;
					}


					} finally { DebugExitDecision(339); }
					switch ( alt339 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:508:110: NEWLINE
						{
						DebugLocation(508, 110);
						NEWLINE526=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch4876); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE526);


						}
						break;

					default:
						goto loop339;
					}
				}

				loop339:
					;

				} finally { DebugExitSubRule(339); }


				}
				break;

			}
			} finally { DebugExitSubRule(340); }

			DebugLocation(508, 121);
			DEDENT527=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch4881); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT527);



			{
			// AST REWRITE
			// elements: stmt_block, switch_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 508:128: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(508, 131);
				// SugarCpp.g:508:131: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(508, 133);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(508, 145);
				// SugarCpp.g:508:145: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(508, 145);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(508, 151);
				// SugarCpp.g:508:151: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(508, 151);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(508, 164);
				// SugarCpp.g:508:164: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(508, 164);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 54);
			LeaveRule("stmt_switch", 54);
			LeaveRule_stmt_switch();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:511:1: ident_list : ident ( ( WS )* ',' ( WS )* ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 55);
		TraceIn("ident_list", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS529 = default(IToken);
		IToken char_literal530 = default(IToken);
		IToken WS531 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident532 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS529_tree = default(CommonTree);
		CommonTree char_literal530_tree = default(CommonTree);
		CommonTree WS531_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( ident ( ( WS )* ',' ( WS )* ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: ident ( ( WS )* ',' ( WS )* ident )*
			{
			DebugLocation(512, 4);
			PushFollow(Follow._ident_in_ident_list4907);
			ident528=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident528.Tree);
			DebugLocation(512, 10);
			// SugarCpp.g:512:10: ( ( WS )* ',' ( WS )* ident )*
			try { DebugEnterSubRule(343);
			while (true)
			{
				int alt343=2;
				try { DebugEnterDecision(343, false);
				try
				{
					alt343 = dfa343.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(343); }
				switch ( alt343 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:11: ( WS )* ',' ( WS )* ident
					{
					DebugLocation(512, 11);
					// SugarCpp.g:512:11: ( WS )*
					try { DebugEnterSubRule(341);
					while (true)
					{
						int alt341=2;
						try { DebugEnterDecision(341, false);
						int LA341_0 = input.LA(1);

						if ((LA341_0==WS))
						{
							alt341 = 1;
						}


						} finally { DebugExitDecision(341); }
						switch ( alt341 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:11: WS
							{
							DebugLocation(512, 11);
							WS529=(IToken)Match(input,WS,Follow._WS_in_ident_list4910); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS529);


							}
							break;

						default:
							goto loop341;
						}
					}

					loop341:
						;

					} finally { DebugExitSubRule(341); }

					DebugLocation(512, 15);
					char_literal530=(IToken)Match(input,100,Follow._100_in_ident_list4913); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal530);

					DebugLocation(512, 19);
					// SugarCpp.g:512:19: ( WS )*
					try { DebugEnterSubRule(342);
					while (true)
					{
						int alt342=2;
						try { DebugEnterDecision(342, false);
						int LA342_0 = input.LA(1);

						if ((LA342_0==WS))
						{
							alt342 = 1;
						}


						} finally { DebugExitDecision(342); }
						switch ( alt342 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:512:19: WS
							{
							DebugLocation(512, 19);
							WS531=(IToken)Match(input,WS,Follow._WS_in_ident_list4915); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS531);


							}
							break;

						default:
							goto loop342;
						}
					}

					loop342:
						;

					} finally { DebugExitSubRule(342); }

					DebugLocation(512, 23);
					PushFollow(Follow._ident_in_ident_list4918);
					ident532=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident532.Tree);

					}
					break;

				default:
					goto loop343;
				}
			}

			loop343:
				;

			} finally { DebugExitSubRule(343); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:31: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(512, 34);
				// SugarCpp.g:512:34: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(512, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(512, 47);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(512, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 55);
			LeaveRule("ident_list", 55);
			LeaveRule_ident_list();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:515:1: stmt_alloc : ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 56);
		TraceIn("stmt_alloc", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS534 = default(IToken);
		IToken char_literal535 = default(IToken);
		IToken WS536 = default(IToken);
		IToken WS538 = default(IToken);
		IToken char_literal539 = default(IToken);
		IToken string_literal540 = default(IToken);
		IToken WS541 = default(IToken);
		IToken WS543 = default(IToken);
		IToken WS545 = default(IToken);
		IToken string_literal546 = default(IToken);
		IToken WS547 = default(IToken);
		IToken WS549 = default(IToken);
		IToken char_literal550 = default(IToken);
		IToken WS551 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list533 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr548 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr552 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS534_tree = default(CommonTree);
		CommonTree char_literal535_tree = default(CommonTree);
		CommonTree WS536_tree = default(CommonTree);
		CommonTree WS538_tree = default(CommonTree);
		CommonTree char_literal539_tree = default(CommonTree);
		CommonTree string_literal540_tree = default(CommonTree);
		CommonTree WS541_tree = default(CommonTree);
		CommonTree WS543_tree = default(CommonTree);
		CommonTree WS545_tree = default(CommonTree);
		CommonTree string_literal546_tree = default(CommonTree);
		CommonTree WS547_tree = default(CommonTree);
		CommonTree WS549_tree = default(CommonTree);
		CommonTree char_literal550_tree = default(CommonTree);
		CommonTree WS551_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(515, 1);
		try
		{
			// SugarCpp.g:516:2: ( ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:516:4: ident_list ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(516, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc4940);
			ident_list533=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list533.Tree);
			DebugLocation(516, 15);
			// SugarCpp.g:516:15: ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt356=2;
			try { DebugEnterSubRule(356);
			try { DebugEnterDecision(356, false);
			try
			{
				alt356 = dfa356.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(356); }
			switch (alt356)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:516:17: ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(516, 17);
				// SugarCpp.g:516:17: ( WS )*
				try { DebugEnterSubRule(344);
				while (true)
				{
					int alt344=2;
					try { DebugEnterDecision(344, false);
					int LA344_0 = input.LA(1);

					if ((LA344_0==WS))
					{
						alt344 = 1;
					}


					} finally { DebugExitDecision(344); }
					switch ( alt344 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:516:17: WS
						{
						DebugLocation(516, 17);
						WS534=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc4944); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS534);


						}
						break;

					default:
						goto loop344;
					}
				}

				loop344:
					;

				} finally { DebugExitSubRule(344); }

				DebugLocation(516, 21);
				char_literal535=(IToken)Match(input,111,Follow._111_in_stmt_alloc4947); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal535);

				DebugLocation(516, 25);
				// SugarCpp.g:516:25: ( WS )*
				try { DebugEnterSubRule(345);
				while (true)
				{
					int alt345=2;
					try { DebugEnterDecision(345, false);
					int LA345_0 = input.LA(1);

					if ((LA345_0==WS))
					{
						alt345 = 1;
					}


					} finally { DebugExitDecision(345); }
					switch ( alt345 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:516:25: WS
						{
						DebugLocation(516, 25);
						WS536=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc4949); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS536);


						}
						break;

					default:
						goto loop345;
					}
				}

				loop345:
					;

				} finally { DebugExitSubRule(345); }

				DebugLocation(516, 29);
				PushFollow(Follow._type_name_in_stmt_alloc4952);
				type_name537=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name537.Tree);
				DebugLocation(516, 39);
				// SugarCpp.g:516:39: ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt350=3;
				try { DebugEnterSubRule(350);
				try { DebugEnterDecision(350, false);
				try
				{
					alt350 = dfa350.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(350); }
				switch (alt350)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:516:41: ( WS )* ( '=' | ':=' ) ( WS )* where_expr
					{
					DebugLocation(516, 41);
					// SugarCpp.g:516:41: ( WS )*
					try { DebugEnterSubRule(346);
					while (true)
					{
						int alt346=2;
						try { DebugEnterDecision(346, false);
						int LA346_0 = input.LA(1);

						if ((LA346_0==WS))
						{
							alt346 = 1;
						}


						} finally { DebugExitDecision(346); }
						switch ( alt346 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:516:41: WS
							{
							DebugLocation(516, 41);
							WS538=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc4956); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS538);


							}
							break;

						default:
							goto loop346;
						}
					}

					loop346:
						;

					} finally { DebugExitSubRule(346); }

					DebugLocation(516, 45);
					// SugarCpp.g:516:45: ( '=' | ':=' )
					int alt347=2;
					try { DebugEnterSubRule(347);
					try { DebugEnterDecision(347, false);
					int LA347_0 = input.LA(1);

					if ((LA347_0==121))
					{
						alt347 = 1;
					}
					else if ((LA347_0==113))
					{
						alt347 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 347, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(347); }
					switch (alt347)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:516:46: '='
						{
						DebugLocation(516, 46);
						char_literal539=(IToken)Match(input,121,Follow._121_in_stmt_alloc4960); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal539);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:516:52: ':='
						{
						DebugLocation(516, 52);
						string_literal540=(IToken)Match(input,113,Follow._113_in_stmt_alloc4964); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal540);


						}
						break;

					}
					} finally { DebugExitSubRule(347); }

					DebugLocation(516, 58);
					// SugarCpp.g:516:58: ( WS )*
					try { DebugEnterSubRule(348);
					while (true)
					{
						int alt348=2;
						try { DebugEnterDecision(348, false);
						int LA348_0 = input.LA(1);

						if ((LA348_0==WS))
						{
							alt348 = 1;
						}


						} finally { DebugExitDecision(348); }
						switch ( alt348 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:516:58: WS
							{
							DebugLocation(516, 58);
							WS541=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc4967); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS541);


							}
							break;

						default:
							goto loop348;
						}
					}

					loop348:
						;

					} finally { DebugExitSubRule(348); }

					DebugLocation(516, 62);
					PushFollow(Follow._where_expr_in_stmt_alloc4970);
					where_expr542=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr542.Tree);


					{
					// AST REWRITE
					// elements: type_name, where_expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:74: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(516, 77);
						// SugarCpp.g:516:77: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(516, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(516, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(516, 117);
						// SugarCpp.g:516:117: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 119);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(516, 129);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:517:41: ( WS )* bracket_expr_list
					{
					DebugLocation(517, 41);
					// SugarCpp.g:517:41: ( WS )*
					try { DebugEnterSubRule(349);
					while (true)
					{
						int alt349=2;
						try { DebugEnterDecision(349, false);
						int LA349_0 = input.LA(1);

						if ((LA349_0==WS))
						{
							alt349 = 1;
						}


						} finally { DebugExitDecision(349); }
						switch ( alt349 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:517:41: WS
							{
							DebugLocation(517, 41);
							WS543=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc5029); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS543);


							}
							break;

						default:
							goto loop349;
						}
					}

					loop349:
						;

					} finally { DebugExitSubRule(349); }

					DebugLocation(517, 45);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc5032);
					bracket_expr_list544=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list544.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:64: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(517, 67);
						// SugarCpp.g:517:67: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 69);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(517, 88);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(517, 98);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(517, 109);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:518:23: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 518:23: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(518, 26);
						// SugarCpp.g:518:26: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(518, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(518, 45);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(518, 55);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(518, 66);
						// SugarCpp.g:518:66: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(518, 68);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(350); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:520:8: ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* )
				{
				DebugLocation(520, 8);
				// SugarCpp.g:520:8: ( WS )*
				try { DebugEnterSubRule(351);
				while (true)
				{
					int alt351=2;
					try { DebugEnterDecision(351, false);
					int LA351_0 = input.LA(1);

					if ((LA351_0==WS))
					{
						alt351 = 1;
					}


					} finally { DebugExitDecision(351); }
					switch ( alt351 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:8: WS
						{
						DebugLocation(520, 8);
						WS545=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc5112); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS545);


						}
						break;

					default:
						goto loop351;
					}
				}

				loop351:
					;

				} finally { DebugExitSubRule(351); }

				DebugLocation(520, 12);
				string_literal546=(IToken)Match(input,113,Follow._113_in_stmt_alloc5115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal546);

				DebugLocation(520, 17);
				// SugarCpp.g:520:17: ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:520:18: ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )*
				{
				DebugLocation(520, 18);
				// SugarCpp.g:520:18: ( WS )*
				try { DebugEnterSubRule(352);
				while (true)
				{
					int alt352=2;
					try { DebugEnterDecision(352, false);
					int LA352_0 = input.LA(1);

					if ((LA352_0==WS))
					{
						alt352 = 1;
					}


					} finally { DebugExitDecision(352); }
					switch ( alt352 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:18: WS
						{
						DebugLocation(520, 18);
						WS547=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc5118); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS547);


						}
						break;

					default:
						goto loop352;
					}
				}

				loop352:
					;

				} finally { DebugExitSubRule(352); }

				DebugLocation(520, 22);
				PushFollow(Follow._where_expr_in_stmt_alloc5121);
				where_expr548=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr548.Tree);
				DebugLocation(520, 33);
				// SugarCpp.g:520:33: ( ( WS )* ',' ( WS )* where_expr )*
				try { DebugEnterSubRule(355);
				while (true)
				{
					int alt355=2;
					try { DebugEnterDecision(355, false);
					try
					{
						alt355 = dfa355.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(355); }
					switch ( alt355 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:34: ( WS )* ',' ( WS )* where_expr
						{
						DebugLocation(520, 34);
						// SugarCpp.g:520:34: ( WS )*
						try { DebugEnterSubRule(353);
						while (true)
						{
							int alt353=2;
							try { DebugEnterDecision(353, false);
							int LA353_0 = input.LA(1);

							if ((LA353_0==WS))
							{
								alt353 = 1;
							}


							} finally { DebugExitDecision(353); }
							switch ( alt353 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:34: WS
								{
								DebugLocation(520, 34);
								WS549=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc5124); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS549);


								}
								break;

							default:
								goto loop353;
							}
						}

						loop353:
							;

						} finally { DebugExitSubRule(353); }

						DebugLocation(520, 38);
						char_literal550=(IToken)Match(input,100,Follow._100_in_stmt_alloc5127); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal550);

						DebugLocation(520, 42);
						// SugarCpp.g:520:42: ( WS )*
						try { DebugEnterSubRule(354);
						while (true)
						{
							int alt354=2;
							try { DebugEnterDecision(354, false);
							int LA354_0 = input.LA(1);

							if ((LA354_0==WS))
							{
								alt354 = 1;
							}


							} finally { DebugExitDecision(354); }
							switch ( alt354 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:42: WS
								{
								DebugLocation(520, 42);
								WS551=(IToken)Match(input,WS,Follow._WS_in_stmt_alloc5129); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS551);


								}
								break;

							default:
								goto loop354;
							}
						}

						loop354:
							;

						} finally { DebugExitSubRule(354); }

						DebugLocation(520, 46);
						PushFollow(Follow._where_expr_in_stmt_alloc5132);
						where_expr552=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr552.Tree);

						}
						break;

					default:
						goto loop355;
					}
				}

				loop355:
					;

				} finally { DebugExitSubRule(355); }


				}



				{
				// AST REWRITE
				// elements: ident_list, 113, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 520:60: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(520, 63);
					// SugarCpp.g:520:63: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(520, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(520, 70);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(520, 81);
					// SugarCpp.g:520:81: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(520, 83);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(520, 93);
					// SugarCpp.g:520:93: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(520, 93);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(356); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 56);
			LeaveRule("stmt_alloc", 56);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(521, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:523:1: stmt_modify : lvalue ( ( WS )* modify_expr_op ( WS )* where_expr -> ^( modify_expr_op lvalue where_expr ) | ( WS )* '?=' ( WS )* where_expr -> ^( '?=' lvalue where_expr ) | ( WS )* '<<' ( WS )* where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | ( WS )* '>>' ( WS )* where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 57);
		TraceIn("stmt_modify", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS554 = default(IToken);
		IToken WS556 = default(IToken);
		IToken WS558 = default(IToken);
		IToken string_literal559 = default(IToken);
		IToken WS560 = default(IToken);
		IToken WS562 = default(IToken);
		IToken string_literal563 = default(IToken);
		IToken WS564 = default(IToken);
		IToken WS566 = default(IToken);
		IToken string_literal567 = default(IToken);
		IToken WS568 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue553 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op555 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr565 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr569 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS554_tree = default(CommonTree);
		CommonTree WS556_tree = default(CommonTree);
		CommonTree WS558_tree = default(CommonTree);
		CommonTree string_literal559_tree = default(CommonTree);
		CommonTree WS560_tree = default(CommonTree);
		CommonTree WS562_tree = default(CommonTree);
		CommonTree string_literal563_tree = default(CommonTree);
		CommonTree WS564_tree = default(CommonTree);
		CommonTree WS566_tree = default(CommonTree);
		CommonTree string_literal567_tree = default(CommonTree);
		CommonTree WS568_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(523, 1);
		try
		{
			// SugarCpp.g:524:2: ( lvalue ( ( WS )* modify_expr_op ( WS )* where_expr -> ^( modify_expr_op lvalue where_expr ) | ( WS )* '?=' ( WS )* where_expr -> ^( '?=' lvalue where_expr ) | ( WS )* '<<' ( WS )* where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | ( WS )* '>>' ( WS )* where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:524:4: lvalue ( ( WS )* modify_expr_op ( WS )* where_expr -> ^( modify_expr_op lvalue where_expr ) | ( WS )* '?=' ( WS )* where_expr -> ^( '?=' lvalue where_expr ) | ( WS )* '<<' ( WS )* where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | ( WS )* '>>' ( WS )* where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(524, 4);
			PushFollow(Follow._lvalue_in_stmt_modify5162);
			lvalue553=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue553.Tree);
			DebugLocation(524, 11);
			// SugarCpp.g:524:11: ( ( WS )* modify_expr_op ( WS )* where_expr -> ^( modify_expr_op lvalue where_expr ) | ( WS )* '?=' ( WS )* where_expr -> ^( '?=' lvalue where_expr ) | ( WS )* '<<' ( WS )* where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | ( WS )* '>>' ( WS )* where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt365=5;
			try { DebugEnterSubRule(365);
			try { DebugEnterDecision(365, false);
			try
			{
				alt365 = dfa365.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(365); }
			switch (alt365)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:524:13: ( WS )* modify_expr_op ( WS )* where_expr
				{
				DebugLocation(524, 13);
				// SugarCpp.g:524:13: ( WS )*
				try { DebugEnterSubRule(357);
				while (true)
				{
					int alt357=2;
					try { DebugEnterDecision(357, false);
					int LA357_0 = input.LA(1);

					if ((LA357_0==WS))
					{
						alt357 = 1;
					}


					} finally { DebugExitDecision(357); }
					switch ( alt357 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:13: WS
						{
						DebugLocation(524, 13);
						WS554=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5166); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS554);


						}
						break;

					default:
						goto loop357;
					}
				}

				loop357:
					;

				} finally { DebugExitSubRule(357); }

				DebugLocation(524, 17);
				PushFollow(Follow._modify_expr_op_in_stmt_modify5169);
				modify_expr_op555=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op555.Tree);
				DebugLocation(524, 32);
				// SugarCpp.g:524:32: ( WS )*
				try { DebugEnterSubRule(358);
				while (true)
				{
					int alt358=2;
					try { DebugEnterDecision(358, false);
					int LA358_0 = input.LA(1);

					if ((LA358_0==WS))
					{
						alt358 = 1;
					}


					} finally { DebugExitDecision(358); }
					switch ( alt358 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:32: WS
						{
						DebugLocation(524, 32);
						WS556=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5171); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS556);


						}
						break;

					default:
						goto loop358;
					}
				}

				loop358:
					;

				} finally { DebugExitSubRule(358); }

				DebugLocation(524, 36);
				PushFollow(Follow._where_expr_in_stmt_modify5174);
				where_expr557=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr557.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 524:47: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(524, 50);
					// SugarCpp.g:524:50: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(524, 52);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(524, 67);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(524, 74);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:525:13: ( WS )* '?=' ( WS )* where_expr
				{
				DebugLocation(525, 13);
				// SugarCpp.g:525:13: ( WS )*
				try { DebugEnterSubRule(359);
				while (true)
				{
					int alt359=2;
					try { DebugEnterDecision(359, false);
					int LA359_0 = input.LA(1);

					if ((LA359_0==WS))
					{
						alt359 = 1;
					}


					} finally { DebugExitDecision(359); }
					switch ( alt359 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:13: WS
						{
						DebugLocation(525, 13);
						WS558=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5198); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS558);


						}
						break;

					default:
						goto loop359;
					}
				}

				loop359:
					;

				} finally { DebugExitSubRule(359); }

				DebugLocation(525, 17);
				string_literal559=(IToken)Match(input,130,Follow._130_in_stmt_modify5201); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(string_literal559);

				DebugLocation(525, 22);
				// SugarCpp.g:525:22: ( WS )*
				try { DebugEnterSubRule(360);
				while (true)
				{
					int alt360=2;
					try { DebugEnterDecision(360, false);
					int LA360_0 = input.LA(1);

					if ((LA360_0==WS))
					{
						alt360 = 1;
					}


					} finally { DebugExitDecision(360); }
					switch ( alt360 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:525:22: WS
						{
						DebugLocation(525, 22);
						WS560=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5203); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS560);


						}
						break;

					default:
						goto loop360;
					}
				}

				loop360:
					;

				} finally { DebugExitSubRule(360); }

				DebugLocation(525, 26);
				PushFollow(Follow._where_expr_in_stmt_modify5206);
				where_expr561=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr561.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 525:37: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(525, 40);
					// SugarCpp.g:525:40: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(525, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(525, 47);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(525, 54);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:526:16: ( WS )* '<<' ( WS )* where_expr
				{
				DebugLocation(526, 16);
				// SugarCpp.g:526:16: ( WS )*
				try { DebugEnterSubRule(361);
				while (true)
				{
					int alt361=2;
					try { DebugEnterDecision(361, false);
					int LA361_0 = input.LA(1);

					if ((LA361_0==WS))
					{
						alt361 = 1;
					}


					} finally { DebugExitDecision(361); }
					switch ( alt361 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:16: WS
						{
						DebugLocation(526, 16);
						WS562=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5233); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS562);


						}
						break;

					default:
						goto loop361;
					}
				}

				loop361:
					;

				} finally { DebugExitSubRule(361); }

				DebugLocation(526, 20);
				string_literal563=(IToken)Match(input,117,Follow._117_in_stmt_modify5236); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(string_literal563);

				DebugLocation(526, 25);
				// SugarCpp.g:526:25: ( WS )*
				try { DebugEnterSubRule(362);
				while (true)
				{
					int alt362=2;
					try { DebugEnterDecision(362, false);
					int LA362_0 = input.LA(1);

					if ((LA362_0==WS))
					{
						alt362 = 1;
					}


					} finally { DebugExitDecision(362); }
					switch ( alt362 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:25: WS
						{
						DebugLocation(526, 25);
						WS564=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5238); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS564);


						}
						break;

					default:
						goto loop362;
					}
				}

				loop362:
					;

				} finally { DebugExitSubRule(362); }

				DebugLocation(526, 29);
				PushFollow(Follow._where_expr_in_stmt_modify5241);
				where_expr565=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr565.Tree);


				{
				// AST REWRITE
				// elements: 117, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 526:40: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(526, 43);
					// SugarCpp.g:526:43: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(526, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(526, 54);
					adaptor.AddChild(root_1, stream_117.NextNode());
					DebugLocation(526, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(526, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:527:16: ( WS )* '>>' ( WS )* where_expr
				{
				DebugLocation(527, 16);
				// SugarCpp.g:527:16: ( WS )*
				try { DebugEnterSubRule(363);
				while (true)
				{
					int alt363=2;
					try { DebugEnterDecision(363, false);
					int LA363_0 = input.LA(1);

					if ((LA363_0==WS))
					{
						alt363 = 1;
					}


					} finally { DebugExitDecision(363); }
					switch ( alt363 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:527:16: WS
						{
						DebugLocation(527, 16);
						WS566=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5270); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS566);


						}
						break;

					default:
						goto loop363;
					}
				}

				loop363:
					;

				} finally { DebugExitSubRule(363); }

				DebugLocation(527, 20);
				string_literal567=(IToken)Match(input,127,Follow._127_in_stmt_modify5273); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(string_literal567);

				DebugLocation(527, 25);
				// SugarCpp.g:527:25: ( WS )*
				try { DebugEnterSubRule(364);
				while (true)
				{
					int alt364=2;
					try { DebugEnterDecision(364, false);
					int LA364_0 = input.LA(1);

					if ((LA364_0==WS))
					{
						alt364 = 1;
					}


					} finally { DebugExitDecision(364); }
					switch ( alt364 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:527:25: WS
						{
						DebugLocation(527, 25);
						WS568=(IToken)Match(input,WS,Follow._WS_in_stmt_modify5275); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS568);


						}
						break;

					default:
						goto loop364;
					}
				}

				loop364:
					;

				} finally { DebugExitSubRule(364); }

				DebugLocation(527, 29);
				PushFollow(Follow._where_expr_in_stmt_modify5278);
				where_expr569=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr569.Tree);


				{
				// AST REWRITE
				// elements: 127, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 527:40: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(527, 43);
					// SugarCpp.g:527:43: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(527, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(527, 54);
					adaptor.AddChild(root_1, stream_127.NextNode());
					DebugLocation(527, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(527, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:528:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:7: -> lvalue
				{
					DebugLocation(528, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(365); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 57);
			LeaveRule("stmt_modify", 57);
			LeaveRule_stmt_modify();
		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:531:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 58);
		TraceIn("where_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt570 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(531, 1);
		try
		{
			// SugarCpp.g:532:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:532:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(532, 4);
			PushFollow(Follow._stmt_in_where_item5312);
			stmt570=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt570.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 58);
			LeaveRule("where_item", 58);
			LeaveRule_where_item();
		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:535:1: where_expr : (a= expr -> $a) ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 59);
		TraceIn("where_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS571 = default(IToken);
		IToken NEWLINE572 = default(IToken);
		IToken INDENT573 = default(IToken);
		IToken NEWLINE574 = default(IToken);
		IToken string_literal575 = default(IToken);
		IToken WS576 = default(IToken);
		IToken NEWLINE578 = default(IToken);
		IToken DEDENT579 = default(IToken);
		IToken NEWLINE580 = default(IToken);
		IToken INDENT581 = default(IToken);
		IToken NEWLINE582 = default(IToken);
		IToken WS584 = default(IToken);
		IToken NEWLINE585 = default(IToken);
		IToken DEDENT586 = default(IToken);
		IToken NEWLINE587 = default(IToken);
		IToken DEDENT588 = default(IToken);
		IToken WS589 = default(IToken);
		IToken NEWLINE590 = default(IToken);
		IToken INDENT591 = default(IToken);
		IToken NEWLINE592 = default(IToken);
		IToken WS594 = default(IToken);
		IToken NEWLINE595 = default(IToken);
		IToken DEDENT596 = default(IToken);
		IToken NEWLINE597 = default(IToken);
		IToken DEDENT598 = default(IToken);
		IToken WS599 = default(IToken);
		IToken string_literal600 = default(IToken);
		IToken WS601 = default(IToken);
		IToken NEWLINE602 = default(IToken);
		IToken INDENT603 = default(IToken);
		IToken NEWLINE604 = default(IToken);
		IToken WS606 = default(IToken);
		IToken NEWLINE607 = default(IToken);
		IToken DEDENT608 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item577 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item593 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item605 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS571_tree = default(CommonTree);
		CommonTree NEWLINE572_tree = default(CommonTree);
		CommonTree INDENT573_tree = default(CommonTree);
		CommonTree NEWLINE574_tree = default(CommonTree);
		CommonTree string_literal575_tree = default(CommonTree);
		CommonTree WS576_tree = default(CommonTree);
		CommonTree NEWLINE578_tree = default(CommonTree);
		CommonTree DEDENT579_tree = default(CommonTree);
		CommonTree NEWLINE580_tree = default(CommonTree);
		CommonTree INDENT581_tree = default(CommonTree);
		CommonTree NEWLINE582_tree = default(CommonTree);
		CommonTree WS584_tree = default(CommonTree);
		CommonTree NEWLINE585_tree = default(CommonTree);
		CommonTree DEDENT586_tree = default(CommonTree);
		CommonTree NEWLINE587_tree = default(CommonTree);
		CommonTree DEDENT588_tree = default(CommonTree);
		CommonTree WS589_tree = default(CommonTree);
		CommonTree NEWLINE590_tree = default(CommonTree);
		CommonTree INDENT591_tree = default(CommonTree);
		CommonTree NEWLINE592_tree = default(CommonTree);
		CommonTree WS594_tree = default(CommonTree);
		CommonTree NEWLINE595_tree = default(CommonTree);
		CommonTree DEDENT596_tree = default(CommonTree);
		CommonTree NEWLINE597_tree = default(CommonTree);
		CommonTree DEDENT598_tree = default(CommonTree);
		CommonTree WS599_tree = default(CommonTree);
		CommonTree string_literal600_tree = default(CommonTree);
		CommonTree WS601_tree = default(CommonTree);
		CommonTree NEWLINE602_tree = default(CommonTree);
		CommonTree INDENT603_tree = default(CommonTree);
		CommonTree NEWLINE604_tree = default(CommonTree);
		CommonTree WS606_tree = default(CommonTree);
		CommonTree NEWLINE607_tree = default(CommonTree);
		CommonTree DEDENT608_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(535, 1);
		try
		{
			// SugarCpp.g:536:2: ( (a= expr -> $a) ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:536:4: (a= expr -> $a) ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(536, 4);
			// SugarCpp.g:536:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:536:5: a= expr
			{
			DebugLocation(536, 6);
			PushFollow(Follow._expr_in_where_expr5326);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 536:12: -> $a
			{
				DebugLocation(536, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(536, 19);
			// SugarCpp.g:536:19: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt393=3;
			try { DebugEnterSubRule(393);
			try { DebugEnterDecision(393, false);
			try
			{
				alt393 = dfa393.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(393); }
			switch (alt393)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:536:21: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(536, 21);
				// SugarCpp.g:536:21: ( WS )*
				try { DebugEnterSubRule(366);
				while (true)
				{
					int alt366=2;
					try { DebugEnterDecision(366, false);
					int LA366_0 = input.LA(1);

					if ((LA366_0==WS))
					{
						alt366 = 1;
					}


					} finally { DebugExitDecision(366); }
					switch ( alt366 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:21: WS
						{
						DebugLocation(536, 21);
						WS571=(IToken)Match(input,WS,Follow._WS_in_where_expr5336); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS571);


						}
						break;

					default:
						goto loop366;
					}
				}

				loop366:
					;

				} finally { DebugExitSubRule(366); }

				DebugLocation(536, 25);
				// SugarCpp.g:536:25: ( NEWLINE )+
				int cnt367=0;
				try { DebugEnterSubRule(367);
				while (true)
				{
					int alt367=2;
					try { DebugEnterDecision(367, false);
					int LA367_0 = input.LA(1);

					if ((LA367_0==NEWLINE))
					{
						alt367 = 1;
					}


					} finally { DebugExitDecision(367); }
					switch (alt367)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:25: NEWLINE
						{
						DebugLocation(536, 25);
						NEWLINE572=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5339); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE572);


						}
						break;

					default:
						if (cnt367 >= 1)
							goto loop367;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee367 = new EarlyExitException( 367, input );
						DebugRecognitionException(eee367);
						throw eee367;
					}
					cnt367++;
				}
				loop367:
					;

				} finally { DebugExitSubRule(367); }

				DebugLocation(536, 34);
				INDENT573=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr5342); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT573);

				DebugLocation(536, 41);
				// SugarCpp.g:536:41: ( NEWLINE )*
				try { DebugEnterSubRule(368);
				while (true)
				{
					int alt368=2;
					try { DebugEnterDecision(368, false);
					int LA368_0 = input.LA(1);

					if ((LA368_0==NEWLINE))
					{
						alt368 = 1;
					}


					} finally { DebugExitDecision(368); }
					switch ( alt368 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:41: NEWLINE
						{
						DebugLocation(536, 41);
						NEWLINE574=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5344); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE574);


						}
						break;

					default:
						goto loop368;
					}
				}

				loop368:
					;

				} finally { DebugExitSubRule(368); }

				DebugLocation(536, 50);
				string_literal575=(IToken)Match(input,180,Follow._180_in_where_expr5347); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(string_literal575);

				DebugLocation(536, 58);
				// SugarCpp.g:536:58: ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt385=2;
				try { DebugEnterSubRule(385);
				try { DebugEnterDecision(385, false);
				try
				{
					alt385 = dfa385.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(385); }
				switch (alt385)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:536:60: ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(536, 60);
					// SugarCpp.g:536:60: ( WS )*
					try { DebugEnterSubRule(369);
					while (true)
					{
						int alt369=2;
						try { DebugEnterDecision(369, false);
						int LA369_0 = input.LA(1);

						if ((LA369_0==WS))
						{
							alt369 = 1;
						}


						} finally { DebugExitDecision(369); }
						switch ( alt369 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:536:60: WS
							{
							DebugLocation(536, 60);
							WS576=(IToken)Match(input,WS,Follow._WS_in_where_expr5351); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS576);


							}
							break;

						default:
							goto loop369;
						}
					}

					loop369:
						;

					} finally { DebugExitSubRule(369); }

					DebugLocation(536, 64);
					PushFollow(Follow._where_item_in_where_expr5354);
					where_item577=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item577.Tree);
					DebugLocation(536, 75);
					// SugarCpp.g:536:75: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt377=2;
					try { DebugEnterSubRule(377);
					try { DebugEnterDecision(377, false);
					try
					{
						alt377 = dfa377.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(377); }
					switch (alt377)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:77: ( NEWLINE )* DEDENT
						{
						DebugLocation(536, 77);
						// SugarCpp.g:536:77: ( NEWLINE )*
						try { DebugEnterSubRule(370);
						while (true)
						{
							int alt370=2;
							try { DebugEnterDecision(370, false);
							int LA370_0 = input.LA(1);

							if ((LA370_0==NEWLINE))
							{
								alt370 = 1;
							}


							} finally { DebugExitDecision(370); }
							switch ( alt370 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:536:77: NEWLINE
								{
								DebugLocation(536, 77);
								NEWLINE578=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5358); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE578);


								}
								break;

							default:
								goto loop370;
							}
						}

						loop370:
							;

						} finally { DebugExitSubRule(370); }

						DebugLocation(536, 86);
						DEDENT579=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5361); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT579);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 536:93: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(536, 96);
							// SugarCpp.g:536:96: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(536, 98);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(536, 110);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(536, 121);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:537:29: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(537, 29);
						// SugarCpp.g:537:29: ( NEWLINE )+
						int cnt371=0;
						try { DebugEnterSubRule(371);
						while (true)
						{
							int alt371=2;
							try { DebugEnterDecision(371, false);
							int LA371_0 = input.LA(1);

							if ((LA371_0==NEWLINE))
							{
								alt371 = 1;
							}


							} finally { DebugExitDecision(371); }
							switch (alt371)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:537:29: NEWLINE
								{
								DebugLocation(537, 29);
								NEWLINE580=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5402); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE580);


								}
								break;

							default:
								if (cnt371 >= 1)
									goto loop371;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee371 = new EarlyExitException( 371, input );
								DebugRecognitionException(eee371);
								throw eee371;
							}
							cnt371++;
						}
						loop371:
							;

						} finally { DebugExitSubRule(371); }

						DebugLocation(537, 38);
						INDENT581=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr5405); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT581);

						DebugLocation(537, 45);
						// SugarCpp.g:537:45: ( NEWLINE )*
						try { DebugEnterSubRule(372);
						while (true)
						{
							int alt372=2;
							try { DebugEnterDecision(372, false);
							int LA372_0 = input.LA(1);

							if ((LA372_0==NEWLINE))
							{
								alt372 = 1;
							}


							} finally { DebugExitDecision(372); }
							switch ( alt372 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:537:45: NEWLINE
								{
								DebugLocation(537, 45);
								NEWLINE582=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5407); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE582);


								}
								break;

							default:
								goto loop372;
							}
						}

						loop372:
							;

						} finally { DebugExitSubRule(372); }

						DebugLocation(537, 54);
						// SugarCpp.g:537:54: ( where_item ( WS )* ( NEWLINE )+ )+
						int cnt375=0;
						try { DebugEnterSubRule(375);
						while (true)
						{
							int alt375=2;
							try { DebugEnterDecision(375, false);
							int LA375_0 = input.LA(1);

							if ((LA375_0==IDENT||LA375_0==86||LA375_0==91||LA375_0==93||LA375_0==95||(LA375_0>=97 && LA375_0<=98)||(LA375_0>=101 && LA375_0<=102)||LA375_0==131||LA375_0==143||(LA375_0>=148 && LA375_0<=150)||LA375_0==155||LA375_0==157||LA375_0==161||LA375_0==164||LA375_0==168||(LA375_0>=173 && LA375_0<=177)||LA375_0==181||LA375_0==186))
							{
								alt375 = 1;
							}


							} finally { DebugExitDecision(375); }
							switch (alt375)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:537:55: where_item ( WS )* ( NEWLINE )+
								{
								DebugLocation(537, 55);
								PushFollow(Follow._where_item_in_where_expr5411);
								where_item583=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item583.Tree);
								DebugLocation(537, 66);
								// SugarCpp.g:537:66: ( WS )*
								try { DebugEnterSubRule(373);
								while (true)
								{
									int alt373=2;
									try { DebugEnterDecision(373, false);
									int LA373_0 = input.LA(1);

									if ((LA373_0==WS))
									{
										alt373 = 1;
									}


									} finally { DebugExitDecision(373); }
									switch ( alt373 )
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:537:66: WS
										{
										DebugLocation(537, 66);
										WS584=(IToken)Match(input,WS,Follow._WS_in_where_expr5413); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_WS.Add(WS584);


										}
										break;

									default:
										goto loop373;
									}
								}

								loop373:
									;

								} finally { DebugExitSubRule(373); }

								DebugLocation(537, 70);
								// SugarCpp.g:537:70: ( NEWLINE )+
								int cnt374=0;
								try { DebugEnterSubRule(374);
								while (true)
								{
									int alt374=2;
									try { DebugEnterDecision(374, false);
									int LA374_0 = input.LA(1);

									if ((LA374_0==NEWLINE))
									{
										alt374 = 1;
									}


									} finally { DebugExitDecision(374); }
									switch (alt374)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:537:70: NEWLINE
										{
										DebugLocation(537, 70);
										NEWLINE585=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5416); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE585);


										}
										break;

									default:
										if (cnt374 >= 1)
											goto loop374;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee374 = new EarlyExitException( 374, input );
										DebugRecognitionException(eee374);
										throw eee374;
									}
									cnt374++;
								}
								loop374:
									;

								} finally { DebugExitSubRule(374); }


								}
								break;

							default:
								if (cnt375 >= 1)
									goto loop375;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee375 = new EarlyExitException( 375, input );
								DebugRecognitionException(eee375);
								throw eee375;
							}
							cnt375++;
						}
						loop375:
							;

						} finally { DebugExitSubRule(375); }

						DebugLocation(537, 81);
						DEDENT586=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5421); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT586);

						DebugLocation(537, 88);
						// SugarCpp.g:537:88: ( NEWLINE )*
						try { DebugEnterSubRule(376);
						while (true)
						{
							int alt376=2;
							try { DebugEnterDecision(376, false);
							int LA376_0 = input.LA(1);

							if ((LA376_0==NEWLINE))
							{
								alt376 = 1;
							}


							} finally { DebugExitDecision(376); }
							switch ( alt376 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:537:88: NEWLINE
								{
								DebugLocation(537, 88);
								NEWLINE587=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5423); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE587);


								}
								break;

							default:
								goto loop376;
							}
						}

						loop376:
							;

						} finally { DebugExitSubRule(376); }

						DebugLocation(537, 97);
						DEDENT588=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5426); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT588);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 537:104: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(537, 107);
							// SugarCpp.g:537:107: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(537, 109);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(537, 121);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(537, 132);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(537, 132);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(377); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:539:21: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(539, 21);
					// SugarCpp.g:539:21: ( WS )*
					try { DebugEnterSubRule(378);
					while (true)
					{
						int alt378=2;
						try { DebugEnterDecision(378, false);
						int LA378_0 = input.LA(1);

						if ((LA378_0==WS))
						{
							alt378 = 1;
						}


						} finally { DebugExitDecision(378); }
						switch ( alt378 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:21: WS
							{
							DebugLocation(539, 21);
							WS589=(IToken)Match(input,WS,Follow._WS_in_where_expr5488); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS589);


							}
							break;

						default:
							goto loop378;
						}
					}

					loop378:
						;

					} finally { DebugExitSubRule(378); }

					DebugLocation(539, 25);
					// SugarCpp.g:539:25: ( NEWLINE )+
					int cnt379=0;
					try { DebugEnterSubRule(379);
					while (true)
					{
						int alt379=2;
						try { DebugEnterDecision(379, false);
						int LA379_0 = input.LA(1);

						if ((LA379_0==NEWLINE))
						{
							alt379 = 1;
						}


						} finally { DebugExitDecision(379); }
						switch (alt379)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:25: NEWLINE
							{
							DebugLocation(539, 25);
							NEWLINE590=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5491); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE590);


							}
							break;

						default:
							if (cnt379 >= 1)
								goto loop379;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee379 = new EarlyExitException( 379, input );
							DebugRecognitionException(eee379);
							throw eee379;
						}
						cnt379++;
					}
					loop379:
						;

					} finally { DebugExitSubRule(379); }

					DebugLocation(539, 34);
					INDENT591=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr5494); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT591);

					DebugLocation(539, 41);
					// SugarCpp.g:539:41: ( NEWLINE )*
					try { DebugEnterSubRule(380);
					while (true)
					{
						int alt380=2;
						try { DebugEnterDecision(380, false);
						int LA380_0 = input.LA(1);

						if ((LA380_0==NEWLINE))
						{
							alt380 = 1;
						}


						} finally { DebugExitDecision(380); }
						switch ( alt380 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:41: NEWLINE
							{
							DebugLocation(539, 41);
							NEWLINE592=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5496); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE592);


							}
							break;

						default:
							goto loop380;
						}
					}

					loop380:
						;

					} finally { DebugExitSubRule(380); }

					DebugLocation(539, 50);
					// SugarCpp.g:539:50: ( where_item ( WS )* ( NEWLINE )+ )+
					int cnt383=0;
					try { DebugEnterSubRule(383);
					while (true)
					{
						int alt383=2;
						try { DebugEnterDecision(383, false);
						int LA383_0 = input.LA(1);

						if ((LA383_0==IDENT||LA383_0==86||LA383_0==91||LA383_0==93||LA383_0==95||(LA383_0>=97 && LA383_0<=98)||(LA383_0>=101 && LA383_0<=102)||LA383_0==131||LA383_0==143||(LA383_0>=148 && LA383_0<=150)||LA383_0==155||LA383_0==157||LA383_0==161||LA383_0==164||LA383_0==168||(LA383_0>=173 && LA383_0<=177)||LA383_0==181||LA383_0==186))
						{
							alt383 = 1;
						}


						} finally { DebugExitDecision(383); }
						switch (alt383)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:51: where_item ( WS )* ( NEWLINE )+
							{
							DebugLocation(539, 51);
							PushFollow(Follow._where_item_in_where_expr5500);
							where_item593=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item593.Tree);
							DebugLocation(539, 62);
							// SugarCpp.g:539:62: ( WS )*
							try { DebugEnterSubRule(381);
							while (true)
							{
								int alt381=2;
								try { DebugEnterDecision(381, false);
								int LA381_0 = input.LA(1);

								if ((LA381_0==WS))
								{
									alt381 = 1;
								}


								} finally { DebugExitDecision(381); }
								switch ( alt381 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:539:62: WS
									{
									DebugLocation(539, 62);
									WS594=(IToken)Match(input,WS,Follow._WS_in_where_expr5502); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS594);


									}
									break;

								default:
									goto loop381;
								}
							}

							loop381:
								;

							} finally { DebugExitSubRule(381); }

							DebugLocation(539, 66);
							// SugarCpp.g:539:66: ( NEWLINE )+
							int cnt382=0;
							try { DebugEnterSubRule(382);
							while (true)
							{
								int alt382=2;
								try { DebugEnterDecision(382, false);
								int LA382_0 = input.LA(1);

								if ((LA382_0==NEWLINE))
								{
									alt382 = 1;
								}


								} finally { DebugExitDecision(382); }
								switch (alt382)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:539:66: NEWLINE
									{
									DebugLocation(539, 66);
									NEWLINE595=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5505); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE595);


									}
									break;

								default:
									if (cnt382 >= 1)
										goto loop382;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee382 = new EarlyExitException( 382, input );
									DebugRecognitionException(eee382);
									throw eee382;
								}
								cnt382++;
							}
							loop382:
								;

							} finally { DebugExitSubRule(382); }


							}
							break;

						default:
							if (cnt383 >= 1)
								goto loop383;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee383 = new EarlyExitException( 383, input );
							DebugRecognitionException(eee383);
							throw eee383;
						}
						cnt383++;
					}
					loop383:
						;

					} finally { DebugExitSubRule(383); }

					DebugLocation(539, 77);
					DEDENT596=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5510); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT596);

					DebugLocation(539, 84);
					// SugarCpp.g:539:84: ( NEWLINE )*
					try { DebugEnterSubRule(384);
					while (true)
					{
						int alt384=2;
						try { DebugEnterDecision(384, false);
						int LA384_0 = input.LA(1);

						if ((LA384_0==NEWLINE))
						{
							alt384 = 1;
						}


						} finally { DebugExitDecision(384); }
						switch ( alt384 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:84: NEWLINE
							{
							DebugLocation(539, 84);
							NEWLINE597=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5512); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE597);


							}
							break;

						default:
							goto loop384;
						}
					}

					loop384:
						;

					} finally { DebugExitSubRule(384); }

					DebugLocation(539, 93);
					DEDENT598=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5515); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT598);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 539:100: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(539, 103);
						// SugarCpp.g:539:103: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(539, 105);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(539, 117);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(539, 128);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(539, 128);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(385); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:541:9: ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(541, 9);
				// SugarCpp.g:541:9: ( WS )*
				try { DebugEnterSubRule(386);
				while (true)
				{
					int alt386=2;
					try { DebugEnterDecision(386, false);
					int LA386_0 = input.LA(1);

					if ((LA386_0==WS))
					{
						alt386 = 1;
					}


					} finally { DebugExitDecision(386); }
					switch ( alt386 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:9: WS
						{
						DebugLocation(541, 9);
						WS599=(IToken)Match(input,WS,Follow._WS_in_where_expr5557); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS599);


						}
						break;

					default:
						goto loop386;
					}
				}

				loop386:
					;

				} finally { DebugExitSubRule(386); }

				DebugLocation(541, 13);
				string_literal600=(IToken)Match(input,180,Follow._180_in_where_expr5560); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(string_literal600);

				DebugLocation(541, 21);
				// SugarCpp.g:541:21: ( WS )*
				try { DebugEnterSubRule(387);
				while (true)
				{
					int alt387=2;
					try { DebugEnterDecision(387, false);
					int LA387_0 = input.LA(1);

					if ((LA387_0==WS))
					{
						alt387 = 1;
					}


					} finally { DebugExitDecision(387); }
					switch ( alt387 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:21: WS
						{
						DebugLocation(541, 21);
						WS601=(IToken)Match(input,WS,Follow._WS_in_where_expr5562); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS601);


						}
						break;

					default:
						goto loop387;
					}
				}

				loop387:
					;

				} finally { DebugExitSubRule(387); }

				DebugLocation(541, 25);
				// SugarCpp.g:541:25: ( NEWLINE )+
				int cnt388=0;
				try { DebugEnterSubRule(388);
				while (true)
				{
					int alt388=2;
					try { DebugEnterDecision(388, false);
					int LA388_0 = input.LA(1);

					if ((LA388_0==NEWLINE))
					{
						alt388 = 1;
					}


					} finally { DebugExitDecision(388); }
					switch (alt388)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:25: NEWLINE
						{
						DebugLocation(541, 25);
						NEWLINE602=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5565); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE602);


						}
						break;

					default:
						if (cnt388 >= 1)
							goto loop388;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee388 = new EarlyExitException( 388, input );
						DebugRecognitionException(eee388);
						throw eee388;
					}
					cnt388++;
				}
				loop388:
					;

				} finally { DebugExitSubRule(388); }

				DebugLocation(541, 34);
				INDENT603=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr5568); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT603);

				DebugLocation(541, 41);
				// SugarCpp.g:541:41: ( NEWLINE )*
				try { DebugEnterSubRule(389);
				while (true)
				{
					int alt389=2;
					try { DebugEnterDecision(389, false);
					int LA389_0 = input.LA(1);

					if ((LA389_0==NEWLINE))
					{
						alt389 = 1;
					}


					} finally { DebugExitDecision(389); }
					switch ( alt389 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:41: NEWLINE
						{
						DebugLocation(541, 41);
						NEWLINE604=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5570); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE604);


						}
						break;

					default:
						goto loop389;
					}
				}

				loop389:
					;

				} finally { DebugExitSubRule(389); }

				DebugLocation(541, 50);
				// SugarCpp.g:541:50: ( where_item ( WS )* ( NEWLINE )+ )+
				int cnt392=0;
				try { DebugEnterSubRule(392);
				while (true)
				{
					int alt392=2;
					try { DebugEnterDecision(392, false);
					int LA392_0 = input.LA(1);

					if ((LA392_0==IDENT||LA392_0==86||LA392_0==91||LA392_0==93||LA392_0==95||(LA392_0>=97 && LA392_0<=98)||(LA392_0>=101 && LA392_0<=102)||LA392_0==131||LA392_0==143||(LA392_0>=148 && LA392_0<=150)||LA392_0==155||LA392_0==157||LA392_0==161||LA392_0==164||LA392_0==168||(LA392_0>=173 && LA392_0<=177)||LA392_0==181||LA392_0==186))
					{
						alt392 = 1;
					}


					} finally { DebugExitDecision(392); }
					switch (alt392)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:51: where_item ( WS )* ( NEWLINE )+
						{
						DebugLocation(541, 51);
						PushFollow(Follow._where_item_in_where_expr5574);
						where_item605=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item605.Tree);
						DebugLocation(541, 62);
						// SugarCpp.g:541:62: ( WS )*
						try { DebugEnterSubRule(390);
						while (true)
						{
							int alt390=2;
							try { DebugEnterDecision(390, false);
							int LA390_0 = input.LA(1);

							if ((LA390_0==WS))
							{
								alt390 = 1;
							}


							} finally { DebugExitDecision(390); }
							switch ( alt390 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:541:62: WS
								{
								DebugLocation(541, 62);
								WS606=(IToken)Match(input,WS,Follow._WS_in_where_expr5576); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS606);


								}
								break;

							default:
								goto loop390;
							}
						}

						loop390:
							;

						} finally { DebugExitSubRule(390); }

						DebugLocation(541, 66);
						// SugarCpp.g:541:66: ( NEWLINE )+
						int cnt391=0;
						try { DebugEnterSubRule(391);
						while (true)
						{
							int alt391=2;
							try { DebugEnterDecision(391, false);
							int LA391_0 = input.LA(1);

							if ((LA391_0==NEWLINE))
							{
								alt391 = 1;
							}


							} finally { DebugExitDecision(391); }
							switch (alt391)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:541:66: NEWLINE
								{
								DebugLocation(541, 66);
								NEWLINE607=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr5579); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE607);


								}
								break;

							default:
								if (cnt391 >= 1)
									goto loop391;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee391 = new EarlyExitException( 391, input );
								DebugRecognitionException(eee391);
								throw eee391;
							}
							cnt391++;
						}
						loop391:
							;

						} finally { DebugExitSubRule(391); }


						}
						break;

					default:
						if (cnt392 >= 1)
							goto loop392;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee392 = new EarlyExitException( 392, input );
						DebugRecognitionException(eee392);
						throw eee392;
					}
					cnt392++;
				}
				loop392:
					;

				} finally { DebugExitSubRule(392); }

				DebugLocation(541, 77);
				DEDENT608=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr5584); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT608);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 541:84: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(541, 87);
					// SugarCpp.g:541:87: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(541, 89);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(541, 101);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(541, 112);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(541, 112);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:542:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 542:15: -> expr
				{
					DebugLocation(542, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(393); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 59);
			LeaveRule("where_expr", 59);
			LeaveRule_where_expr();
		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:546:1: let_expr : 'let' ( WS )* where_item ( ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 60);
		TraceIn("let_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal609 = default(IToken);
		IToken WS610 = default(IToken);
		IToken WS612 = default(IToken);
		IToken string_literal613 = default(IToken);
		IToken WS614 = default(IToken);
		IToken WS616 = default(IToken);
		IToken NEWLINE617 = default(IToken);
		IToken INDENT618 = default(IToken);
		IToken NEWLINE619 = default(IToken);
		IToken WS621 = default(IToken);
		IToken NEWLINE622 = default(IToken);
		IToken DEDENT623 = default(IToken);
		IToken WS624 = default(IToken);
		IToken WS626 = default(IToken);
		IToken NEWLINE627 = default(IToken);
		IToken INDENT628 = default(IToken);
		IToken NEWLINE629 = default(IToken);
		IToken WS631 = default(IToken);
		IToken NEWLINE632 = default(IToken);
		IToken WS633 = default(IToken);
		IToken string_literal634 = default(IToken);
		IToken WS635 = default(IToken);
		IToken WS637 = default(IToken);
		IToken NEWLINE638 = default(IToken);
		IToken DEDENT639 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item611 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr615 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr620 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr625 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item630 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr636 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal609_tree = default(CommonTree);
		CommonTree WS610_tree = default(CommonTree);
		CommonTree WS612_tree = default(CommonTree);
		CommonTree string_literal613_tree = default(CommonTree);
		CommonTree WS614_tree = default(CommonTree);
		CommonTree WS616_tree = default(CommonTree);
		CommonTree NEWLINE617_tree = default(CommonTree);
		CommonTree INDENT618_tree = default(CommonTree);
		CommonTree NEWLINE619_tree = default(CommonTree);
		CommonTree WS621_tree = default(CommonTree);
		CommonTree NEWLINE622_tree = default(CommonTree);
		CommonTree DEDENT623_tree = default(CommonTree);
		CommonTree WS624_tree = default(CommonTree);
		CommonTree WS626_tree = default(CommonTree);
		CommonTree NEWLINE627_tree = default(CommonTree);
		CommonTree INDENT628_tree = default(CommonTree);
		CommonTree NEWLINE629_tree = default(CommonTree);
		CommonTree WS631_tree = default(CommonTree);
		CommonTree NEWLINE632_tree = default(CommonTree);
		CommonTree WS633_tree = default(CommonTree);
		CommonTree string_literal634_tree = default(CommonTree);
		CommonTree WS635_tree = default(CommonTree);
		CommonTree WS637_tree = default(CommonTree);
		CommonTree NEWLINE638_tree = default(CommonTree);
		CommonTree DEDENT639_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(546, 1);
		try
		{
			// SugarCpp.g:547:2: ( 'let' ( WS )* where_item ( ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:547:4: 'let' ( WS )* where_item ( ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(547, 4);
			string_literal609=(IToken)Match(input,155,Follow._155_in_let_expr5642); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_155.Add(string_literal609);

			DebugLocation(547, 10);
			// SugarCpp.g:547:10: ( WS )*
			try { DebugEnterSubRule(394);
			while (true)
			{
				int alt394=2;
				try { DebugEnterDecision(394, false);
				int LA394_0 = input.LA(1);

				if ((LA394_0==WS))
				{
					alt394 = 1;
				}


				} finally { DebugExitDecision(394); }
				switch ( alt394 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:547:10: WS
					{
					DebugLocation(547, 10);
					WS610=(IToken)Match(input,WS,Follow._WS_in_let_expr5644); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS610);


					}
					break;

				default:
					goto loop394;
				}
			}

			loop394:
				;

			} finally { DebugExitSubRule(394); }

			DebugLocation(547, 14);
			PushFollow(Follow._where_item_in_let_expr5647);
			where_item611=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item611.Tree);
			DebugLocation(547, 25);
			// SugarCpp.g:547:25: ( ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt415=2;
			try { DebugEnterSubRule(415);
			try { DebugEnterDecision(415, false);
			try
			{
				alt415 = dfa415.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(415); }
			switch (alt415)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:547:27: ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(547, 27);
				// SugarCpp.g:547:27: ( WS )*
				try { DebugEnterSubRule(395);
				while (true)
				{
					int alt395=2;
					try { DebugEnterDecision(395, false);
					int LA395_0 = input.LA(1);

					if ((LA395_0==WS))
					{
						alt395 = 1;
					}


					} finally { DebugExitDecision(395); }
					switch ( alt395 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:547:27: WS
						{
						DebugLocation(547, 27);
						WS612=(IToken)Match(input,WS,Follow._WS_in_let_expr5651); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS612);


						}
						break;

					default:
						goto loop395;
					}
				}

				loop395:
					;

				} finally { DebugExitSubRule(395); }

				DebugLocation(547, 31);
				string_literal613=(IToken)Match(input,152,Follow._152_in_let_expr5654); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_152.Add(string_literal613);

				DebugLocation(547, 36);
				// SugarCpp.g:547:36: ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt404=2;
				try { DebugEnterSubRule(404);
				try { DebugEnterDecision(404, false);
				try
				{
					alt404 = dfa404.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(404); }
				switch (alt404)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:547:38: ( WS )* expr
					{
					DebugLocation(547, 38);
					// SugarCpp.g:547:38: ( WS )*
					try { DebugEnterSubRule(396);
					while (true)
					{
						int alt396=2;
						try { DebugEnterDecision(396, false);
						int LA396_0 = input.LA(1);

						if ((LA396_0==WS))
						{
							alt396 = 1;
						}


						} finally { DebugExitDecision(396); }
						switch ( alt396 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:547:38: WS
							{
							DebugLocation(547, 38);
							WS614=(IToken)Match(input,WS,Follow._WS_in_let_expr5658); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS614);


							}
							break;

						default:
							goto loop396;
						}
					}

					loop396:
						;

					} finally { DebugExitSubRule(396); }

					DebugLocation(547, 42);
					PushFollow(Follow._expr_in_let_expr5661);
					expr615=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr615.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 547:47: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(547, 50);
						// SugarCpp.g:547:50: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(547, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(547, 63);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(547, 68);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(547, 68);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:548:20: ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(548, 20);
					// SugarCpp.g:548:20: ( WS )*
					try { DebugEnterSubRule(397);
					while (true)
					{
						int alt397=2;
						try { DebugEnterDecision(397, false);
						int LA397_0 = input.LA(1);

						if ((LA397_0==WS))
						{
							alt397 = 1;
						}


						} finally { DebugExitDecision(397); }
						switch ( alt397 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:548:20: WS
							{
							DebugLocation(548, 20);
							WS616=(IToken)Match(input,WS,Follow._WS_in_let_expr5693); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS616);


							}
							break;

						default:
							goto loop397;
						}
					}

					loop397:
						;

					} finally { DebugExitSubRule(397); }

					DebugLocation(548, 24);
					// SugarCpp.g:548:24: ( NEWLINE )+
					int cnt398=0;
					try { DebugEnterSubRule(398);
					while (true)
					{
						int alt398=2;
						try { DebugEnterDecision(398, false);
						int LA398_0 = input.LA(1);

						if ((LA398_0==NEWLINE))
						{
							alt398 = 1;
						}


						} finally { DebugExitDecision(398); }
						switch (alt398)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:548:24: NEWLINE
							{
							DebugLocation(548, 24);
							NEWLINE617=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5696); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE617);


							}
							break;

						default:
							if (cnt398 >= 1)
								goto loop398;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee398 = new EarlyExitException( 398, input );
							DebugRecognitionException(eee398);
							throw eee398;
						}
						cnt398++;
					}
					loop398:
						;

					} finally { DebugExitSubRule(398); }

					DebugLocation(548, 33);
					// SugarCpp.g:548:33: ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt403=2;
					try { DebugEnterSubRule(403);
					try { DebugEnterDecision(403, false);
					int LA403_0 = input.LA(1);

					if ((LA403_0==INDENT))
					{
						alt403 = 1;
					}
					else if ((LA403_0==IDENT||LA403_0==NUMBER||LA403_0==STRING||(LA403_0>=WS && LA403_0<=86)||LA403_0==91||LA403_0==93||LA403_0==95||(LA403_0>=97 && LA403_0<=98)||(LA403_0>=101 && LA403_0<=102)||(LA403_0>=131 && LA403_0<=132)||LA403_0==155||LA403_0==158||(LA403_0>=160 && LA403_0<=161)||LA403_0==186))
					{
						alt403 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 403, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(403); }
					switch (alt403)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:548:35: INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT
						{
						DebugLocation(548, 35);
						INDENT618=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr5701); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT618);

						DebugLocation(548, 42);
						// SugarCpp.g:548:42: ( NEWLINE )*
						try { DebugEnterSubRule(399);
						while (true)
						{
							int alt399=2;
							try { DebugEnterDecision(399, false);
							int LA399_0 = input.LA(1);

							if ((LA399_0==NEWLINE))
							{
								alt399 = 1;
							}


							} finally { DebugExitDecision(399); }
							switch ( alt399 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:548:42: NEWLINE
								{
								DebugLocation(548, 42);
								NEWLINE619=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5703); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE619);


								}
								break;

							default:
								goto loop399;
							}
						}

						loop399:
							;

						} finally { DebugExitSubRule(399); }

						DebugLocation(548, 51);
						PushFollow(Follow._expr_in_let_expr5706);
						expr620=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr620.Tree);
						DebugLocation(548, 56);
						// SugarCpp.g:548:56: ( WS )*
						try { DebugEnterSubRule(400);
						while (true)
						{
							int alt400=2;
							try { DebugEnterDecision(400, false);
							int LA400_0 = input.LA(1);

							if ((LA400_0==WS))
							{
								alt400 = 1;
							}


							} finally { DebugExitDecision(400); }
							switch ( alt400 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:548:56: WS
								{
								DebugLocation(548, 56);
								WS621=(IToken)Match(input,WS,Follow._WS_in_let_expr5708); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS621);


								}
								break;

							default:
								goto loop400;
							}
						}

						loop400:
							;

						} finally { DebugExitSubRule(400); }

						DebugLocation(548, 60);
						// SugarCpp.g:548:60: ( NEWLINE )+
						int cnt401=0;
						try { DebugEnterSubRule(401);
						while (true)
						{
							int alt401=2;
							try { DebugEnterDecision(401, false);
							int LA401_0 = input.LA(1);

							if ((LA401_0==NEWLINE))
							{
								alt401 = 1;
							}


							} finally { DebugExitDecision(401); }
							switch (alt401)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:548:60: NEWLINE
								{
								DebugLocation(548, 60);
								NEWLINE622=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5711); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE622);


								}
								break;

							default:
								if (cnt401 >= 1)
									goto loop401;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee401 = new EarlyExitException( 401, input );
								DebugRecognitionException(eee401);
								throw eee401;
							}
							cnt401++;
						}
						loop401:
							;

						} finally { DebugExitSubRule(401); }

						DebugLocation(548, 69);
						DEDENT623=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr5714); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT623);



						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 548:76: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(548, 79);
							// SugarCpp.g:548:79: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(548, 81);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(548, 92);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(548, 97);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(548, 97);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:549:26: ( WS )* expr
						{
						DebugLocation(549, 26);
						// SugarCpp.g:549:26: ( WS )*
						try { DebugEnterSubRule(402);
						while (true)
						{
							int alt402=2;
							try { DebugEnterDecision(402, false);
							int LA402_0 = input.LA(1);

							if ((LA402_0==WS))
							{
								alt402 = 1;
							}


							} finally { DebugExitDecision(402); }
							switch ( alt402 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:549:26: WS
								{
								DebugLocation(549, 26);
								WS624=(IToken)Match(input,WS,Follow._WS_in_let_expr5752); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS624);


								}
								break;

							default:
								goto loop402;
							}
						}

						loop402:
							;

						} finally { DebugExitSubRule(402); }

						DebugLocation(549, 30);
						PushFollow(Follow._expr_in_let_expr5755);
						expr625=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr625.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 549:35: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(549, 38);
							// SugarCpp.g:549:38: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(549, 40);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(549, 51);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(549, 56);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(549, 56);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(403); }


					}
					break;

				}
				} finally { DebugExitSubRule(404); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:552:15: ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT
				{
				DebugLocation(552, 15);
				// SugarCpp.g:552:15: ( WS )*
				try { DebugEnterSubRule(405);
				while (true)
				{
					int alt405=2;
					try { DebugEnterDecision(405, false);
					int LA405_0 = input.LA(1);

					if ((LA405_0==WS))
					{
						alt405 = 1;
					}


					} finally { DebugExitDecision(405); }
					switch ( alt405 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:15: WS
						{
						DebugLocation(552, 15);
						WS626=(IToken)Match(input,WS,Follow._WS_in_let_expr5826); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS626);


						}
						break;

					default:
						goto loop405;
					}
				}

				loop405:
					;

				} finally { DebugExitSubRule(405); }

				DebugLocation(552, 19);
				// SugarCpp.g:552:19: ( NEWLINE )+
				int cnt406=0;
				try { DebugEnterSubRule(406);
				while (true)
				{
					int alt406=2;
					try { DebugEnterDecision(406, false);
					int LA406_0 = input.LA(1);

					if ((LA406_0==NEWLINE))
					{
						alt406 = 1;
					}


					} finally { DebugExitDecision(406); }
					switch (alt406)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:19: NEWLINE
						{
						DebugLocation(552, 19);
						NEWLINE627=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5829); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE627);


						}
						break;

					default:
						if (cnt406 >= 1)
							goto loop406;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee406 = new EarlyExitException( 406, input );
						DebugRecognitionException(eee406);
						throw eee406;
					}
					cnt406++;
				}
				loop406:
					;

				} finally { DebugExitSubRule(406); }

				DebugLocation(552, 28);
				INDENT628=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr5832); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT628);

				DebugLocation(552, 35);
				// SugarCpp.g:552:35: ( NEWLINE )*
				try { DebugEnterSubRule(407);
				while (true)
				{
					int alt407=2;
					try { DebugEnterDecision(407, false);
					int LA407_0 = input.LA(1);

					if ((LA407_0==NEWLINE))
					{
						alt407 = 1;
					}


					} finally { DebugExitDecision(407); }
					switch ( alt407 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:35: NEWLINE
						{
						DebugLocation(552, 35);
						NEWLINE629=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5834); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE629);


						}
						break;

					default:
						goto loop407;
					}
				}

				loop407:
					;

				} finally { DebugExitSubRule(407); }

				DebugLocation(552, 44);
				// SugarCpp.g:552:44: ( where_item ( WS )* ( NEWLINE )+ )+
				int cnt410=0;
				try { DebugEnterSubRule(410);
				while (true)
				{
					int alt410=2;
					try { DebugEnterDecision(410, false);
					int LA410_0 = input.LA(1);

					if ((LA410_0==IDENT||LA410_0==86||LA410_0==91||LA410_0==93||LA410_0==95||(LA410_0>=97 && LA410_0<=98)||(LA410_0>=101 && LA410_0<=102)||LA410_0==131||LA410_0==143||(LA410_0>=148 && LA410_0<=150)||LA410_0==155||LA410_0==157||LA410_0==161||LA410_0==164||LA410_0==168||(LA410_0>=173 && LA410_0<=177)||LA410_0==181||LA410_0==186))
					{
						alt410 = 1;
					}


					} finally { DebugExitDecision(410); }
					switch (alt410)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:45: where_item ( WS )* ( NEWLINE )+
						{
						DebugLocation(552, 45);
						PushFollow(Follow._where_item_in_let_expr5838);
						where_item630=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item630.Tree);
						DebugLocation(552, 56);
						// SugarCpp.g:552:56: ( WS )*
						try { DebugEnterSubRule(408);
						while (true)
						{
							int alt408=2;
							try { DebugEnterDecision(408, false);
							int LA408_0 = input.LA(1);

							if ((LA408_0==WS))
							{
								alt408 = 1;
							}


							} finally { DebugExitDecision(408); }
							switch ( alt408 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:552:56: WS
								{
								DebugLocation(552, 56);
								WS631=(IToken)Match(input,WS,Follow._WS_in_let_expr5840); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS631);


								}
								break;

							default:
								goto loop408;
							}
						}

						loop408:
							;

						} finally { DebugExitSubRule(408); }

						DebugLocation(552, 60);
						// SugarCpp.g:552:60: ( NEWLINE )+
						int cnt409=0;
						try { DebugEnterSubRule(409);
						while (true)
						{
							int alt409=2;
							try { DebugEnterDecision(409, false);
							int LA409_0 = input.LA(1);

							if ((LA409_0==NEWLINE))
							{
								alt409 = 1;
							}


							} finally { DebugExitDecision(409); }
							switch (alt409)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:552:60: NEWLINE
								{
								DebugLocation(552, 60);
								NEWLINE632=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5843); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE632);


								}
								break;

							default:
								if (cnt409 >= 1)
									goto loop409;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee409 = new EarlyExitException( 409, input );
								DebugRecognitionException(eee409);
								throw eee409;
							}
							cnt409++;
						}
						loop409:
							;

						} finally { DebugExitSubRule(409); }


						}
						break;

					default:
						if (cnt410 >= 1)
							goto loop410;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee410 = new EarlyExitException( 410, input );
						DebugRecognitionException(eee410);
						throw eee410;
					}
					cnt410++;
				}
				loop410:
					;

				} finally { DebugExitSubRule(410); }

				DebugLocation(552, 71);
				// SugarCpp.g:552:71: ( WS )*
				try { DebugEnterSubRule(411);
				while (true)
				{
					int alt411=2;
					try { DebugEnterDecision(411, false);
					int LA411_0 = input.LA(1);

					if ((LA411_0==WS))
					{
						alt411 = 1;
					}


					} finally { DebugExitDecision(411); }
					switch ( alt411 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:71: WS
						{
						DebugLocation(552, 71);
						WS633=(IToken)Match(input,WS,Follow._WS_in_let_expr5848); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS633);


						}
						break;

					default:
						goto loop411;
					}
				}

				loop411:
					;

				} finally { DebugExitSubRule(411); }

				DebugLocation(552, 75);
				string_literal634=(IToken)Match(input,152,Follow._152_in_let_expr5851); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_152.Add(string_literal634);

				DebugLocation(552, 80);
				// SugarCpp.g:552:80: ( WS )*
				try { DebugEnterSubRule(412);
				while (true)
				{
					int alt412=2;
					try { DebugEnterDecision(412, false);
					int LA412_0 = input.LA(1);

					if ((LA412_0==WS))
					{
						alt412 = 1;
					}


					} finally { DebugExitDecision(412); }
					switch ( alt412 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:80: WS
						{
						DebugLocation(552, 80);
						WS635=(IToken)Match(input,WS,Follow._WS_in_let_expr5853); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS635);


						}
						break;

					default:
						goto loop412;
					}
				}

				loop412:
					;

				} finally { DebugExitSubRule(412); }

				DebugLocation(552, 84);
				PushFollow(Follow._expr_in_let_expr5856);
				expr636=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr636.Tree);
				DebugLocation(552, 89);
				// SugarCpp.g:552:89: ( WS )*
				try { DebugEnterSubRule(413);
				while (true)
				{
					int alt413=2;
					try { DebugEnterDecision(413, false);
					int LA413_0 = input.LA(1);

					if ((LA413_0==WS))
					{
						alt413 = 1;
					}


					} finally { DebugExitDecision(413); }
					switch ( alt413 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:89: WS
						{
						DebugLocation(552, 89);
						WS637=(IToken)Match(input,WS,Follow._WS_in_let_expr5858); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS637);


						}
						break;

					default:
						goto loop413;
					}
				}

				loop413:
					;

				} finally { DebugExitSubRule(413); }

				DebugLocation(552, 93);
				// SugarCpp.g:552:93: ( NEWLINE )+
				int cnt414=0;
				try { DebugEnterSubRule(414);
				while (true)
				{
					int alt414=2;
					try { DebugEnterDecision(414, false);
					int LA414_0 = input.LA(1);

					if ((LA414_0==NEWLINE))
					{
						alt414 = 1;
					}


					} finally { DebugExitDecision(414); }
					switch (alt414)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:93: NEWLINE
						{
						DebugLocation(552, 93);
						NEWLINE638=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr5861); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE638);


						}
						break;

					default:
						if (cnt414 >= 1)
							goto loop414;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee414 = new EarlyExitException( 414, input );
						DebugRecognitionException(eee414);
						throw eee414;
					}
					cnt414++;
				}
				loop414:
					;

				} finally { DebugExitSubRule(414); }

				DebugLocation(552, 102);
				DEDENT639=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr5864); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT639);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 552:109: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(552, 112);
					// SugarCpp.g:552:112: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(552, 114);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(552, 125);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(552, 130);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(552, 130);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(415); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 60);
			LeaveRule("let_expr", 60);
			LeaveRule_let_expr();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:556:1: match_item : '|' ( WS )* expr ( WS )* '=>' ( WS )* where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 61);
		TraceIn("match_item", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal640 = default(IToken);
		IToken WS641 = default(IToken);
		IToken WS643 = default(IToken);
		IToken string_literal644 = default(IToken);
		IToken WS645 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr642 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr646 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal640_tree = default(CommonTree);
		CommonTree WS641_tree = default(CommonTree);
		CommonTree WS643_tree = default(CommonTree);
		CommonTree string_literal644_tree = default(CommonTree);
		CommonTree WS645_tree = default(CommonTree);
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( '|' ( WS )* expr ( WS )* '=>' ( WS )* where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:557:4: '|' ( WS )* expr ( WS )* '=>' ( WS )* where_expr
			{
			DebugLocation(557, 4);
			char_literal640=(IToken)Match(input,182,Follow._182_in_match_item5900); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_182.Add(char_literal640);

			DebugLocation(557, 8);
			// SugarCpp.g:557:8: ( WS )*
			try { DebugEnterSubRule(416);
			while (true)
			{
				int alt416=2;
				try { DebugEnterDecision(416, false);
				int LA416_0 = input.LA(1);

				if ((LA416_0==WS))
				{
					alt416 = 1;
				}


				} finally { DebugExitDecision(416); }
				switch ( alt416 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:557:8: WS
					{
					DebugLocation(557, 8);
					WS641=(IToken)Match(input,WS,Follow._WS_in_match_item5902); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS641);


					}
					break;

				default:
					goto loop416;
				}
			}

			loop416:
				;

			} finally { DebugExitSubRule(416); }

			DebugLocation(557, 12);
			PushFollow(Follow._expr_in_match_item5905);
			expr642=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr642.Tree);
			DebugLocation(557, 17);
			// SugarCpp.g:557:17: ( WS )*
			try { DebugEnterSubRule(417);
			while (true)
			{
				int alt417=2;
				try { DebugEnterDecision(417, false);
				int LA417_0 = input.LA(1);

				if ((LA417_0==WS))
				{
					alt417 = 1;
				}


				} finally { DebugExitDecision(417); }
				switch ( alt417 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:557:17: WS
					{
					DebugLocation(557, 17);
					WS643=(IToken)Match(input,WS,Follow._WS_in_match_item5907); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS643);


					}
					break;

				default:
					goto loop417;
				}
			}

			loop417:
				;

			} finally { DebugExitSubRule(417); }

			DebugLocation(557, 21);
			string_literal644=(IToken)Match(input,124,Follow._124_in_match_item5910); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal644);

			DebugLocation(557, 26);
			// SugarCpp.g:557:26: ( WS )*
			try { DebugEnterSubRule(418);
			while (true)
			{
				int alt418=2;
				try { DebugEnterDecision(418, false);
				int LA418_0 = input.LA(1);

				if ((LA418_0==WS))
				{
					alt418 = 1;
				}


				} finally { DebugExitDecision(418); }
				switch ( alt418 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:557:26: WS
					{
					DebugLocation(557, 26);
					WS645=(IToken)Match(input,WS,Follow._WS_in_match_item5912); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS645);


					}
					break;

				default:
					goto loop418;
				}
			}

			loop418:
				;

			} finally { DebugExitSubRule(418); }

			DebugLocation(557, 30);
			PushFollow(Follow._where_expr_in_match_item5915);
			where_expr646=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr646.Tree);


			{
			// AST REWRITE
			// elements: expr, where_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 557:41: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(557, 44);
				// SugarCpp.g:557:44: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(557, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(557, 62);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(557, 67);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 61);
			LeaveRule("match_item", 61);
			LeaveRule_match_item();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:560:1: match_expr : 'match' ( ( WS )* expr )? ( ( WS )* 'returns' ( WS )* type_name )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 62);
		TraceIn("match_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal647 = default(IToken);
		IToken WS648 = default(IToken);
		IToken WS650 = default(IToken);
		IToken string_literal651 = default(IToken);
		IToken WS652 = default(IToken);
		IToken WS654 = default(IToken);
		IToken NEWLINE655 = default(IToken);
		IToken INDENT656 = default(IToken);
		IToken NEWLINE657 = default(IToken);
		IToken WS659 = default(IToken);
		IToken NEWLINE660 = default(IToken);
		IToken DEDENT661 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr649 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name653 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item658 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal647_tree = default(CommonTree);
		CommonTree WS648_tree = default(CommonTree);
		CommonTree WS650_tree = default(CommonTree);
		CommonTree string_literal651_tree = default(CommonTree);
		CommonTree WS652_tree = default(CommonTree);
		CommonTree WS654_tree = default(CommonTree);
		CommonTree NEWLINE655_tree = default(CommonTree);
		CommonTree INDENT656_tree = default(CommonTree);
		CommonTree NEWLINE657_tree = default(CommonTree);
		CommonTree WS659_tree = default(CommonTree);
		CommonTree NEWLINE660_tree = default(CommonTree);
		CommonTree DEDENT661_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( 'match' ( ( WS )* expr )? ( ( WS )* 'returns' ( WS )* type_name )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:561:4: 'match' ( ( WS )* expr )? ( ( WS )* 'returns' ( WS )* type_name )? ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(561, 4);
			string_literal647=(IToken)Match(input,158,Follow._158_in_match_expr5936); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_158.Add(string_literal647);

			DebugLocation(561, 12);
			// SugarCpp.g:561:12: ( ( WS )* expr )?
			int alt420=2;
			try { DebugEnterSubRule(420);
			try { DebugEnterDecision(420, false);
			try
			{
				alt420 = dfa420.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(420); }
			switch (alt420)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:561:13: ( WS )* expr
				{
				DebugLocation(561, 13);
				// SugarCpp.g:561:13: ( WS )*
				try { DebugEnterSubRule(419);
				while (true)
				{
					int alt419=2;
					try { DebugEnterDecision(419, false);
					int LA419_0 = input.LA(1);

					if ((LA419_0==WS))
					{
						alt419 = 1;
					}


					} finally { DebugExitDecision(419); }
					switch ( alt419 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:561:13: WS
						{
						DebugLocation(561, 13);
						WS648=(IToken)Match(input,WS,Follow._WS_in_match_expr5939); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS648);


						}
						break;

					default:
						goto loop419;
					}
				}

				loop419:
					;

				} finally { DebugExitSubRule(419); }

				DebugLocation(561, 17);
				PushFollow(Follow._expr_in_match_expr5942);
				expr649=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr649.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(420); }

			DebugLocation(561, 24);
			// SugarCpp.g:561:24: ( ( WS )* 'returns' ( WS )* type_name )?
			int alt423=2;
			try { DebugEnterSubRule(423);
			try { DebugEnterDecision(423, false);
			try
			{
				alt423 = dfa423.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(423); }
			switch (alt423)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:561:25: ( WS )* 'returns' ( WS )* type_name
				{
				DebugLocation(561, 25);
				// SugarCpp.g:561:25: ( WS )*
				try { DebugEnterSubRule(421);
				while (true)
				{
					int alt421=2;
					try { DebugEnterDecision(421, false);
					int LA421_0 = input.LA(1);

					if ((LA421_0==WS))
					{
						alt421 = 1;
					}


					} finally { DebugExitDecision(421); }
					switch ( alt421 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:561:25: WS
						{
						DebugLocation(561, 25);
						WS650=(IToken)Match(input,WS,Follow._WS_in_match_expr5947); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS650);


						}
						break;

					default:
						goto loop421;
					}
				}

				loop421:
					;

				} finally { DebugExitSubRule(421); }

				DebugLocation(561, 29);
				string_literal651=(IToken)Match(input,165,Follow._165_in_match_expr5950); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal651);

				DebugLocation(561, 39);
				// SugarCpp.g:561:39: ( WS )*
				try { DebugEnterSubRule(422);
				while (true)
				{
					int alt422=2;
					try { DebugEnterDecision(422, false);
					int LA422_0 = input.LA(1);

					if ((LA422_0==WS))
					{
						alt422 = 1;
					}


					} finally { DebugExitDecision(422); }
					switch ( alt422 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:561:39: WS
						{
						DebugLocation(561, 39);
						WS652=(IToken)Match(input,WS,Follow._WS_in_match_expr5952); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS652);


						}
						break;

					default:
						goto loop422;
					}
				}

				loop422:
					;

				} finally { DebugExitSubRule(422); }

				DebugLocation(561, 43);
				PushFollow(Follow._type_name_in_match_expr5955);
				type_name653=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name653.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(423); }

			DebugLocation(561, 55);
			// SugarCpp.g:561:55: ( WS )*
			try { DebugEnterSubRule(424);
			while (true)
			{
				int alt424=2;
				try { DebugEnterDecision(424, false);
				int LA424_0 = input.LA(1);

				if ((LA424_0==WS))
				{
					alt424 = 1;
				}


				} finally { DebugExitDecision(424); }
				switch ( alt424 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:55: WS
					{
					DebugLocation(561, 55);
					WS654=(IToken)Match(input,WS,Follow._WS_in_match_expr5959); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS654);


					}
					break;

				default:
					goto loop424;
				}
			}

			loop424:
				;

			} finally { DebugExitSubRule(424); }

			DebugLocation(561, 59);
			// SugarCpp.g:561:59: ( NEWLINE )+
			int cnt425=0;
			try { DebugEnterSubRule(425);
			while (true)
			{
				int alt425=2;
				try { DebugEnterDecision(425, false);
				int LA425_0 = input.LA(1);

				if ((LA425_0==NEWLINE))
				{
					alt425 = 1;
				}


				} finally { DebugExitDecision(425); }
				switch (alt425)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:59: NEWLINE
					{
					DebugLocation(561, 59);
					NEWLINE655=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr5962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE655);


					}
					break;

				default:
					if (cnt425 >= 1)
						goto loop425;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee425 = new EarlyExitException( 425, input );
					DebugRecognitionException(eee425);
					throw eee425;
				}
				cnt425++;
			}
			loop425:
				;

			} finally { DebugExitSubRule(425); }

			DebugLocation(561, 68);
			INDENT656=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr5965); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT656);

			DebugLocation(561, 75);
			// SugarCpp.g:561:75: ( NEWLINE )*
			try { DebugEnterSubRule(426);
			while (true)
			{
				int alt426=2;
				try { DebugEnterDecision(426, false);
				int LA426_0 = input.LA(1);

				if ((LA426_0==NEWLINE))
				{
					alt426 = 1;
				}


				} finally { DebugExitDecision(426); }
				switch ( alt426 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:75: NEWLINE
					{
					DebugLocation(561, 75);
					NEWLINE657=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr5967); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE657);


					}
					break;

				default:
					goto loop426;
				}
			}

			loop426:
				;

			} finally { DebugExitSubRule(426); }

			DebugLocation(561, 84);
			// SugarCpp.g:561:84: ( match_item ( WS )* ( NEWLINE )+ )+
			int cnt429=0;
			try { DebugEnterSubRule(429);
			while (true)
			{
				int alt429=2;
				try { DebugEnterDecision(429, false);
				int LA429_0 = input.LA(1);

				if ((LA429_0==182))
				{
					alt429 = 1;
				}


				} finally { DebugExitDecision(429); }
				switch (alt429)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:85: match_item ( WS )* ( NEWLINE )+
					{
					DebugLocation(561, 85);
					PushFollow(Follow._match_item_in_match_expr5971);
					match_item658=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item658.Tree);
					DebugLocation(561, 96);
					// SugarCpp.g:561:96: ( WS )*
					try { DebugEnterSubRule(427);
					while (true)
					{
						int alt427=2;
						try { DebugEnterDecision(427, false);
						int LA427_0 = input.LA(1);

						if ((LA427_0==WS))
						{
							alt427 = 1;
						}


						} finally { DebugExitDecision(427); }
						switch ( alt427 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:561:96: WS
							{
							DebugLocation(561, 96);
							WS659=(IToken)Match(input,WS,Follow._WS_in_match_expr5973); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS659);


							}
							break;

						default:
							goto loop427;
						}
					}

					loop427:
						;

					} finally { DebugExitSubRule(427); }

					DebugLocation(561, 100);
					// SugarCpp.g:561:100: ( NEWLINE )+
					int cnt428=0;
					try { DebugEnterSubRule(428);
					while (true)
					{
						int alt428=2;
						try { DebugEnterDecision(428, false);
						int LA428_0 = input.LA(1);

						if ((LA428_0==NEWLINE))
						{
							alt428 = 1;
						}


						} finally { DebugExitDecision(428); }
						switch (alt428)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:561:100: NEWLINE
							{
							DebugLocation(561, 100);
							NEWLINE660=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr5976); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE660);


							}
							break;

						default:
							if (cnt428 >= 1)
								goto loop428;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee428 = new EarlyExitException( 428, input );
							DebugRecognitionException(eee428);
							throw eee428;
						}
						cnt428++;
					}
					loop428:
						;

					} finally { DebugExitSubRule(428); }


					}
					break;

				default:
					if (cnt429 >= 1)
						goto loop429;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee429 = new EarlyExitException( 429, input );
					DebugRecognitionException(eee429);
					throw eee429;
				}
				cnt429++;
			}
			loop429:
				;

			} finally { DebugExitSubRule(429); }

			DebugLocation(561, 111);
			DEDENT661=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr5981); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT661);



			{
			// AST REWRITE
			// elements: expr, type_name, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 561:118: -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
			{
				DebugLocation(561, 121);
				// SugarCpp.g:561:121: ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(561, 123);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(561, 134);
				// SugarCpp.g:561:134: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(561, 134);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(561, 140);
				// SugarCpp.g:561:140: ( type_name )?
				if (stream_type_name.HasNext)
				{
					DebugLocation(561, 140);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();
				DebugLocation(561, 151);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(561, 151);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 62);
			LeaveRule("match_expr", 62);
			LeaveRule_match_expr();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:564:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 63);
		TraceIn("expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr662 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr663 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr664 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(564, 1);
		try
		{
			// SugarCpp.g:565:2: ( feed_expr | match_expr | let_expr )
			int alt430=3;
			try { DebugEnterDecision(430, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 86:
			case 91:
			case 93:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 131:
			case 132:
			case 160:
			case 161:
			case 186:
				{
				alt430 = 1;
				}
				break;
			case 158:
				{
				alt430 = 2;
				}
				break;
			case 155:
				{
				alt430 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 430, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(430); }
			switch (alt430)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:565:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(565, 4);
				PushFollow(Follow._feed_expr_in_expr6007);
				feed_expr662=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr662.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:566:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(566, 4);
				PushFollow(Follow._match_expr_in_expr6012);
				match_expr663=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr663.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:567:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(567, 4);
				PushFollow(Follow._let_expr_in_expr6017);
				let_expr664=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr664.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 63);
			LeaveRule("expr", 63);
			LeaveRule_expr();
		}
		DebugLocation(568, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:570:1: feed_expr : ( ( modify_expr ( WS )* ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( ( WS )* '<|' ( WS )* list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | ( WS )* '|>' ( WS )* list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 64);
		TraceIn("feed_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS665 = default(IToken);
		IToken string_literal666 = default(IToken);
		IToken WS667 = default(IToken);
		IToken WS669 = default(IToken);
		IToken string_literal670 = default(IToken);
		IToken WS671 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr668 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr672 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr673 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS665_tree = default(CommonTree);
		CommonTree string_literal666_tree = default(CommonTree);
		CommonTree WS667_tree = default(CommonTree);
		CommonTree WS669_tree = default(CommonTree);
		CommonTree string_literal670_tree = default(CommonTree);
		CommonTree WS671_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(570, 1);
		try
		{
			// SugarCpp.g:571:2: ( ( modify_expr ( WS )* ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( ( WS )* '<|' ( WS )* list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | ( WS )* '|>' ( WS )* list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt436=2;
			try { DebugEnterDecision(436, false);
			switch (input.LA(1))
			{
			case 93:
				{
				int LA436_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 161:
			case 186:
				{
				int LA436_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 160:
				{
				int LA436_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA436_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA436_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA436_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA436_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt436 = 1;
				}
				else if ((true))
				{
					alt436 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				alt436 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 436, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(436); }
			switch (alt436)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:571:4: ( modify_expr ( WS )* ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( ( WS )* '<|' ( WS )* list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | ( WS )* '|>' ( WS )* list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(571, 40);
				// SugarCpp.g:571:40: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:571:41: a= modify_expr
				{
				DebugLocation(571, 42);
				PushFollow(Follow._modify_expr_in_feed_expr6049);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 571:55: -> $a
				{
					DebugLocation(571, 59);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(571, 62);
				// SugarCpp.g:571:62: ( ( WS )* '<|' ( WS )* list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | ( WS )* '|>' ( WS )* list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt435=2;
				try { DebugEnterSubRule(435);
				try { DebugEnterDecision(435, false);
				try
				{
					alt435 = dfa435.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(435); }
				switch (alt435)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:64: ( WS )* '<|' ( WS )* list_expr
					{
					DebugLocation(571, 64);
					// SugarCpp.g:571:64: ( WS )*
					try { DebugEnterSubRule(431);
					while (true)
					{
						int alt431=2;
						try { DebugEnterDecision(431, false);
						int LA431_0 = input.LA(1);

						if ((LA431_0==WS))
						{
							alt431 = 1;
						}


						} finally { DebugExitDecision(431); }
						switch ( alt431 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:571:64: WS
							{
							DebugLocation(571, 64);
							WS665=(IToken)Match(input,WS,Follow._WS_in_feed_expr6059); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS665);


							}
							break;

						default:
							goto loop431;
						}
					}

					loop431:
						;

					} finally { DebugExitSubRule(431); }

					DebugLocation(571, 68);
					string_literal666=(IToken)Match(input,120,Follow._120_in_feed_expr6062); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_120.Add(string_literal666);

					DebugLocation(571, 73);
					// SugarCpp.g:571:73: ( WS )*
					try { DebugEnterSubRule(432);
					while (true)
					{
						int alt432=2;
						try { DebugEnterDecision(432, false);
						int LA432_0 = input.LA(1);

						if ((LA432_0==WS))
						{
							alt432 = 1;
						}


						} finally { DebugExitDecision(432); }
						switch ( alt432 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:571:73: WS
							{
							DebugLocation(571, 73);
							WS667=(IToken)Match(input,WS,Follow._WS_in_feed_expr6064); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS667);


							}
							break;

						default:
							goto loop432;
						}
					}

					loop432:
						;

					} finally { DebugExitSubRule(432); }

					DebugLocation(571, 77);
					PushFollow(Follow._list_expr_in_feed_expr6067);
					list_expr668=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr668.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 571:87: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(571, 90);
						// SugarCpp.g:571:90: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(571, 92);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(571, 103);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(571, 113);
						// SugarCpp.g:571:113: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(571, 115);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(571, 125);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:572:22: ( WS )* '|>' ( WS )* list_expr
					{
					DebugLocation(572, 22);
					// SugarCpp.g:572:22: ( WS )*
					try { DebugEnterSubRule(433);
					while (true)
					{
						int alt433=2;
						try { DebugEnterDecision(433, false);
						int LA433_0 = input.LA(1);

						if ((LA433_0==WS))
						{
							alt433 = 1;
						}


						} finally { DebugExitDecision(433); }
						switch ( alt433 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:572:22: WS
							{
							DebugLocation(572, 22);
							WS669=(IToken)Match(input,WS,Follow._WS_in_feed_expr6105); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS669);


							}
							break;

						default:
							goto loop433;
						}
					}

					loop433:
						;

					} finally { DebugExitSubRule(433); }

					DebugLocation(572, 26);
					string_literal670=(IToken)Match(input,184,Follow._184_in_feed_expr6108); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_184.Add(string_literal670);

					DebugLocation(572, 31);
					// SugarCpp.g:572:31: ( WS )*
					try { DebugEnterSubRule(434);
					while (true)
					{
						int alt434=2;
						try { DebugEnterDecision(434, false);
						int LA434_0 = input.LA(1);

						if ((LA434_0==WS))
						{
							alt434 = 1;
						}


						} finally { DebugExitDecision(434); }
						switch ( alt434 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:572:31: WS
							{
							DebugLocation(572, 31);
							WS671=(IToken)Match(input,WS,Follow._WS_in_feed_expr6110); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS671);


							}
							break;

						default:
							goto loop434;
						}
					}

					loop434:
						;

					} finally { DebugExitSubRule(434); }

					DebugLocation(572, 35);
					PushFollow(Follow._list_expr_in_feed_expr6113);
					list_expr672=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr672.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:45: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(572, 48);
						// SugarCpp.g:572:48: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(572, 60);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(572, 70);
						// SugarCpp.g:572:70: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 72);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(572, 83);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(435); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:574:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(574, 4);
				PushFollow(Follow._list_expr_in_feed_expr6154);
				list_expr673=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr673.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 64);
			LeaveRule("feed_expr", 64);
			LeaveRule_feed_expr();
		}
		DebugLocation(575, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:577:1: list_expr : ( ( '[' ( WS )* feed_expr ( WS )* 'for' )=> '[' ( WS )* feed_expr ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ']' ( WS )* ':' ( WS )* type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )* )? ( WS | ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 65);
		TraceIn("list_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal674 = default(IToken);
		IToken WS675 = default(IToken);
		IToken WS677 = default(IToken);
		IToken string_literal678 = default(IToken);
		IToken WS679 = default(IToken);
		IToken WS681 = default(IToken);
		IToken char_literal682 = default(IToken);
		IToken WS683 = default(IToken);
		IToken WS685 = default(IToken);
		IToken char_literal686 = default(IToken);
		IToken WS687 = default(IToken);
		IToken char_literal688 = default(IToken);
		IToken WS689 = default(IToken);
		IToken char_literal691 = default(IToken);
		IToken WS692 = default(IToken);
		IToken char_literal693 = default(IToken);
		IToken NEWLINE694 = default(IToken);
		IToken INDENT695 = default(IToken);
		IToken DEDENT696 = default(IToken);
		IToken WS698 = default(IToken);
		IToken char_literal699 = default(IToken);
		IToken NEWLINE700 = default(IToken);
		IToken INDENT701 = default(IToken);
		IToken DEDENT702 = default(IToken);
		IToken WS703 = default(IToken);
		IToken WS705 = default(IToken);
		IToken char_literal706 = default(IToken);
		IToken NEWLINE707 = default(IToken);
		IToken INDENT708 = default(IToken);
		IToken DEDENT709 = default(IToken);
		IToken char_literal710 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr676 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item680 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item684 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name690 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr697 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr704 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr711 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal674_tree = default(CommonTree);
		CommonTree WS675_tree = default(CommonTree);
		CommonTree WS677_tree = default(CommonTree);
		CommonTree string_literal678_tree = default(CommonTree);
		CommonTree WS679_tree = default(CommonTree);
		CommonTree WS681_tree = default(CommonTree);
		CommonTree char_literal682_tree = default(CommonTree);
		CommonTree WS683_tree = default(CommonTree);
		CommonTree WS685_tree = default(CommonTree);
		CommonTree char_literal686_tree = default(CommonTree);
		CommonTree WS687_tree = default(CommonTree);
		CommonTree char_literal688_tree = default(CommonTree);
		CommonTree WS689_tree = default(CommonTree);
		CommonTree char_literal691_tree = default(CommonTree);
		CommonTree WS692_tree = default(CommonTree);
		CommonTree char_literal693_tree = default(CommonTree);
		CommonTree NEWLINE694_tree = default(CommonTree);
		CommonTree INDENT695_tree = default(CommonTree);
		CommonTree DEDENT696_tree = default(CommonTree);
		CommonTree WS698_tree = default(CommonTree);
		CommonTree char_literal699_tree = default(CommonTree);
		CommonTree NEWLINE700_tree = default(CommonTree);
		CommonTree INDENT701_tree = default(CommonTree);
		CommonTree DEDENT702_tree = default(CommonTree);
		CommonTree WS703_tree = default(CommonTree);
		CommonTree WS705_tree = default(CommonTree);
		CommonTree char_literal706_tree = default(CommonTree);
		CommonTree NEWLINE707_tree = default(CommonTree);
		CommonTree INDENT708_tree = default(CommonTree);
		CommonTree DEDENT709_tree = default(CommonTree);
		CommonTree char_literal710_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(577, 1);
		try
		{
			// SugarCpp.g:578:2: ( ( '[' ( WS )* feed_expr ( WS )* 'for' )=> '[' ( WS )* feed_expr ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ']' ( WS )* ':' ( WS )* type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )* )? ( WS | ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt453=3;
			try { DebugEnterDecision(453, false);
			int LA453_0 = input.LA(1);

			if ((LA453_0==132))
			{
				int LA453_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt453 = 1;
				}
				else if ((true))
				{
					alt453 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 453, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA453_0==IDENT||LA453_0==NUMBER||LA453_0==STRING||LA453_0==86||LA453_0==91||LA453_0==93||LA453_0==95||(LA453_0>=97 && LA453_0<=98)||(LA453_0>=101 && LA453_0<=102)||LA453_0==131||(LA453_0>=160 && LA453_0<=161)||LA453_0==186))
			{
				alt453 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 453, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(453); }
			switch (alt453)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:578:4: ( '[' ( WS )* feed_expr ( WS )* 'for' )=> '[' ( WS )* feed_expr ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* ( WS )* ']' ( WS )* ':' ( WS )* type_name
				{
				DebugLocation(578, 37);
				char_literal674=(IToken)Match(input,132,Follow._132_in_list_expr6181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal674);

				DebugLocation(578, 41);
				// SugarCpp.g:578:41: ( WS )*
				try { DebugEnterSubRule(437);
				while (true)
				{
					int alt437=2;
					try { DebugEnterDecision(437, false);
					int LA437_0 = input.LA(1);

					if ((LA437_0==WS))
					{
						alt437 = 1;
					}


					} finally { DebugExitDecision(437); }
					switch ( alt437 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:41: WS
						{
						DebugLocation(578, 41);
						WS675=(IToken)Match(input,WS,Follow._WS_in_list_expr6183); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS675);


						}
						break;

					default:
						goto loop437;
					}
				}

				loop437:
					;

				} finally { DebugExitSubRule(437); }

				DebugLocation(578, 45);
				PushFollow(Follow._feed_expr_in_list_expr6186);
				feed_expr676=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr676.Tree);
				DebugLocation(578, 55);
				// SugarCpp.g:578:55: ( WS )*
				try { DebugEnterSubRule(438);
				while (true)
				{
					int alt438=2;
					try { DebugEnterDecision(438, false);
					int LA438_0 = input.LA(1);

					if ((LA438_0==WS))
					{
						alt438 = 1;
					}


					} finally { DebugExitDecision(438); }
					switch ( alt438 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:55: WS
						{
						DebugLocation(578, 55);
						WS677=(IToken)Match(input,WS,Follow._WS_in_list_expr6188); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS677);


						}
						break;

					default:
						goto loop438;
					}
				}

				loop438:
					;

				} finally { DebugExitSubRule(438); }

				DebugLocation(578, 59);
				string_literal678=(IToken)Match(input,149,Follow._149_in_list_expr6191); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal678);

				DebugLocation(578, 65);
				// SugarCpp.g:578:65: ( WS )*
				try { DebugEnterSubRule(439);
				while (true)
				{
					int alt439=2;
					try { DebugEnterDecision(439, false);
					int LA439_0 = input.LA(1);

					if ((LA439_0==WS))
					{
						alt439 = 1;
					}


					} finally { DebugExitDecision(439); }
					switch ( alt439 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:65: WS
						{
						DebugLocation(578, 65);
						WS679=(IToken)Match(input,WS,Follow._WS_in_list_expr6193); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS679);


						}
						break;

					default:
						goto loop439;
					}
				}

				loop439:
					;

				} finally { DebugExitSubRule(439); }

				DebugLocation(578, 69);
				PushFollow(Follow._for_item_in_list_expr6196);
				for_item680=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item680.Tree);
				DebugLocation(578, 78);
				// SugarCpp.g:578:78: ( ( WS )* ',' ( WS )* for_item )*
				try { DebugEnterSubRule(442);
				while (true)
				{
					int alt442=2;
					try { DebugEnterDecision(442, false);
					try
					{
						alt442 = dfa442.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(442); }
					switch ( alt442 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:79: ( WS )* ',' ( WS )* for_item
						{
						DebugLocation(578, 79);
						// SugarCpp.g:578:79: ( WS )*
						try { DebugEnterSubRule(440);
						while (true)
						{
							int alt440=2;
							try { DebugEnterDecision(440, false);
							int LA440_0 = input.LA(1);

							if ((LA440_0==WS))
							{
								alt440 = 1;
							}


							} finally { DebugExitDecision(440); }
							switch ( alt440 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:578:79: WS
								{
								DebugLocation(578, 79);
								WS681=(IToken)Match(input,WS,Follow._WS_in_list_expr6199); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS681);


								}
								break;

							default:
								goto loop440;
							}
						}

						loop440:
							;

						} finally { DebugExitSubRule(440); }

						DebugLocation(578, 83);
						char_literal682=(IToken)Match(input,100,Follow._100_in_list_expr6202); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal682);

						DebugLocation(578, 87);
						// SugarCpp.g:578:87: ( WS )*
						try { DebugEnterSubRule(441);
						while (true)
						{
							int alt441=2;
							try { DebugEnterDecision(441, false);
							int LA441_0 = input.LA(1);

							if ((LA441_0==WS))
							{
								alt441 = 1;
							}


							} finally { DebugExitDecision(441); }
							switch ( alt441 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:578:87: WS
								{
								DebugLocation(578, 87);
								WS683=(IToken)Match(input,WS,Follow._WS_in_list_expr6204); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS683);


								}
								break;

							default:
								goto loop441;
							}
						}

						loop441:
							;

						} finally { DebugExitSubRule(441); }

						DebugLocation(578, 91);
						PushFollow(Follow._for_item_in_list_expr6207);
						for_item684=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item684.Tree);

						}
						break;

					default:
						goto loop442;
					}
				}

				loop442:
					;

				} finally { DebugExitSubRule(442); }

				DebugLocation(578, 102);
				// SugarCpp.g:578:102: ( WS )*
				try { DebugEnterSubRule(443);
				while (true)
				{
					int alt443=2;
					try { DebugEnterDecision(443, false);
					int LA443_0 = input.LA(1);

					if ((LA443_0==WS))
					{
						alt443 = 1;
					}


					} finally { DebugExitDecision(443); }
					switch ( alt443 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:102: WS
						{
						DebugLocation(578, 102);
						WS685=(IToken)Match(input,WS,Follow._WS_in_list_expr6211); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS685);


						}
						break;

					default:
						goto loop443;
					}
				}

				loop443:
					;

				} finally { DebugExitSubRule(443); }

				DebugLocation(578, 106);
				char_literal686=(IToken)Match(input,133,Follow._133_in_list_expr6214); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal686);

				DebugLocation(578, 110);
				// SugarCpp.g:578:110: ( WS )*
				try { DebugEnterSubRule(444);
				while (true)
				{
					int alt444=2;
					try { DebugEnterDecision(444, false);
					int LA444_0 = input.LA(1);

					if ((LA444_0==WS))
					{
						alt444 = 1;
					}


					} finally { DebugExitDecision(444); }
					switch ( alt444 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:110: WS
						{
						DebugLocation(578, 110);
						WS687=(IToken)Match(input,WS,Follow._WS_in_list_expr6216); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS687);


						}
						break;

					default:
						goto loop444;
					}
				}

				loop444:
					;

				} finally { DebugExitSubRule(444); }

				DebugLocation(578, 114);
				char_literal688=(IToken)Match(input,111,Follow._111_in_list_expr6219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal688);

				DebugLocation(578, 118);
				// SugarCpp.g:578:118: ( WS )*
				try { DebugEnterSubRule(445);
				while (true)
				{
					int alt445=2;
					try { DebugEnterDecision(445, false);
					int LA445_0 = input.LA(1);

					if ((LA445_0==WS))
					{
						alt445 = 1;
					}


					} finally { DebugExitDecision(445); }
					switch ( alt445 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:578:118: WS
						{
						DebugLocation(578, 118);
						WS689=(IToken)Match(input,WS,Follow._WS_in_list_expr6221); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS689);


						}
						break;

					default:
						goto loop445;
					}
				}

				loop445:
					;

				} finally { DebugExitSubRule(445); }

				DebugLocation(578, 122);
				PushFollow(Follow._type_name_in_list_expr6224);
				type_name690=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name690.Tree);


				{
				// AST REWRITE
				// elements: for_item, feed_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 578:133: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(578, 136);
					// SugarCpp.g:578:136: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(578, 138);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(578, 159);
					// SugarCpp.g:578:159: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(578, 159);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(578, 170);
					// SugarCpp.g:578:170: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(578, 172);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(578, 181);
					// SugarCpp.g:578:181: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(578, 181);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(578, 191);
					// SugarCpp.g:578:191: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(578, 193);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(578, 206);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:579:4: '[' ( ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )* )? ( WS | ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(579, 4);
				char_literal691=(IToken)Match(input,132,Follow._132_in_list_expr6252); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal691);

				DebugLocation(579, 8);
				// SugarCpp.g:579:8: ( ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )* )?
				int alt451=2;
				try { DebugEnterSubRule(451);
				try { DebugEnterDecision(451, false);
				try
				{
					alt451 = dfa451.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(451); }
				switch (alt451)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:579:9: ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )*
					{
					DebugLocation(579, 9);
					// SugarCpp.g:579:9: ( WS | ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(446);
					while (true)
					{
						int alt446=6;
						try { DebugEnterDecision(446, false);
						switch (input.LA(1))
						{
						case WS:
							{
							alt446 = 1;
							}
							break;
						case 100:
							{
							alt446 = 2;
							}
							break;
						case NEWLINE:
							{
							alt446 = 3;
							}
							break;
						case INDENT:
							{
							alt446 = 4;
							}
							break;
						case DEDENT:
							{
							alt446 = 5;
							}
							break;
						}

						} finally { DebugExitDecision(446); }
						switch ( alt446 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:579:10: WS
							{
							DebugLocation(579, 10);
							WS692=(IToken)Match(input,WS,Follow._WS_in_list_expr6256); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS692);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:579:15: ','
							{
							DebugLocation(579, 15);
							char_literal693=(IToken)Match(input,100,Follow._100_in_list_expr6260); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal693);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:579:21: NEWLINE
							{
							DebugLocation(579, 21);
							NEWLINE694=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr6264); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE694);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:579:31: INDENT
							{
							DebugLocation(579, 31);
							INDENT695=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr6268); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT695);


							}
							break;
						case 5:
							DebugEnterAlt(5);
							// SugarCpp.g:579:40: DEDENT
							{
							DebugLocation(579, 40);
							DEDENT696=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr6272); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT696);


							}
							break;

						default:
							goto loop446;
						}
					}

					loop446:
						;

					} finally { DebugExitSubRule(446); }

					DebugLocation(579, 49);
					PushFollow(Follow._feed_expr_in_list_expr6276);
					feed_expr697=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr697.Tree);
					DebugLocation(579, 59);
					// SugarCpp.g:579:59: ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )*
					try { DebugEnterSubRule(450);
					while (true)
					{
						int alt450=2;
						try { DebugEnterDecision(450, false);
						try
						{
							alt450 = dfa450.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(450); }
						switch ( alt450 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:579:60: ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr
							{
							DebugLocation(579, 60);
							// SugarCpp.g:579:60: ( WS )*
							try { DebugEnterSubRule(447);
							while (true)
							{
								int alt447=2;
								try { DebugEnterDecision(447, false);
								int LA447_0 = input.LA(1);

								if ((LA447_0==WS))
								{
									alt447 = 1;
								}


								} finally { DebugExitDecision(447); }
								switch ( alt447 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:579:60: WS
									{
									DebugLocation(579, 60);
									WS698=(IToken)Match(input,WS,Follow._WS_in_list_expr6279); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS698);


									}
									break;

								default:
									goto loop447;
								}
							}

							loop447:
								;

							} finally { DebugExitSubRule(447); }

							DebugLocation(579, 64);
							// SugarCpp.g:579:64: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt448=0;
							try { DebugEnterSubRule(448);
							while (true)
							{
								int alt448=5;
								try { DebugEnterDecision(448, false);
								switch (input.LA(1))
								{
								case 100:
									{
									alt448 = 1;
									}
									break;
								case NEWLINE:
									{
									alt448 = 2;
									}
									break;
								case INDENT:
									{
									alt448 = 3;
									}
									break;
								case DEDENT:
									{
									alt448 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(448); }
								switch (alt448)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:579:65: ','
									{
									DebugLocation(579, 65);
									char_literal699=(IToken)Match(input,100,Follow._100_in_list_expr6283); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal699);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:579:71: NEWLINE
									{
									DebugLocation(579, 71);
									NEWLINE700=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr6287); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE700);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:579:81: INDENT
									{
									DebugLocation(579, 81);
									INDENT701=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr6291); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT701);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:579:90: DEDENT
									{
									DebugLocation(579, 90);
									DEDENT702=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr6295); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT702);


									}
									break;

								default:
									if (cnt448 >= 1)
										goto loop448;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee448 = new EarlyExitException( 448, input );
									DebugRecognitionException(eee448);
									throw eee448;
								}
								cnt448++;
							}
							loop448:
								;

							} finally { DebugExitSubRule(448); }

							DebugLocation(579, 99);
							// SugarCpp.g:579:99: ( WS )*
							try { DebugEnterSubRule(449);
							while (true)
							{
								int alt449=2;
								try { DebugEnterDecision(449, false);
								int LA449_0 = input.LA(1);

								if ((LA449_0==WS))
								{
									alt449 = 1;
								}


								} finally { DebugExitDecision(449); }
								switch ( alt449 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:579:99: WS
									{
									DebugLocation(579, 99);
									WS703=(IToken)Match(input,WS,Follow._WS_in_list_expr6299); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS703);


									}
									break;

								default:
									goto loop449;
								}
							}

							loop449:
								;

							} finally { DebugExitSubRule(449); }

							DebugLocation(579, 103);
							PushFollow(Follow._feed_expr_in_list_expr6302);
							feed_expr704=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr704.Tree);

							}
							break;

						default:
							goto loop450;
						}
					}

					loop450:
						;

					} finally { DebugExitSubRule(450); }


					}
					break;

				}
				} finally { DebugExitSubRule(451); }

				DebugLocation(579, 117);
				// SugarCpp.g:579:117: ( WS | ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(452);
				while (true)
				{
					int alt452=6;
					try { DebugEnterDecision(452, false);
					switch (input.LA(1))
					{
					case WS:
						{
						alt452 = 1;
						}
						break;
					case 100:
						{
						alt452 = 2;
						}
						break;
					case NEWLINE:
						{
						alt452 = 3;
						}
						break;
					case INDENT:
						{
						alt452 = 4;
						}
						break;
					case DEDENT:
						{
						alt452 = 5;
						}
						break;
					}

					} finally { DebugExitDecision(452); }
					switch ( alt452 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:579:118: WS
						{
						DebugLocation(579, 118);
						WS705=(IToken)Match(input,WS,Follow._WS_in_list_expr6309); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS705);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:579:123: ','
						{
						DebugLocation(579, 123);
						char_literal706=(IToken)Match(input,100,Follow._100_in_list_expr6313); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal706);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:579:129: NEWLINE
						{
						DebugLocation(579, 129);
						NEWLINE707=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr6317); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE707);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:579:139: INDENT
						{
						DebugLocation(579, 139);
						INDENT708=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr6321); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT708);


						}
						break;
					case 5:
						DebugEnterAlt(5);
						// SugarCpp.g:579:148: DEDENT
						{
						DebugLocation(579, 148);
						DEDENT709=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr6325); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT709);


						}
						break;

					default:
						goto loop452;
					}
				}

				loop452:
					;

				} finally { DebugExitSubRule(452); }

				DebugLocation(579, 157);
				char_literal710=(IToken)Match(input,133,Follow._133_in_list_expr6329); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal710);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 579:161: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(579, 164);
					// SugarCpp.g:579:164: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(579, 166);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(579, 176);
					// SugarCpp.g:579:176: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(579, 176);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:580:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(580, 4);
				PushFollow(Follow._lambda_expr_in_list_expr6343);
				lambda_expr711=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr711.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 65);
			LeaveRule("list_expr", 65);
			LeaveRule_list_expr();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:583:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 66);
		TraceIn("lambda_value", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE713 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr712 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block714 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE713_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(583, 1);
		try
		{
			// SugarCpp.g:584:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt455=2;
			try { DebugEnterDecision(455, false);
			int LA455_0 = input.LA(1);

			if ((LA455_0==IDENT||LA455_0==NUMBER||LA455_0==STRING||LA455_0==86||LA455_0==91||LA455_0==93||LA455_0==95||(LA455_0>=97 && LA455_0<=98)||(LA455_0>=101 && LA455_0<=102)||(LA455_0>=131 && LA455_0<=132)||LA455_0==155||LA455_0==158||(LA455_0>=160 && LA455_0<=161)||LA455_0==186))
			{
				alt455 = 1;
			}
			else if ((LA455_0==NEWLINE))
			{
				alt455 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 455, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(455); }
			switch (alt455)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:584:4: expr
				{
				DebugLocation(584, 4);
				PushFollow(Follow._expr_in_lambda_value6354);
				expr712=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr712.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 584:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(584, 12);
					// SugarCpp.g:584:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(584, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(584, 25);
					// SugarCpp.g:584:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(584, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(584, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:585:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(585, 4);
				// SugarCpp.g:585:4: ( NEWLINE )+
				int cnt454=0;
				try { DebugEnterSubRule(454);
				while (true)
				{
					int alt454=2;
					try { DebugEnterDecision(454, false);
					int LA454_0 = input.LA(1);

					if ((LA454_0==NEWLINE))
					{
						alt454 = 1;
					}


					} finally { DebugExitDecision(454); }
					switch (alt454)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:585:4: NEWLINE
						{
						DebugLocation(585, 4);
						NEWLINE713=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value6371); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE713);


						}
						break;

					default:
						if (cnt454 >= 1)
							goto loop454;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee454 = new EarlyExitException( 454, input );
						DebugRecognitionException(eee454);
						throw eee454;
					}
					cnt454++;
				}
				loop454:
					;

				} finally { DebugExitSubRule(454); }

				DebugLocation(585, 13);
				PushFollow(Follow._stmt_block_in_lambda_value6374);
				stmt_block714=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block714.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 585:24: -> stmt_block
				{
					DebugLocation(585, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 66);
			LeaveRule("lambda_value", 66);
			LeaveRule_lambda_value();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:588:1: lambda_type : '(' ( WS )* type_name ( WS )* ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 67);
		TraceIn("lambda_type", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal715 = default(IToken);
		IToken WS716 = default(IToken);
		IToken WS718 = default(IToken);
		IToken char_literal719 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name717 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal715_tree = default(CommonTree);
		CommonTree WS716_tree = default(CommonTree);
		CommonTree WS718_tree = default(CommonTree);
		CommonTree char_literal719_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(588, 1);
		try
		{
			// SugarCpp.g:589:2: ( '(' ( WS )* type_name ( WS )* ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:589:4: '(' ( WS )* type_name ( WS )* ')'
			{
			DebugLocation(589, 4);
			char_literal715=(IToken)Match(input,93,Follow._93_in_lambda_type6389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal715);

			DebugLocation(589, 8);
			// SugarCpp.g:589:8: ( WS )*
			try { DebugEnterSubRule(456);
			while (true)
			{
				int alt456=2;
				try { DebugEnterDecision(456, false);
				int LA456_0 = input.LA(1);

				if ((LA456_0==WS))
				{
					alt456 = 1;
				}


				} finally { DebugExitDecision(456); }
				switch ( alt456 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:589:8: WS
					{
					DebugLocation(589, 8);
					WS716=(IToken)Match(input,WS,Follow._WS_in_lambda_type6391); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS716);


					}
					break;

				default:
					goto loop456;
				}
			}

			loop456:
				;

			} finally { DebugExitSubRule(456); }

			DebugLocation(589, 12);
			PushFollow(Follow._type_name_in_lambda_type6394);
			type_name717=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name717.Tree);
			DebugLocation(589, 22);
			// SugarCpp.g:589:22: ( WS )*
			try { DebugEnterSubRule(457);
			while (true)
			{
				int alt457=2;
				try { DebugEnterDecision(457, false);
				int LA457_0 = input.LA(1);

				if ((LA457_0==WS))
				{
					alt457 = 1;
				}


				} finally { DebugExitDecision(457); }
				switch ( alt457 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:589:22: WS
					{
					DebugLocation(589, 22);
					WS718=(IToken)Match(input,WS,Follow._WS_in_lambda_type6396); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS718);


					}
					break;

				default:
					goto loop457;
				}
			}

			loop457:
				;

			} finally { DebugExitSubRule(457); }

			DebugLocation(589, 26);
			char_literal719=(IToken)Match(input,94,Follow._94_in_lambda_type6399); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal719);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 589:30: -> type_name
			{
				DebugLocation(589, 33);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 67);
			LeaveRule("lambda_type", 67);
			LeaveRule_lambda_type();
		}
		DebugLocation(590, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr_op();
	partial void LeaveRule_lambda_expr_op();

	// $ANTLR start "lambda_expr_op"
	// SugarCpp.g:592:1: lambda_expr_op : ( '->' | '=>' | '-->' | '==>' );
	[GrammarRule("lambda_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr_op()
	{
		EnterRule_lambda_expr_op();
		EnterRule("lambda_expr_op", 68);
		TraceIn("lambda_expr_op", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set720 = default(IToken);

		CommonTree set720_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "lambda_expr_op");
		DebugLocation(592, 45);
		try
		{
			// SugarCpp.g:592:16: ( '->' | '=>' | '-->' | '==>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(592, 16);

			set720=(IToken)input.LT(1);
			if (input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=123 && input.LA(1)<=124))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set720));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr_op", 68);
			LeaveRule("lambda_expr_op", 68);
			LeaveRule_lambda_expr_op();
		}
		DebugLocation(592, 45);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr_op"); }
		return retval;

	}
	// $ANTLR end "lambda_expr_op"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:593:1: lambda_expr : ( '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* lambda_type )? ( WS )* lambda_expr_op ( WS )* lambda_value -> ^( Expr_Lambda lambda_expr_op ( func_args )? ( lambda_type )? lambda_value ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 69);
		TraceIn("lambda_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal721 = default(IToken);
		IToken WS722 = default(IToken);
		IToken WS724 = default(IToken);
		IToken char_literal725 = default(IToken);
		IToken WS726 = default(IToken);
		IToken WS728 = default(IToken);
		IToken WS730 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args723 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type727 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr_op729 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value731 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr732 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal721_tree = default(CommonTree);
		CommonTree WS722_tree = default(CommonTree);
		CommonTree WS724_tree = default(CommonTree);
		CommonTree char_literal725_tree = default(CommonTree);
		CommonTree WS726_tree = default(CommonTree);
		CommonTree WS728_tree = default(CommonTree);
		CommonTree WS730_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_lambda_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr_op");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(593, 1);
		try
		{
			// SugarCpp.g:594:2: ( '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* lambda_type )? ( WS )* lambda_expr_op ( WS )* lambda_value -> ^( Expr_Lambda lambda_expr_op ( func_args )? ( lambda_type )? lambda_value ) | modify_expr )
			int alt465=2;
			try { DebugEnterDecision(465, false);
			try
			{
				alt465 = dfa465.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(465); }
			switch (alt465)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:594:4: '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* lambda_type )? ( WS )* lambda_expr_op ( WS )* lambda_value
				{
				DebugLocation(594, 4);
				char_literal721=(IToken)Match(input,93,Follow._93_in_lambda_expr6434); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal721);

				DebugLocation(594, 8);
				// SugarCpp.g:594:8: ( ( WS )* func_args )?
				int alt459=2;
				try { DebugEnterSubRule(459);
				try { DebugEnterDecision(459, false);
				try
				{
					alt459 = dfa459.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(459); }
				switch (alt459)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:594:9: ( WS )* func_args
					{
					DebugLocation(594, 9);
					// SugarCpp.g:594:9: ( WS )*
					try { DebugEnterSubRule(458);
					while (true)
					{
						int alt458=2;
						try { DebugEnterDecision(458, false);
						int LA458_0 = input.LA(1);

						if ((LA458_0==WS))
						{
							alt458 = 1;
						}


						} finally { DebugExitDecision(458); }
						switch ( alt458 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:594:9: WS
							{
							DebugLocation(594, 9);
							WS722=(IToken)Match(input,WS,Follow._WS_in_lambda_expr6437); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS722);


							}
							break;

						default:
							goto loop458;
						}
					}

					loop458:
						;

					} finally { DebugExitSubRule(458); }

					DebugLocation(594, 13);
					PushFollow(Follow._func_args_in_lambda_expr6440);
					func_args723=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args723.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(459); }

				DebugLocation(594, 25);
				// SugarCpp.g:594:25: ( WS )*
				try { DebugEnterSubRule(460);
				while (true)
				{
					int alt460=2;
					try { DebugEnterDecision(460, false);
					int LA460_0 = input.LA(1);

					if ((LA460_0==WS))
					{
						alt460 = 1;
					}


					} finally { DebugExitDecision(460); }
					switch ( alt460 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:594:25: WS
						{
						DebugLocation(594, 25);
						WS724=(IToken)Match(input,WS,Follow._WS_in_lambda_expr6444); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS724);


						}
						break;

					default:
						goto loop460;
					}
				}

				loop460:
					;

				} finally { DebugExitSubRule(460); }

				DebugLocation(594, 29);
				char_literal725=(IToken)Match(input,94,Follow._94_in_lambda_expr6447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal725);

				DebugLocation(594, 33);
				// SugarCpp.g:594:33: ( ( WS )* lambda_type )?
				int alt462=2;
				try { DebugEnterSubRule(462);
				try { DebugEnterDecision(462, false);
				try
				{
					alt462 = dfa462.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(462); }
				switch (alt462)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:594:34: ( WS )* lambda_type
					{
					DebugLocation(594, 34);
					// SugarCpp.g:594:34: ( WS )*
					try { DebugEnterSubRule(461);
					while (true)
					{
						int alt461=2;
						try { DebugEnterDecision(461, false);
						int LA461_0 = input.LA(1);

						if ((LA461_0==WS))
						{
							alt461 = 1;
						}


						} finally { DebugExitDecision(461); }
						switch ( alt461 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:594:34: WS
							{
							DebugLocation(594, 34);
							WS726=(IToken)Match(input,WS,Follow._WS_in_lambda_expr6450); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS726);


							}
							break;

						default:
							goto loop461;
						}
					}

					loop461:
						;

					} finally { DebugExitSubRule(461); }

					DebugLocation(594, 38);
					PushFollow(Follow._lambda_type_in_lambda_expr6453);
					lambda_type727=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type727.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(462); }

				DebugLocation(594, 52);
				// SugarCpp.g:594:52: ( WS )*
				try { DebugEnterSubRule(463);
				while (true)
				{
					int alt463=2;
					try { DebugEnterDecision(463, false);
					int LA463_0 = input.LA(1);

					if ((LA463_0==WS))
					{
						alt463 = 1;
					}


					} finally { DebugExitDecision(463); }
					switch ( alt463 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:594:52: WS
						{
						DebugLocation(594, 52);
						WS728=(IToken)Match(input,WS,Follow._WS_in_lambda_expr6457); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS728);


						}
						break;

					default:
						goto loop463;
					}
				}

				loop463:
					;

				} finally { DebugExitSubRule(463); }

				DebugLocation(594, 56);
				PushFollow(Follow._lambda_expr_op_in_lambda_expr6460);
				lambda_expr_op729=lambda_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lambda_expr_op.Add(lambda_expr_op729.Tree);
				DebugLocation(594, 71);
				// SugarCpp.g:594:71: ( WS )*
				try { DebugEnterSubRule(464);
				while (true)
				{
					int alt464=2;
					try { DebugEnterDecision(464, false);
					int LA464_0 = input.LA(1);

					if ((LA464_0==WS))
					{
						alt464 = 1;
					}


					} finally { DebugExitDecision(464); }
					switch ( alt464 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:594:71: WS
						{
						DebugLocation(594, 71);
						WS730=(IToken)Match(input,WS,Follow._WS_in_lambda_expr6462); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS730);


						}
						break;

					default:
						goto loop464;
					}
				}

				loop464:
					;

				} finally { DebugExitSubRule(464); }

				DebugLocation(594, 75);
				PushFollow(Follow._lambda_value_in_lambda_expr6465);
				lambda_value731=lambda_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lambda_value.Add(lambda_value731.Tree);


				{
				// AST REWRITE
				// elements: lambda_type, func_args, lambda_expr_op, lambda_value
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 594:88: -> ^( Expr_Lambda lambda_expr_op ( func_args )? ( lambda_type )? lambda_value )
				{
					DebugLocation(594, 91);
					// SugarCpp.g:594:91: ^( Expr_Lambda lambda_expr_op ( func_args )? ( lambda_type )? lambda_value )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(594, 93);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(594, 105);
					adaptor.AddChild(root_1, stream_lambda_expr_op.NextTree());
					DebugLocation(594, 120);
					// SugarCpp.g:594:120: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(594, 120);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(594, 131);
					// SugarCpp.g:594:131: ( lambda_type )?
					if (stream_lambda_type.HasNext)
					{
						DebugLocation(594, 131);
						adaptor.AddChild(root_1, stream_lambda_type.NextTree());

					}
					stream_lambda_type.Reset();
					DebugLocation(594, 144);
					adaptor.AddChild(root_1, stream_lambda_value.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:595:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(595, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr6486);
				modify_expr732=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr732.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 69);
			LeaveRule("lambda_expr", 69);
			LeaveRule_lambda_expr();
		}
		DebugLocation(596, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:598:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 70);
		TraceIn("modify_expr_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set733 = default(IToken);

		CommonTree set733_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(598, 91);
		try
		{
			// SugarCpp.g:598:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(598, 15);

			set733=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==118||input.LA(1)==121||input.LA(1)==128||input.LA(1)==135||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set733));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 70);
			LeaveRule("modify_expr_op", 70);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(598, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:599:1: modify_expr : cond_expr ( ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr | ( ( WS )* '=' ^ ( WS )* cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 71);
		TraceIn("modify_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS735 = default(IToken);
		IToken set736 = default(IToken);
		IToken WS737 = default(IToken);
		IToken WS739 = default(IToken);
		IToken char_literal740 = default(IToken);
		IToken WS741 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr734 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr738 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr742 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS735_tree = default(CommonTree);
		CommonTree set736_tree = default(CommonTree);
		CommonTree WS737_tree = default(CommonTree);
		CommonTree WS739_tree = default(CommonTree);
		CommonTree char_literal740_tree = default(CommonTree);
		CommonTree WS741_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(599, 1);
		try
		{
			// SugarCpp.g:600:2: ( cond_expr ( ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr | ( ( WS )* '=' ^ ( WS )* cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:600:4: cond_expr ( ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr | ( ( WS )* '=' ^ ( WS )* cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(600, 4);
			PushFollow(Follow._cond_expr_in_modify_expr6543);
			cond_expr734=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr734.Tree);
			DebugLocation(600, 14);
			// SugarCpp.g:600:14: ( ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr | ( ( WS )* '=' ^ ( WS )* cond_expr )+ )?
			int alt471=3;
			try { DebugEnterSubRule(471);
			try { DebugEnterDecision(471, false);
			try
			{
				alt471 = dfa471.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(471); }
			switch (alt471)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:600:16: ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr
				{
				DebugLocation(600, 16);
				// SugarCpp.g:600:16: ( WS )*
				try { DebugEnterSubRule(466);
				while (true)
				{
					int alt466=2;
					try { DebugEnterDecision(466, false);
					int LA466_0 = input.LA(1);

					if ((LA466_0==WS))
					{
						alt466 = 1;
					}


					} finally { DebugExitDecision(466); }
					switch ( alt466 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:600:16: WS
						{
						DebugLocation(600, 16);
						WS735=(IToken)Match(input,WS,Follow._WS_in_modify_expr6547); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WS735_tree = (CommonTree)adaptor.Create(WS735);
						adaptor.AddChild(root_0, WS735_tree);
						}

						}
						break;

					default:
						goto loop466;
					}
				}

				loop466:
					;

				} finally { DebugExitSubRule(466); }

				DebugLocation(600, 98);

				set736=(IToken)input.LT(1);
				set736=(IToken)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==113||input.LA(1)==118||input.LA(1)==128||input.LA(1)==135||input.LA(1)==183)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set736), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(600, 100);
				// SugarCpp.g:600:100: ( WS )*
				try { DebugEnterSubRule(467);
				while (true)
				{
					int alt467=2;
					try { DebugEnterDecision(467, false);
					int LA467_0 = input.LA(1);

					if ((LA467_0==WS))
					{
						alt467 = 1;
					}


					} finally { DebugExitDecision(467); }
					switch ( alt467 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:600:100: WS
						{
						DebugLocation(600, 100);
						WS737=(IToken)Match(input,WS,Follow._WS_in_modify_expr6595); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WS737_tree = (CommonTree)adaptor.Create(WS737);
						adaptor.AddChild(root_0, WS737_tree);
						}

						}
						break;

					default:
						goto loop467;
					}
				}

				loop467:
					;

				} finally { DebugExitSubRule(467); }

				DebugLocation(600, 104);
				PushFollow(Follow._cond_expr_in_modify_expr6598);
				cond_expr738=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr738.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:601:7: ( ( WS )* '=' ^ ( WS )* cond_expr )+
				{
				DebugLocation(601, 7);
				// SugarCpp.g:601:7: ( ( WS )* '=' ^ ( WS )* cond_expr )+
				int cnt470=0;
				try { DebugEnterSubRule(470);
				while (true)
				{
					int alt470=2;
					try { DebugEnterDecision(470, false);
					try
					{
						alt470 = dfa470.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(470); }
					switch (alt470)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:601:8: ( WS )* '=' ^ ( WS )* cond_expr
						{
						DebugLocation(601, 8);
						// SugarCpp.g:601:8: ( WS )*
						try { DebugEnterSubRule(468);
						while (true)
						{
							int alt468=2;
							try { DebugEnterDecision(468, false);
							int LA468_0 = input.LA(1);

							if ((LA468_0==WS))
							{
								alt468 = 1;
							}


							} finally { DebugExitDecision(468); }
							switch ( alt468 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:601:8: WS
								{
								DebugLocation(601, 8);
								WS739=(IToken)Match(input,WS,Follow._WS_in_modify_expr6607); if (state.failed) return retval;
								if (state.backtracking == 0) {
								WS739_tree = (CommonTree)adaptor.Create(WS739);
								adaptor.AddChild(root_0, WS739_tree);
								}

								}
								break;

							default:
								goto loop468;
							}
						}

						loop468:
							;

						} finally { DebugExitSubRule(468); }

						DebugLocation(601, 15);
						char_literal740=(IToken)Match(input,121,Follow._121_in_modify_expr6610); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal740_tree = (CommonTree)adaptor.Create(char_literal740);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal740_tree, root_0);
						}
						DebugLocation(601, 17);
						// SugarCpp.g:601:17: ( WS )*
						try { DebugEnterSubRule(469);
						while (true)
						{
							int alt469=2;
							try { DebugEnterDecision(469, false);
							int LA469_0 = input.LA(1);

							if ((LA469_0==WS))
							{
								alt469 = 1;
							}


							} finally { DebugExitDecision(469); }
							switch ( alt469 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:601:17: WS
								{
								DebugLocation(601, 17);
								WS741=(IToken)Match(input,WS,Follow._WS_in_modify_expr6613); if (state.failed) return retval;
								if (state.backtracking == 0) {
								WS741_tree = (CommonTree)adaptor.Create(WS741);
								adaptor.AddChild(root_0, WS741_tree);
								}

								}
								break;

							default:
								goto loop469;
							}
						}

						loop469:
							;

						} finally { DebugExitSubRule(469); }

						DebugLocation(601, 21);
						PushFollow(Follow._cond_expr_in_modify_expr6616);
						cond_expr742=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr742.Tree);

						}
						break;

					default:
						if (cnt470 >= 1)
							goto loop470;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee470 = new EarlyExitException( 470, input );
						DebugRecognitionException(eee470);
						throw eee470;
					}
					cnt470++;
				}
				loop470:
					;

				} finally { DebugExitSubRule(470); }


				}
				break;

			}
			} finally { DebugExitSubRule(471); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 71);
			LeaveRule("modify_expr", 71);
			LeaveRule_modify_expr();
		}
		DebugLocation(603, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:605:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 72);
		TraceIn("cond_expr_item", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr743 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(605, 24);
		try
		{
			// SugarCpp.g:605:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:605:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(605, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item6634);
			or_expr743=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr743.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 72);
			LeaveRule("cond_expr_item", 72);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(605, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:606:1: cond_expr : (a= or_expr -> $a) ( ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 73);
		TraceIn("cond_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS744 = default(IToken);
		IToken char_literal745 = default(IToken);
		IToken WS746 = default(IToken);
		IToken WS747 = default(IToken);
		IToken char_literal748 = default(IToken);
		IToken WS749 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS744_tree = default(CommonTree);
		CommonTree char_literal745_tree = default(CommonTree);
		CommonTree WS746_tree = default(CommonTree);
		CommonTree WS747_tree = default(CommonTree);
		CommonTree char_literal748_tree = default(CommonTree);
		CommonTree WS749_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(606, 1);
		try
		{
			// SugarCpp.g:607:2: ( (a= or_expr -> $a) ( ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:607:4: (a= or_expr -> $a) ( ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(607, 4);
			// SugarCpp.g:607:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:607:5: a= or_expr
			{
			DebugLocation(607, 6);
			PushFollow(Follow._or_expr_in_cond_expr6646);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 607:15: -> $a
			{
				DebugLocation(607, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(607, 22);
			// SugarCpp.g:607:22: ( ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt478=2;
			try { DebugEnterSubRule(478);
			try { DebugEnterDecision(478, false);
			try
			{
				alt478 = dfa478.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(478); }
			switch (alt478)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:607:23: ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(607, 23);
				// SugarCpp.g:607:23: ( WS )*
				try { DebugEnterSubRule(472);
				while (true)
				{
					int alt472=2;
					try { DebugEnterDecision(472, false);
					int LA472_0 = input.LA(1);

					if ((LA472_0==WS))
					{
						alt472 = 1;
					}


					} finally { DebugExitDecision(472); }
					switch ( alt472 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:607:23: WS
						{
						DebugLocation(607, 23);
						WS744=(IToken)Match(input,WS,Follow._WS_in_cond_expr6655); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS744);


						}
						break;

					default:
						goto loop472;
					}
				}

				loop472:
					;

				} finally { DebugExitSubRule(472); }

				DebugLocation(607, 27);
				char_literal745=(IToken)Match(input,129,Follow._129_in_cond_expr6658); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal745);

				DebugLocation(607, 31);
				// SugarCpp.g:607:31: ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt477=2;
				try { DebugEnterSubRule(477);
				try { DebugEnterDecision(477, false);
				try
				{
					alt477 = dfa477.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(477); }
				switch (alt477)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:607:33: ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(607, 33);
					// SugarCpp.g:607:33: ( WS )*
					try { DebugEnterSubRule(473);
					while (true)
					{
						int alt473=2;
						try { DebugEnterDecision(473, false);
						int LA473_0 = input.LA(1);

						if ((LA473_0==WS))
						{
							alt473 = 1;
						}


						} finally { DebugExitDecision(473); }
						switch ( alt473 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:607:33: WS
							{
							DebugLocation(607, 33);
							WS746=(IToken)Match(input,WS,Follow._WS_in_cond_expr6662); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS746);


							}
							break;

						default:
							goto loop473;
						}
					}

					loop473:
						;

					} finally { DebugExitSubRule(473); }

					DebugLocation(607, 38);
					PushFollow(Follow._cond_expr_item_in_cond_expr6667);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(607, 54);
					// SugarCpp.g:607:54: ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt476=2;
					try { DebugEnterSubRule(476);
					try { DebugEnterDecision(476, false);
					try
					{
						alt476 = dfa476.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(476); }
					switch (alt476)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:607:56: ( WS )* ':' ( WS )* b= cond_expr_item
						{
						DebugLocation(607, 56);
						// SugarCpp.g:607:56: ( WS )*
						try { DebugEnterSubRule(474);
						while (true)
						{
							int alt474=2;
							try { DebugEnterDecision(474, false);
							int LA474_0 = input.LA(1);

							if ((LA474_0==WS))
							{
								alt474 = 1;
							}


							} finally { DebugExitDecision(474); }
							switch ( alt474 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:607:56: WS
								{
								DebugLocation(607, 56);
								WS747=(IToken)Match(input,WS,Follow._WS_in_cond_expr6671); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS747);


								}
								break;

							default:
								goto loop474;
							}
						}

						loop474:
							;

						} finally { DebugExitSubRule(474); }

						DebugLocation(607, 60);
						char_literal748=(IToken)Match(input,111,Follow._111_in_cond_expr6674); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(char_literal748);

						DebugLocation(607, 64);
						// SugarCpp.g:607:64: ( WS )*
						try { DebugEnterSubRule(475);
						while (true)
						{
							int alt475=2;
							try { DebugEnterDecision(475, false);
							int LA475_0 = input.LA(1);

							if ((LA475_0==WS))
							{
								alt475 = 1;
							}


							} finally { DebugExitDecision(475); }
							switch ( alt475 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:607:64: WS
								{
								DebugLocation(607, 64);
								WS749=(IToken)Match(input,WS,Follow._WS_in_cond_expr6676); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS749);


								}
								break;

							default:
								goto loop475;
							}
						}

						loop475:
							;

						} finally { DebugExitSubRule(475); }

						DebugLocation(607, 69);
						PushFollow(Follow._cond_expr_item_in_cond_expr6681);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 607:85: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(607, 88);
							// SugarCpp.g:607:88: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(607, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(607, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(607, 112);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(607, 115);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:608:26: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 608:26: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(608, 29);
							// SugarCpp.g:608:29: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(608, 31);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(608, 51);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(608, 62);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(476); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:610:15: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:15: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(610, 18);
						// SugarCpp.g:610:18: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(610, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(477); }


				}
				break;

			}
			} finally { DebugExitSubRule(478); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 73);
			LeaveRule("cond_expr", 73);
			LeaveRule_cond_expr();
		}
		DebugLocation(613, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:615:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 74);
		TraceIn("or_op", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set750 = default(IToken);

		CommonTree set750_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(615, 19);
		try
		{
			// SugarCpp.g:615:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(615, 6);

			set750=(IToken)input.LT(1);
			if (input.LA(1)==162||input.LA(1)==185)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set750));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 74);
			LeaveRule("or_op", 74);
			LeaveRule_or_op();
		}
		DebugLocation(615, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:616:1: or_expr : (a= and_expr -> $a) ( ( WS )* op= or_op ( WS )* b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 75);
		TraceIn("or_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS751 = default(IToken);
		IToken WS752 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS751_tree = default(CommonTree);
		CommonTree WS752_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(616, 1);
		try
		{
			// SugarCpp.g:617:2: ( (a= and_expr -> $a) ( ( WS )* op= or_op ( WS )* b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:617:4: (a= and_expr -> $a) ( ( WS )* op= or_op ( WS )* b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(617, 4);
			// SugarCpp.g:617:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:617:5: a= and_expr
			{
			DebugLocation(617, 6);
			PushFollow(Follow._and_expr_in_or_expr6835);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 617:16: -> $a
			{
				DebugLocation(617, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(617, 23);
			// SugarCpp.g:617:23: ( ( WS )* op= or_op ( WS )* b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(481);
			while (true)
			{
				int alt481=2;
				try { DebugEnterDecision(481, false);
				try
				{
					alt481 = dfa481.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(481); }
				switch ( alt481 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:617:24: ( WS )* op= or_op ( WS )* b= and_expr
					{
					DebugLocation(617, 24);
					// SugarCpp.g:617:24: ( WS )*
					try { DebugEnterSubRule(479);
					while (true)
					{
						int alt479=2;
						try { DebugEnterDecision(479, false);
						int LA479_0 = input.LA(1);

						if ((LA479_0==WS))
						{
							alt479 = 1;
						}


						} finally { DebugExitDecision(479); }
						switch ( alt479 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:617:24: WS
							{
							DebugLocation(617, 24);
							WS751=(IToken)Match(input,WS,Follow._WS_in_or_expr6844); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS751);


							}
							break;

						default:
							goto loop479;
						}
					}

					loop479:
						;

					} finally { DebugExitSubRule(479); }

					DebugLocation(617, 30);
					PushFollow(Follow._or_op_in_or_expr6849);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(617, 37);
					// SugarCpp.g:617:37: ( WS )*
					try { DebugEnterSubRule(480);
					while (true)
					{
						int alt480=2;
						try { DebugEnterDecision(480, false);
						int LA480_0 = input.LA(1);

						if ((LA480_0==WS))
						{
							alt480 = 1;
						}


						} finally { DebugExitDecision(480); }
						switch ( alt480 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:617:37: WS
							{
							DebugLocation(617, 37);
							WS752=(IToken)Match(input,WS,Follow._WS_in_or_expr6851); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS752);


							}
							break;

						default:
							goto loop480;
						}
					}

					loop480:
						;

					} finally { DebugExitSubRule(480); }

					DebugLocation(617, 42);
					PushFollow(Follow._and_expr_in_or_expr6856);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 617:52: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(617, 55);
						// SugarCpp.g:617:55: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(617, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(617, 67);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(617, 71);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(617, 80);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop481;
				}
			}

			loop481:
				;

			} finally { DebugExitSubRule(481); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 75);
			LeaveRule("or_expr", 75);
			LeaveRule_or_expr();
		}
		DebugLocation(618, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:620:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 76);
		TraceIn("and_op", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set753 = default(IToken);

		CommonTree set753_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(620, 21);
		try
		{
			// SugarCpp.g:620:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(620, 7);

			set753=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==137)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set753));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 76);
			LeaveRule("and_op", 76);
			LeaveRule_and_op();
		}
		DebugLocation(620, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:621:1: and_expr : (a= bit_or -> $a) ( ( WS )* op= and_op ( WS )* b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 77);
		TraceIn("and_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS754 = default(IToken);
		IToken WS755 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS754_tree = default(CommonTree);
		CommonTree WS755_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(621, 1);
		try
		{
			// SugarCpp.g:622:2: ( (a= bit_or -> $a) ( ( WS )* op= and_op ( WS )* b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:622:4: (a= bit_or -> $a) ( ( WS )* op= and_op ( WS )* b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(622, 4);
			// SugarCpp.g:622:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:622:5: a= bit_or
			{
			DebugLocation(622, 6);
			PushFollow(Follow._bit_or_in_and_expr6898);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 622:14: -> $a
			{
				DebugLocation(622, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(622, 21);
			// SugarCpp.g:622:21: ( ( WS )* op= and_op ( WS )* b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(484);
			while (true)
			{
				int alt484=2;
				try { DebugEnterDecision(484, false);
				try
				{
					alt484 = dfa484.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(484); }
				switch ( alt484 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:622:22: ( WS )* op= and_op ( WS )* b= bit_or
					{
					DebugLocation(622, 22);
					// SugarCpp.g:622:22: ( WS )*
					try { DebugEnterSubRule(482);
					while (true)
					{
						int alt482=2;
						try { DebugEnterDecision(482, false);
						int LA482_0 = input.LA(1);

						if ((LA482_0==WS))
						{
							alt482 = 1;
						}


						} finally { DebugExitDecision(482); }
						switch ( alt482 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:622:22: WS
							{
							DebugLocation(622, 22);
							WS754=(IToken)Match(input,WS,Follow._WS_in_and_expr6907); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS754);


							}
							break;

						default:
							goto loop482;
						}
					}

					loop482:
						;

					} finally { DebugExitSubRule(482); }

					DebugLocation(622, 28);
					PushFollow(Follow._and_op_in_and_expr6912);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(622, 36);
					// SugarCpp.g:622:36: ( WS )*
					try { DebugEnterSubRule(483);
					while (true)
					{
						int alt483=2;
						try { DebugEnterDecision(483, false);
						int LA483_0 = input.LA(1);

						if ((LA483_0==WS))
						{
							alt483 = 1;
						}


						} finally { DebugExitDecision(483); }
						switch ( alt483 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:622:36: WS
							{
							DebugLocation(622, 36);
							WS755=(IToken)Match(input,WS,Follow._WS_in_and_expr6914); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS755);


							}
							break;

						default:
							goto loop483;
						}
					}

					loop483:
						;

					} finally { DebugExitSubRule(483); }

					DebugLocation(622, 41);
					PushFollow(Follow._bit_or_in_and_expr6919);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, and_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 622:49: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(622, 52);
						// SugarCpp.g:622:52: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(622, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(622, 64);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(622, 68);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(622, 78);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop484;
				}
			}

			loop484:
				;

			} finally { DebugExitSubRule(484); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 77);
			LeaveRule("and_expr", 77);
			LeaveRule_and_expr();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:625:1: bit_or : (a= bit_xor -> $a) ( ( WS )* '|' ( WS )* b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 78);
		TraceIn("bit_or", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS756 = default(IToken);
		IToken char_literal757 = default(IToken);
		IToken WS758 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS756_tree = default(CommonTree);
		CommonTree char_literal757_tree = default(CommonTree);
		CommonTree WS758_tree = default(CommonTree);
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(625, 1);
		try
		{
			// SugarCpp.g:626:2: ( (a= bit_xor -> $a) ( ( WS )* '|' ( WS )* b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:626:4: (a= bit_xor -> $a) ( ( WS )* '|' ( WS )* b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(626, 4);
			// SugarCpp.g:626:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:626:5: a= bit_xor
			{
			DebugLocation(626, 6);
			PushFollow(Follow._bit_xor_in_bit_or6950);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 626:15: -> $a
			{
				DebugLocation(626, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(626, 22);
			// SugarCpp.g:626:22: ( ( WS )* '|' ( WS )* b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(487);
			while (true)
			{
				int alt487=2;
				try { DebugEnterDecision(487, false);
				try
				{
					alt487 = dfa487.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(487); }
				switch ( alt487 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:626:23: ( WS )* '|' ( WS )* b= bit_xor
					{
					DebugLocation(626, 23);
					// SugarCpp.g:626:23: ( WS )*
					try { DebugEnterSubRule(485);
					while (true)
					{
						int alt485=2;
						try { DebugEnterDecision(485, false);
						int LA485_0 = input.LA(1);

						if ((LA485_0==WS))
						{
							alt485 = 1;
						}


						} finally { DebugExitDecision(485); }
						switch ( alt485 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:626:23: WS
							{
							DebugLocation(626, 23);
							WS756=(IToken)Match(input,WS,Follow._WS_in_bit_or6959); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS756);


							}
							break;

						default:
							goto loop485;
						}
					}

					loop485:
						;

					} finally { DebugExitSubRule(485); }

					DebugLocation(626, 27);
					char_literal757=(IToken)Match(input,182,Follow._182_in_bit_or6962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_182.Add(char_literal757);

					DebugLocation(626, 31);
					// SugarCpp.g:626:31: ( WS )*
					try { DebugEnterSubRule(486);
					while (true)
					{
						int alt486=2;
						try { DebugEnterDecision(486, false);
						int LA486_0 = input.LA(1);

						if ((LA486_0==WS))
						{
							alt486 = 1;
						}


						} finally { DebugExitDecision(486); }
						switch ( alt486 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:626:31: WS
							{
							DebugLocation(626, 31);
							WS758=(IToken)Match(input,WS,Follow._WS_in_bit_or6964); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS758);


							}
							break;

						default:
							goto loop486;
						}
					}

					loop486:
						;

					} finally { DebugExitSubRule(486); }

					DebugLocation(626, 36);
					PushFollow(Follow._bit_xor_in_bit_or6969);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, b, 182
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:45: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(626, 48);
						// SugarCpp.g:626:48: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(626, 59);
						adaptor.AddChild(root_1, stream_182.NextNode());
						DebugLocation(626, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(626, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop487;
				}
			}

			loop487:
				;

			} finally { DebugExitSubRule(487); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 78);
			LeaveRule("bit_or", 78);
			LeaveRule_bit_or();
		}
		DebugLocation(627, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:629:1: bit_xor : (a= bit_and -> $a) ( ( WS )* '^' ( WS )* b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 79);
		TraceIn("bit_xor", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS759 = default(IToken);
		IToken char_literal760 = default(IToken);
		IToken WS761 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS759_tree = default(CommonTree);
		CommonTree char_literal760_tree = default(CommonTree);
		CommonTree WS761_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(629, 1);
		try
		{
			// SugarCpp.g:630:2: ( (a= bit_and -> $a) ( ( WS )* '^' ( WS )* b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:630:4: (a= bit_and -> $a) ( ( WS )* '^' ( WS )* b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(630, 4);
			// SugarCpp.g:630:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:630:5: a= bit_and
			{
			DebugLocation(630, 6);
			PushFollow(Follow._bit_and_in_bit_xor6999);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 630:15: -> $a
			{
				DebugLocation(630, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(630, 22);
			// SugarCpp.g:630:22: ( ( WS )* '^' ( WS )* b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(490);
			while (true)
			{
				int alt490=2;
				try { DebugEnterDecision(490, false);
				try
				{
					alt490 = dfa490.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(490); }
				switch ( alt490 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:630:23: ( WS )* '^' ( WS )* b= bit_and
					{
					DebugLocation(630, 23);
					// SugarCpp.g:630:23: ( WS )*
					try { DebugEnterSubRule(488);
					while (true)
					{
						int alt488=2;
						try { DebugEnterDecision(488, false);
						int LA488_0 = input.LA(1);

						if ((LA488_0==WS))
						{
							alt488 = 1;
						}


						} finally { DebugExitDecision(488); }
						switch ( alt488 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:630:23: WS
							{
							DebugLocation(630, 23);
							WS759=(IToken)Match(input,WS,Follow._WS_in_bit_xor7008); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS759);


							}
							break;

						default:
							goto loop488;
						}
					}

					loop488:
						;

					} finally { DebugExitSubRule(488); }

					DebugLocation(630, 27);
					char_literal760=(IToken)Match(input,134,Follow._134_in_bit_xor7011); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_134.Add(char_literal760);

					DebugLocation(630, 31);
					// SugarCpp.g:630:31: ( WS )*
					try { DebugEnterSubRule(489);
					while (true)
					{
						int alt489=2;
						try { DebugEnterDecision(489, false);
						int LA489_0 = input.LA(1);

						if ((LA489_0==WS))
						{
							alt489 = 1;
						}


						} finally { DebugExitDecision(489); }
						switch ( alt489 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:630:31: WS
							{
							DebugLocation(630, 31);
							WS761=(IToken)Match(input,WS,Follow._WS_in_bit_xor7013); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS761);


							}
							break;

						default:
							goto loop489;
						}
					}

					loop489:
						;

					} finally { DebugExitSubRule(489); }

					DebugLocation(630, 36);
					PushFollow(Follow._bit_and_in_bit_xor7018);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 134, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 630:45: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(630, 48);
						// SugarCpp.g:630:48: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(630, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(630, 59);
						adaptor.AddChild(root_1, stream_134.NextNode());
						DebugLocation(630, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(630, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop490;
				}
			}

			loop490:
				;

			} finally { DebugExitSubRule(490); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 79);
			LeaveRule("bit_xor", 79);
			LeaveRule_bit_xor();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:633:1: bit_and : (a= cmp_expr -> $a) ( ( WS )* '&' ( WS )* b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 80);
		TraceIn("bit_and", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS762 = default(IToken);
		IToken char_literal763 = default(IToken);
		IToken WS764 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS762_tree = default(CommonTree);
		CommonTree char_literal763_tree = default(CommonTree);
		CommonTree WS764_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(633, 1);
		try
		{
			// SugarCpp.g:634:2: ( (a= cmp_expr -> $a) ( ( WS )* '&' ( WS )* b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:634:4: (a= cmp_expr -> $a) ( ( WS )* '&' ( WS )* b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(634, 4);
			// SugarCpp.g:634:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:634:5: a= cmp_expr
			{
			DebugLocation(634, 6);
			PushFollow(Follow._cmp_expr_in_bit_and7048);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 634:16: -> $a
			{
				DebugLocation(634, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(634, 23);
			// SugarCpp.g:634:23: ( ( WS )* '&' ( WS )* b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(493);
			while (true)
			{
				int alt493=2;
				try { DebugEnterDecision(493, false);
				try
				{
					alt493 = dfa493.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(493); }
				switch ( alt493 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:634:24: ( WS )* '&' ( WS )* b= cmp_expr
					{
					DebugLocation(634, 24);
					// SugarCpp.g:634:24: ( WS )*
					try { DebugEnterSubRule(491);
					while (true)
					{
						int alt491=2;
						try { DebugEnterDecision(491, false);
						int LA491_0 = input.LA(1);

						if ((LA491_0==WS))
						{
							alt491 = 1;
						}


						} finally { DebugExitDecision(491); }
						switch ( alt491 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:634:24: WS
							{
							DebugLocation(634, 24);
							WS762=(IToken)Match(input,WS,Follow._WS_in_bit_and7057); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS762);


							}
							break;

						default:
							goto loop491;
						}
					}

					loop491:
						;

					} finally { DebugExitSubRule(491); }

					DebugLocation(634, 28);
					char_literal763=(IToken)Match(input,91,Follow._91_in_bit_and7060); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal763);

					DebugLocation(634, 32);
					// SugarCpp.g:634:32: ( WS )*
					try { DebugEnterSubRule(492);
					while (true)
					{
						int alt492=2;
						try { DebugEnterDecision(492, false);
						int LA492_0 = input.LA(1);

						if ((LA492_0==WS))
						{
							alt492 = 1;
						}


						} finally { DebugExitDecision(492); }
						switch ( alt492 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:634:32: WS
							{
							DebugLocation(634, 32);
							WS764=(IToken)Match(input,WS,Follow._WS_in_bit_and7062); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS764);


							}
							break;

						default:
							goto loop492;
						}
					}

					loop492:
						;

					} finally { DebugExitSubRule(492); }

					DebugLocation(634, 37);
					PushFollow(Follow._cmp_expr_in_bit_and7067);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 91, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 634:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(634, 50);
						// SugarCpp.g:634:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(634, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(634, 61);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(634, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(634, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop493;
				}
			}

			loop493:
				;

			} finally { DebugExitSubRule(493); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 80);
			LeaveRule("bit_and", 80);
			LeaveRule_bit_and();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:637:1: chain_op : ( ( WS )+ '<' ( WS )* -> '<' | ( WS )* '<=' ( WS )* -> '<=' | ( WS )* '>' ( WS )* -> '>' | ( WS )* '>=' ( WS )* -> '>=' | ( WS )* '!=' ( WS )* -> '!=' | ( WS )* '==' ( WS )* -> '==' | ( WS )* 'is' ( WS )* -> 'is' | ( WS )* 'isnt' ( WS )* -> 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 81);
		TraceIn("chain_op", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS765 = default(IToken);
		IToken char_literal766 = default(IToken);
		IToken WS767 = default(IToken);
		IToken WS768 = default(IToken);
		IToken string_literal769 = default(IToken);
		IToken WS770 = default(IToken);
		IToken WS771 = default(IToken);
		IToken char_literal772 = default(IToken);
		IToken WS773 = default(IToken);
		IToken WS774 = default(IToken);
		IToken string_literal775 = default(IToken);
		IToken WS776 = default(IToken);
		IToken WS777 = default(IToken);
		IToken string_literal778 = default(IToken);
		IToken WS779 = default(IToken);
		IToken WS780 = default(IToken);
		IToken string_literal781 = default(IToken);
		IToken WS782 = default(IToken);
		IToken WS783 = default(IToken);
		IToken string_literal784 = default(IToken);
		IToken WS785 = default(IToken);
		IToken WS786 = default(IToken);
		IToken string_literal787 = default(IToken);
		IToken WS788 = default(IToken);

		CommonTree WS765_tree = default(CommonTree);
		CommonTree char_literal766_tree = default(CommonTree);
		CommonTree WS767_tree = default(CommonTree);
		CommonTree WS768_tree = default(CommonTree);
		CommonTree string_literal769_tree = default(CommonTree);
		CommonTree WS770_tree = default(CommonTree);
		CommonTree WS771_tree = default(CommonTree);
		CommonTree char_literal772_tree = default(CommonTree);
		CommonTree WS773_tree = default(CommonTree);
		CommonTree WS774_tree = default(CommonTree);
		CommonTree string_literal775_tree = default(CommonTree);
		CommonTree WS776_tree = default(CommonTree);
		CommonTree WS777_tree = default(CommonTree);
		CommonTree string_literal778_tree = default(CommonTree);
		CommonTree WS779_tree = default(CommonTree);
		CommonTree WS780_tree = default(CommonTree);
		CommonTree string_literal781_tree = default(CommonTree);
		CommonTree WS782_tree = default(CommonTree);
		CommonTree WS783_tree = default(CommonTree);
		CommonTree string_literal784_tree = default(CommonTree);
		CommonTree WS785_tree = default(CommonTree);
		CommonTree WS786_tree = default(CommonTree);
		CommonTree string_literal787_tree = default(CommonTree);
		CommonTree WS788_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(637, 1);
		try
		{
			// SugarCpp.g:638:2: ( ( WS )+ '<' ( WS )* -> '<' | ( WS )* '<=' ( WS )* -> '<=' | ( WS )* '>' ( WS )* -> '>' | ( WS )* '>=' ( WS )* -> '>=' | ( WS )* '!=' ( WS )* -> '!=' | ( WS )* '==' ( WS )* -> '==' | ( WS )* 'is' ( WS )* -> 'is' | ( WS )* 'isnt' ( WS )* -> 'isnt' )
			int alt510=8;
			try { DebugEnterDecision(510, false);
			try
			{
				alt510 = dfa510.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(510); }
			switch (alt510)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:638:4: ( WS )+ '<' ( WS )*
				{
				DebugLocation(638, 4);
				// SugarCpp.g:638:4: ( WS )+
				int cnt494=0;
				try { DebugEnterSubRule(494);
				while (true)
				{
					int alt494=2;
					try { DebugEnterDecision(494, false);
					int LA494_0 = input.LA(1);

					if ((LA494_0==WS))
					{
						alt494 = 1;
					}


					} finally { DebugExitDecision(494); }
					switch (alt494)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:638:4: WS
						{
						DebugLocation(638, 4);
						WS765=(IToken)Match(input,WS,Follow._WS_in_chain_op7094); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS765);


						}
						break;

					default:
						if (cnt494 >= 1)
							goto loop494;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee494 = new EarlyExitException( 494, input );
						DebugRecognitionException(eee494);
						throw eee494;
					}
					cnt494++;
				}
				loop494:
					;

				} finally { DebugExitSubRule(494); }

				DebugLocation(638, 8);
				char_literal766=(IToken)Match(input,115,Follow._115_in_chain_op7097); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal766);

				DebugLocation(638, 12);
				// SugarCpp.g:638:12: ( WS )*
				try { DebugEnterSubRule(495);
				while (true)
				{
					int alt495=2;
					try { DebugEnterDecision(495, false);
					int LA495_0 = input.LA(1);

					if ((LA495_0==WS))
					{
						alt495 = 1;
					}


					} finally { DebugExitDecision(495); }
					switch ( alt495 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:638:12: WS
						{
						DebugLocation(638, 12);
						WS767=(IToken)Match(input,WS,Follow._WS_in_chain_op7099); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS767);


						}
						break;

					default:
						goto loop495;
					}
				}

				loop495:
					;

				} finally { DebugExitSubRule(495); }



				{
				// AST REWRITE
				// elements: 115
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 638:16: -> '<'
				{
					DebugLocation(638, 19);
					adaptor.AddChild(root_0, stream_115.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:639:7: ( WS )* '<=' ( WS )*
				{
				DebugLocation(639, 7);
				// SugarCpp.g:639:7: ( WS )*
				try { DebugEnterSubRule(496);
				while (true)
				{
					int alt496=2;
					try { DebugEnterDecision(496, false);
					int LA496_0 = input.LA(1);

					if ((LA496_0==WS))
					{
						alt496 = 1;
					}


					} finally { DebugExitDecision(496); }
					switch ( alt496 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:639:7: WS
						{
						DebugLocation(639, 7);
						WS768=(IToken)Match(input,WS,Follow._WS_in_chain_op7112); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS768);


						}
						break;

					default:
						goto loop496;
					}
				}

				loop496:
					;

				} finally { DebugExitSubRule(496); }

				DebugLocation(639, 11);
				string_literal769=(IToken)Match(input,119,Follow._119_in_chain_op7115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(string_literal769);

				DebugLocation(639, 16);
				// SugarCpp.g:639:16: ( WS )*
				try { DebugEnterSubRule(497);
				while (true)
				{
					int alt497=2;
					try { DebugEnterDecision(497, false);
					int LA497_0 = input.LA(1);

					if ((LA497_0==WS))
					{
						alt497 = 1;
					}


					} finally { DebugExitDecision(497); }
					switch ( alt497 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:639:16: WS
						{
						DebugLocation(639, 16);
						WS770=(IToken)Match(input,WS,Follow._WS_in_chain_op7117); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS770);


						}
						break;

					default:
						goto loop497;
					}
				}

				loop497:
					;

				} finally { DebugExitSubRule(497); }



				{
				// AST REWRITE
				// elements: 119
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 639:20: -> '<='
				{
					DebugLocation(639, 23);
					adaptor.AddChild(root_0, stream_119.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:640:4: ( WS )* '>' ( WS )*
				{
				DebugLocation(640, 4);
				// SugarCpp.g:640:4: ( WS )*
				try { DebugEnterSubRule(498);
				while (true)
				{
					int alt498=2;
					try { DebugEnterDecision(498, false);
					int LA498_0 = input.LA(1);

					if ((LA498_0==WS))
					{
						alt498 = 1;
					}


					} finally { DebugExitDecision(498); }
					switch ( alt498 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:640:4: WS
						{
						DebugLocation(640, 4);
						WS771=(IToken)Match(input,WS,Follow._WS_in_chain_op7127); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS771);


						}
						break;

					default:
						goto loop498;
					}
				}

				loop498:
					;

				} finally { DebugExitSubRule(498); }

				DebugLocation(640, 8);
				char_literal772=(IToken)Match(input,125,Follow._125_in_chain_op7130); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal772);

				DebugLocation(640, 12);
				// SugarCpp.g:640:12: ( WS )*
				try { DebugEnterSubRule(499);
				while (true)
				{
					int alt499=2;
					try { DebugEnterDecision(499, false);
					int LA499_0 = input.LA(1);

					if ((LA499_0==WS))
					{
						alt499 = 1;
					}


					} finally { DebugExitDecision(499); }
					switch ( alt499 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:640:12: WS
						{
						DebugLocation(640, 12);
						WS773=(IToken)Match(input,WS,Follow._WS_in_chain_op7132); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS773);


						}
						break;

					default:
						goto loop499;
					}
				}

				loop499:
					;

				} finally { DebugExitSubRule(499); }



				{
				// AST REWRITE
				// elements: 125
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 640:16: -> '>'
				{
					DebugLocation(640, 19);
					adaptor.AddChild(root_0, stream_125.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:641:4: ( WS )* '>=' ( WS )*
				{
				DebugLocation(641, 4);
				// SugarCpp.g:641:4: ( WS )*
				try { DebugEnterSubRule(500);
				while (true)
				{
					int alt500=2;
					try { DebugEnterDecision(500, false);
					int LA500_0 = input.LA(1);

					if ((LA500_0==WS))
					{
						alt500 = 1;
					}


					} finally { DebugExitDecision(500); }
					switch ( alt500 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:641:4: WS
						{
						DebugLocation(641, 4);
						WS774=(IToken)Match(input,WS,Follow._WS_in_chain_op7142); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS774);


						}
						break;

					default:
						goto loop500;
					}
				}

				loop500:
					;

				} finally { DebugExitSubRule(500); }

				DebugLocation(641, 8);
				string_literal775=(IToken)Match(input,126,Follow._126_in_chain_op7145); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(string_literal775);

				DebugLocation(641, 13);
				// SugarCpp.g:641:13: ( WS )*
				try { DebugEnterSubRule(501);
				while (true)
				{
					int alt501=2;
					try { DebugEnterDecision(501, false);
					int LA501_0 = input.LA(1);

					if ((LA501_0==WS))
					{
						alt501 = 1;
					}


					} finally { DebugExitDecision(501); }
					switch ( alt501 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:641:13: WS
						{
						DebugLocation(641, 13);
						WS776=(IToken)Match(input,WS,Follow._WS_in_chain_op7147); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS776);


						}
						break;

					default:
						goto loop501;
					}
				}

				loop501:
					;

				} finally { DebugExitSubRule(501); }



				{
				// AST REWRITE
				// elements: 126
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 641:17: -> '>='
				{
					DebugLocation(641, 20);
					adaptor.AddChild(root_0, stream_126.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:642:4: ( WS )* '!=' ( WS )*
				{
				DebugLocation(642, 4);
				// SugarCpp.g:642:4: ( WS )*
				try { DebugEnterSubRule(502);
				while (true)
				{
					int alt502=2;
					try { DebugEnterDecision(502, false);
					int LA502_0 = input.LA(1);

					if ((LA502_0==WS))
					{
						alt502 = 1;
					}


					} finally { DebugExitDecision(502); }
					switch ( alt502 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:642:4: WS
						{
						DebugLocation(642, 4);
						WS777=(IToken)Match(input,WS,Follow._WS_in_chain_op7157); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS777);


						}
						break;

					default:
						goto loop502;
					}
				}

				loop502:
					;

				} finally { DebugExitSubRule(502); }

				DebugLocation(642, 8);
				string_literal778=(IToken)Match(input,87,Follow._87_in_chain_op7160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(string_literal778);

				DebugLocation(642, 13);
				// SugarCpp.g:642:13: ( WS )*
				try { DebugEnterSubRule(503);
				while (true)
				{
					int alt503=2;
					try { DebugEnterDecision(503, false);
					int LA503_0 = input.LA(1);

					if ((LA503_0==WS))
					{
						alt503 = 1;
					}


					} finally { DebugExitDecision(503); }
					switch ( alt503 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:642:13: WS
						{
						DebugLocation(642, 13);
						WS779=(IToken)Match(input,WS,Follow._WS_in_chain_op7162); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS779);


						}
						break;

					default:
						goto loop503;
					}
				}

				loop503:
					;

				} finally { DebugExitSubRule(503); }



				{
				// AST REWRITE
				// elements: 87
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 642:17: -> '!='
				{
					DebugLocation(642, 20);
					adaptor.AddChild(root_0, stream_87.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:643:4: ( WS )* '==' ( WS )*
				{
				DebugLocation(643, 4);
				// SugarCpp.g:643:4: ( WS )*
				try { DebugEnterSubRule(504);
				while (true)
				{
					int alt504=2;
					try { DebugEnterDecision(504, false);
					int LA504_0 = input.LA(1);

					if ((LA504_0==WS))
					{
						alt504 = 1;
					}


					} finally { DebugExitDecision(504); }
					switch ( alt504 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:643:4: WS
						{
						DebugLocation(643, 4);
						WS780=(IToken)Match(input,WS,Follow._WS_in_chain_op7172); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS780);


						}
						break;

					default:
						goto loop504;
					}
				}

				loop504:
					;

				} finally { DebugExitSubRule(504); }

				DebugLocation(643, 8);
				string_literal781=(IToken)Match(input,122,Follow._122_in_chain_op7175); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_122.Add(string_literal781);

				DebugLocation(643, 13);
				// SugarCpp.g:643:13: ( WS )*
				try { DebugEnterSubRule(505);
				while (true)
				{
					int alt505=2;
					try { DebugEnterDecision(505, false);
					int LA505_0 = input.LA(1);

					if ((LA505_0==WS))
					{
						alt505 = 1;
					}


					} finally { DebugExitDecision(505); }
					switch ( alt505 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:643:13: WS
						{
						DebugLocation(643, 13);
						WS782=(IToken)Match(input,WS,Follow._WS_in_chain_op7177); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS782);


						}
						break;

					default:
						goto loop505;
					}
				}

				loop505:
					;

				} finally { DebugExitSubRule(505); }



				{
				// AST REWRITE
				// elements: 122
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 643:17: -> '=='
				{
					DebugLocation(643, 20);
					adaptor.AddChild(root_0, stream_122.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:644:4: ( WS )* 'is' ( WS )*
				{
				DebugLocation(644, 4);
				// SugarCpp.g:644:4: ( WS )*
				try { DebugEnterSubRule(506);
				while (true)
				{
					int alt506=2;
					try { DebugEnterDecision(506, false);
					int LA506_0 = input.LA(1);

					if ((LA506_0==WS))
					{
						alt506 = 1;
					}


					} finally { DebugExitDecision(506); }
					switch ( alt506 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:644:4: WS
						{
						DebugLocation(644, 4);
						WS783=(IToken)Match(input,WS,Follow._WS_in_chain_op7187); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS783);


						}
						break;

					default:
						goto loop506;
					}
				}

				loop506:
					;

				} finally { DebugExitSubRule(506); }

				DebugLocation(644, 8);
				string_literal784=(IToken)Match(input,153,Follow._153_in_chain_op7190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_153.Add(string_literal784);

				DebugLocation(644, 13);
				// SugarCpp.g:644:13: ( WS )*
				try { DebugEnterSubRule(507);
				while (true)
				{
					int alt507=2;
					try { DebugEnterDecision(507, false);
					int LA507_0 = input.LA(1);

					if ((LA507_0==WS))
					{
						alt507 = 1;
					}


					} finally { DebugExitDecision(507); }
					switch ( alt507 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:644:13: WS
						{
						DebugLocation(644, 13);
						WS785=(IToken)Match(input,WS,Follow._WS_in_chain_op7192); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS785);


						}
						break;

					default:
						goto loop507;
					}
				}

				loop507:
					;

				} finally { DebugExitSubRule(507); }



				{
				// AST REWRITE
				// elements: 153
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 644:17: -> 'is'
				{
					DebugLocation(644, 20);
					adaptor.AddChild(root_0, stream_153.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:645:4: ( WS )* 'isnt' ( WS )*
				{
				DebugLocation(645, 4);
				// SugarCpp.g:645:4: ( WS )*
				try { DebugEnterSubRule(508);
				while (true)
				{
					int alt508=2;
					try { DebugEnterDecision(508, false);
					int LA508_0 = input.LA(1);

					if ((LA508_0==WS))
					{
						alt508 = 1;
					}


					} finally { DebugExitDecision(508); }
					switch ( alt508 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:645:4: WS
						{
						DebugLocation(645, 4);
						WS786=(IToken)Match(input,WS,Follow._WS_in_chain_op7202); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS786);


						}
						break;

					default:
						goto loop508;
					}
				}

				loop508:
					;

				} finally { DebugExitSubRule(508); }

				DebugLocation(645, 8);
				string_literal787=(IToken)Match(input,154,Follow._154_in_chain_op7205); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal787);

				DebugLocation(645, 15);
				// SugarCpp.g:645:15: ( WS )*
				try { DebugEnterSubRule(509);
				while (true)
				{
					int alt509=2;
					try { DebugEnterDecision(509, false);
					int LA509_0 = input.LA(1);

					if ((LA509_0==WS))
					{
						alt509 = 1;
					}


					} finally { DebugExitDecision(509); }
					switch ( alt509 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:645:15: WS
						{
						DebugLocation(645, 15);
						WS788=(IToken)Match(input,WS,Follow._WS_in_chain_op7207); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS788);


						}
						break;

					default:
						goto loop509;
					}
				}

				loop509:
					;

				} finally { DebugExitSubRule(509); }



				{
				// AST REWRITE
				// elements: 154
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 645:19: -> 'isnt'
				{
					DebugLocation(645, 22);
					adaptor.AddChild(root_0, stream_154.NextNode());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 81);
			LeaveRule("chain_op", 81);
			LeaveRule_chain_op();
		}
		DebugLocation(646, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:648:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 82);
		TraceIn("chain_list", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op789 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr790 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(648, 35);
		try
		{
			// SugarCpp.g:648:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:648:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(648, 13);
			// SugarCpp.g:648:13: ( chain_op shift_expr )+
			int cnt511=0;
			try { DebugEnterSubRule(511);
			while (true)
			{
				int alt511=2;
				try { DebugEnterDecision(511, false);
				try
				{
					alt511 = dfa511.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(511); }
				switch (alt511)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:648:14: chain_op shift_expr
					{
					DebugLocation(648, 14);
					PushFollow(Follow._chain_op_in_chain_list7222);
					chain_op789=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op789.Tree);
					DebugLocation(648, 23);
					PushFollow(Follow._shift_expr_in_chain_list7224);
					shift_expr790=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr790.Tree);

					}
					break;

				default:
					if (cnt511 >= 1)
						goto loop511;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee511 = new EarlyExitException( 511, input );
					DebugRecognitionException(eee511);
					throw eee511;
				}
				cnt511++;
			}
			loop511:
				;

			} finally { DebugExitSubRule(511); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 82);
			LeaveRule("chain_list", 82);
			LeaveRule_chain_list();
		}
		DebugLocation(648, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:649:1: cmp_expr : (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 83);
		TraceIn("cmp_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list791 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_chain_op=new RewriteRuleSubtreeStream(adaptor,"rule chain_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(649, 1);
		try
		{
			// SugarCpp.g:650:2: ( (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:650:4: (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(650, 4);
			// SugarCpp.g:650:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:650:5: a= shift_expr
			{
			DebugLocation(650, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr7238);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 650:18: -> $a
			{
				DebugLocation(650, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(650, 25);
			// SugarCpp.g:650:25: (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt513=2;
			try { DebugEnterSubRule(513);
			try { DebugEnterDecision(513, false);
			try
			{
				alt513 = dfa513.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(513); }
			switch (alt513)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:650:27: op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(650, 29);
				PushFollow(Follow._chain_op_in_cmp_expr7250);
				op=chain_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_chain_op.Add(op.Tree);
				DebugLocation(650, 40);
				PushFollow(Follow._shift_expr_in_cmp_expr7254);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(650, 52);
				// SugarCpp.g:650:52: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt512=2;
				try { DebugEnterSubRule(512);
				try { DebugEnterDecision(512, false);
				try
				{
					alt512 = dfa512.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(512); }
				switch (alt512)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:650:54: chain_list
					{
					DebugLocation(650, 54);
					PushFollow(Follow._chain_list_in_cmp_expr7258);
					chain_list791=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list791.Tree);


					{
					// AST REWRITE
					// elements: op, chain_list, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 650:65: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(650, 68);
						// SugarCpp.g:650:68: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(650, 70);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(650, 83);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(650, 93);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(650, 97);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(650, 99);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:651:26: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 651:26: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(651, 29);
						// SugarCpp.g:651:29: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(651, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(651, 41);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(651, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(651, 55);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(512); }


				}
				break;

			}
			} finally { DebugExitSubRule(513); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 83);
			LeaveRule("cmp_expr", 83);
			LeaveRule_cmp_expr();
		}
		DebugLocation(654, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:656:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 84);
		TraceIn("shift_expr_op", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set792 = default(IToken);

		CommonTree set792_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(656, 27);
		try
		{
			// SugarCpp.g:656:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(656, 14);

			set792=(IToken)input.LT(1);
			if (input.LA(1)==117||input.LA(1)==127)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set792));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 84);
			LeaveRule("shift_expr_op", 84);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(656, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:657:1: shift_expr : (a= add_expr -> $a) ( ( WS )* shift_expr_op ( WS )* b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 85);
		TraceIn("shift_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS793 = default(IToken);
		IToken WS795 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op794 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS793_tree = default(CommonTree);
		CommonTree WS795_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(657, 1);
		try
		{
			// SugarCpp.g:658:2: ( (a= add_expr -> $a) ( ( WS )* shift_expr_op ( WS )* b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:658:4: (a= add_expr -> $a) ( ( WS )* shift_expr_op ( WS )* b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(658, 4);
			// SugarCpp.g:658:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:658:5: a= add_expr
			{
			DebugLocation(658, 6);
			PushFollow(Follow._add_expr_in_shift_expr7378);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 658:16: -> $a
			{
				DebugLocation(658, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(658, 23);
			// SugarCpp.g:658:23: ( ( WS )* shift_expr_op ( WS )* b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(516);
			while (true)
			{
				int alt516=2;
				try { DebugEnterDecision(516, false);
				try
				{
					alt516 = dfa516.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(516); }
				switch ( alt516 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:658:24: ( WS )* shift_expr_op ( WS )* b= add_expr
					{
					DebugLocation(658, 24);
					// SugarCpp.g:658:24: ( WS )*
					try { DebugEnterSubRule(514);
					while (true)
					{
						int alt514=2;
						try { DebugEnterDecision(514, false);
						int LA514_0 = input.LA(1);

						if ((LA514_0==WS))
						{
							alt514 = 1;
						}


						} finally { DebugExitDecision(514); }
						switch ( alt514 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:658:24: WS
							{
							DebugLocation(658, 24);
							WS793=(IToken)Match(input,WS,Follow._WS_in_shift_expr7387); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS793);


							}
							break;

						default:
							goto loop514;
						}
					}

					loop514:
						;

					} finally { DebugExitSubRule(514); }

					DebugLocation(658, 28);
					PushFollow(Follow._shift_expr_op_in_shift_expr7390);
					shift_expr_op794=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op794.Tree);
					DebugLocation(658, 42);
					// SugarCpp.g:658:42: ( WS )*
					try { DebugEnterSubRule(515);
					while (true)
					{
						int alt515=2;
						try { DebugEnterDecision(515, false);
						int LA515_0 = input.LA(1);

						if ((LA515_0==WS))
						{
							alt515 = 1;
						}


						} finally { DebugExitDecision(515); }
						switch ( alt515 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:658:42: WS
							{
							DebugLocation(658, 42);
							WS795=(IToken)Match(input,WS,Follow._WS_in_shift_expr7392); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS795);


							}
							break;

						default:
							goto loop515;
						}
					}

					loop515:
						;

					} finally { DebugExitSubRule(515); }

					DebugLocation(658, 47);
					PushFollow(Follow._add_expr_in_shift_expr7397);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 658:57: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(658, 60);
						// SugarCpp.g:658:60: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(658, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(658, 71);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(658, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(658, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop516;
				}
			}

			loop516:
				;

			} finally { DebugExitSubRule(516); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 85);
			LeaveRule("shift_expr", 85);
			LeaveRule_shift_expr();
		}
		DebugLocation(659, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:661:1: add_expr : (a= mul_expr -> $a) ( ( WS )* '+' ( WS )* b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | ( WS )* '-' ( WS )* b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 86);
		TraceIn("add_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS796 = default(IToken);
		IToken char_literal797 = default(IToken);
		IToken WS798 = default(IToken);
		IToken WS799 = default(IToken);
		IToken char_literal800 = default(IToken);
		IToken WS801 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS796_tree = default(CommonTree);
		CommonTree char_literal797_tree = default(CommonTree);
		CommonTree WS798_tree = default(CommonTree);
		CommonTree WS799_tree = default(CommonTree);
		CommonTree char_literal800_tree = default(CommonTree);
		CommonTree WS801_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(661, 1);
		try
		{
			// SugarCpp.g:662:2: ( (a= mul_expr -> $a) ( ( WS )* '+' ( WS )* b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | ( WS )* '-' ( WS )* b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:662:4: (a= mul_expr -> $a) ( ( WS )* '+' ( WS )* b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | ( WS )* '-' ( WS )* b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(662, 4);
			// SugarCpp.g:662:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:662:5: a= mul_expr
			{
			DebugLocation(662, 6);
			PushFollow(Follow._mul_expr_in_add_expr7427);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 662:16: -> $a
			{
				DebugLocation(662, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(662, 23);
			// SugarCpp.g:662:23: ( ( WS )* '+' ( WS )* b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | ( WS )* '-' ( WS )* b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(521);
			while (true)
			{
				int alt521=3;
				try { DebugEnterDecision(521, false);
				try
				{
					alt521 = dfa521.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(521); }
				switch ( alt521 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:662:25: ( WS )* '+' ( WS )* b= mul_expr
					{
					DebugLocation(662, 25);
					// SugarCpp.g:662:25: ( WS )*
					try { DebugEnterSubRule(517);
					while (true)
					{
						int alt517=2;
						try { DebugEnterDecision(517, false);
						int LA517_0 = input.LA(1);

						if ((LA517_0==WS))
						{
							alt517 = 1;
						}


						} finally { DebugExitDecision(517); }
						switch ( alt517 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:662:25: WS
							{
							DebugLocation(662, 25);
							WS796=(IToken)Match(input,WS,Follow._WS_in_add_expr7437); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS796);


							}
							break;

						default:
							goto loop517;
						}
					}

					loop517:
						;

					} finally { DebugExitSubRule(517); }

					DebugLocation(662, 29);
					char_literal797=(IToken)Match(input,97,Follow._97_in_add_expr7440); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal797);

					DebugLocation(662, 33);
					// SugarCpp.g:662:33: ( WS )*
					try { DebugEnterSubRule(518);
					while (true)
					{
						int alt518=2;
						try { DebugEnterDecision(518, false);
						int LA518_0 = input.LA(1);

						if ((LA518_0==WS))
						{
							alt518 = 1;
						}


						} finally { DebugExitDecision(518); }
						switch ( alt518 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:662:33: WS
							{
							DebugLocation(662, 33);
							WS798=(IToken)Match(input,WS,Follow._WS_in_add_expr7442); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS798);


							}
							break;

						default:
							goto loop518;
						}
					}

					loop518:
						;

					} finally { DebugExitSubRule(518); }

					DebugLocation(662, 38);
					PushFollow(Follow._mul_expr_in_add_expr7447);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 97, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 662:48: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(662, 51);
						// SugarCpp.g:662:51: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(662, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(662, 62);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(662, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(662, 77);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:663:10: ( WS )* '-' ( WS )* b= mul_expr
					{
					DebugLocation(663, 10);
					// SugarCpp.g:663:10: ( WS )*
					try { DebugEnterSubRule(519);
					while (true)
					{
						int alt519=2;
						try { DebugEnterDecision(519, false);
						int LA519_0 = input.LA(1);

						if ((LA519_0==WS))
						{
							alt519 = 1;
						}


						} finally { DebugExitDecision(519); }
						switch ( alt519 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:10: WS
							{
							DebugLocation(663, 10);
							WS799=(IToken)Match(input,WS,Follow._WS_in_add_expr7472); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS799);


							}
							break;

						default:
							goto loop519;
						}
					}

					loop519:
						;

					} finally { DebugExitSubRule(519); }

					DebugLocation(663, 14);
					char_literal800=(IToken)Match(input,101,Follow._101_in_add_expr7475); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(char_literal800);

					DebugLocation(663, 18);
					// SugarCpp.g:663:18: ( WS )*
					try { DebugEnterSubRule(520);
					while (true)
					{
						int alt520=2;
						try { DebugEnterDecision(520, false);
						int LA520_0 = input.LA(1);

						if ((LA520_0==WS))
						{
							alt520 = 1;
						}


						} finally { DebugExitDecision(520); }
						switch ( alt520 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:18: WS
							{
							DebugLocation(663, 18);
							WS801=(IToken)Match(input,WS,Follow._WS_in_add_expr7477); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS801);


							}
							break;

						default:
							goto loop520;
						}
					}

					loop520:
						;

					} finally { DebugExitSubRule(520); }

					DebugLocation(663, 23);
					PushFollow(Follow._mul_expr_in_add_expr7482);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 101
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 663:33: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(663, 36);
						// SugarCpp.g:663:36: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(663, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(663, 47);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(663, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(663, 62);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop521;
				}
			}

			loop521:
				;

			} finally { DebugExitSubRule(521); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 86);
			LeaveRule("add_expr", 86);
			LeaveRule_add_expr();
		}
		DebugLocation(665, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:667:1: mul_expr : (a= infix_expr -> $a) ( ( WS )* '*' ( WS )* b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | ( WS )* '/' ( WS )* b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | ( WS )* '%' ( WS )* b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 87);
		TraceIn("mul_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS802 = default(IToken);
		IToken char_literal803 = default(IToken);
		IToken WS804 = default(IToken);
		IToken WS805 = default(IToken);
		IToken char_literal806 = default(IToken);
		IToken WS807 = default(IToken);
		IToken WS808 = default(IToken);
		IToken char_literal809 = default(IToken);
		IToken WS810 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS802_tree = default(CommonTree);
		CommonTree char_literal803_tree = default(CommonTree);
		CommonTree WS804_tree = default(CommonTree);
		CommonTree WS805_tree = default(CommonTree);
		CommonTree char_literal806_tree = default(CommonTree);
		CommonTree WS807_tree = default(CommonTree);
		CommonTree WS808_tree = default(CommonTree);
		CommonTree char_literal809_tree = default(CommonTree);
		CommonTree WS810_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(667, 1);
		try
		{
			// SugarCpp.g:668:2: ( (a= infix_expr -> $a) ( ( WS )* '*' ( WS )* b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | ( WS )* '/' ( WS )* b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | ( WS )* '%' ( WS )* b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:668:4: (a= infix_expr -> $a) ( ( WS )* '*' ( WS )* b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | ( WS )* '/' ( WS )* b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | ( WS )* '%' ( WS )* b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(668, 4);
			// SugarCpp.g:668:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:668:5: a= infix_expr
			{
			DebugLocation(668, 6);
			PushFollow(Follow._infix_expr_in_mul_expr7520);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 668:18: -> $a
			{
				DebugLocation(668, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(668, 25);
			// SugarCpp.g:668:25: ( ( WS )* '*' ( WS )* b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | ( WS )* '/' ( WS )* b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | ( WS )* '%' ( WS )* b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(528);
			while (true)
			{
				int alt528=4;
				try { DebugEnterDecision(528, false);
				try
				{
					alt528 = dfa528.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(528); }
				switch ( alt528 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:668:27: ( WS )* '*' ( WS )* b= infix_expr
					{
					DebugLocation(668, 27);
					// SugarCpp.g:668:27: ( WS )*
					try { DebugEnterSubRule(522);
					while (true)
					{
						int alt522=2;
						try { DebugEnterDecision(522, false);
						int LA522_0 = input.LA(1);

						if ((LA522_0==WS))
						{
							alt522 = 1;
						}


						} finally { DebugExitDecision(522); }
						switch ( alt522 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:668:27: WS
							{
							DebugLocation(668, 27);
							WS802=(IToken)Match(input,WS,Follow._WS_in_mul_expr7530); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS802);


							}
							break;

						default:
							goto loop522;
						}
					}

					loop522:
						;

					} finally { DebugExitSubRule(522); }

					DebugLocation(668, 31);
					char_literal803=(IToken)Match(input,95,Follow._95_in_mul_expr7533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal803);

					DebugLocation(668, 35);
					// SugarCpp.g:668:35: ( WS )*
					try { DebugEnterSubRule(523);
					while (true)
					{
						int alt523=2;
						try { DebugEnterDecision(523, false);
						int LA523_0 = input.LA(1);

						if ((LA523_0==WS))
						{
							alt523 = 1;
						}


						} finally { DebugExitDecision(523); }
						switch ( alt523 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:668:35: WS
							{
							DebugLocation(668, 35);
							WS804=(IToken)Match(input,WS,Follow._WS_in_mul_expr7535); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS804);


							}
							break;

						default:
							goto loop523;
						}
					}

					loop523:
						;

					} finally { DebugExitSubRule(523); }

					DebugLocation(668, 40);
					PushFollow(Follow._infix_expr_in_mul_expr7540);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 95, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 668:52: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(668, 55);
						// SugarCpp.g:668:55: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(668, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(668, 66);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(668, 71);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(668, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:669:12: ( WS )* '/' ( WS )* b= infix_expr
					{
					DebugLocation(669, 12);
					// SugarCpp.g:669:12: ( WS )*
					try { DebugEnterSubRule(524);
					while (true)
					{
						int alt524=2;
						try { DebugEnterDecision(524, false);
						int LA524_0 = input.LA(1);

						if ((LA524_0==WS))
						{
							alt524 = 1;
						}


						} finally { DebugExitDecision(524); }
						switch ( alt524 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:669:12: WS
							{
							DebugLocation(669, 12);
							WS805=(IToken)Match(input,WS,Follow._WS_in_mul_expr7567); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS805);


							}
							break;

						default:
							goto loop524;
						}
					}

					loop524:
						;

					} finally { DebugExitSubRule(524); }

					DebugLocation(669, 16);
					char_literal806=(IToken)Match(input,109,Follow._109_in_mul_expr7570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal806);

					DebugLocation(669, 20);
					// SugarCpp.g:669:20: ( WS )*
					try { DebugEnterSubRule(525);
					while (true)
					{
						int alt525=2;
						try { DebugEnterDecision(525, false);
						int LA525_0 = input.LA(1);

						if ((LA525_0==WS))
						{
							alt525 = 1;
						}


						} finally { DebugExitDecision(525); }
						switch ( alt525 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:669:20: WS
							{
							DebugLocation(669, 20);
							WS807=(IToken)Match(input,WS,Follow._WS_in_mul_expr7572); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS807);


							}
							break;

						default:
							goto loop525;
						}
					}

					loop525:
						;

					} finally { DebugExitSubRule(525); }

					DebugLocation(669, 25);
					PushFollow(Follow._infix_expr_in_mul_expr7577);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 109, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 669:37: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(669, 40);
						// SugarCpp.g:669:40: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(669, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(669, 51);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(669, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(669, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:670:12: ( WS )* '%' ( WS )* b= infix_expr
					{
					DebugLocation(670, 12);
					// SugarCpp.g:670:12: ( WS )*
					try { DebugEnterSubRule(526);
					while (true)
					{
						int alt526=2;
						try { DebugEnterDecision(526, false);
						int LA526_0 = input.LA(1);

						if ((LA526_0==WS))
						{
							alt526 = 1;
						}


						} finally { DebugExitDecision(526); }
						switch ( alt526 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:670:12: WS
							{
							DebugLocation(670, 12);
							WS808=(IToken)Match(input,WS,Follow._WS_in_mul_expr7604); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS808);


							}
							break;

						default:
							goto loop526;
						}
					}

					loop526:
						;

					} finally { DebugExitSubRule(526); }

					DebugLocation(670, 16);
					char_literal809=(IToken)Match(input,88,Follow._88_in_mul_expr7607); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal809);

					DebugLocation(670, 20);
					// SugarCpp.g:670:20: ( WS )*
					try { DebugEnterSubRule(527);
					while (true)
					{
						int alt527=2;
						try { DebugEnterDecision(527, false);
						int LA527_0 = input.LA(1);

						if ((LA527_0==WS))
						{
							alt527 = 1;
						}


						} finally { DebugExitDecision(527); }
						switch ( alt527 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:670:20: WS
							{
							DebugLocation(670, 20);
							WS810=(IToken)Match(input,WS,Follow._WS_in_mul_expr7609); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS810);


							}
							break;

						default:
							goto loop527;
						}
					}

					loop527:
						;

					} finally { DebugExitSubRule(527); }

					DebugLocation(670, 25);
					PushFollow(Follow._infix_expr_in_mul_expr7614);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 88, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 670:37: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(670, 40);
						// SugarCpp.g:670:40: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(670, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(670, 51);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(670, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(670, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop528;
				}
			}

			loop528:
				;

			} finally { DebugExitSubRule(528); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 87);
			LeaveRule("mul_expr", 87);
			LeaveRule_mul_expr();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:674:1: infix_expr : (a= selector_expr -> $a) ( ( WS )* infix_func ( WS )* b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 88);
		TraceIn("infix_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS811 = default(IToken);
		IToken WS813 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func812 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS811_tree = default(CommonTree);
		CommonTree WS813_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(674, 1);
		try
		{
			// SugarCpp.g:675:2: ( (a= selector_expr -> $a) ( ( WS )* infix_func ( WS )* b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:675:4: (a= selector_expr -> $a) ( ( WS )* infix_func ( WS )* b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(675, 4);
			// SugarCpp.g:675:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:675:5: a= selector_expr
			{
			DebugLocation(675, 6);
			PushFollow(Follow._selector_expr_in_infix_expr7654);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 675:21: -> $a
			{
				DebugLocation(675, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(675, 28);
			// SugarCpp.g:675:28: ( ( WS )* infix_func ( WS )* b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(531);
			while (true)
			{
				int alt531=2;
				try { DebugEnterDecision(531, false);
				try
				{
					alt531 = dfa531.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(531); }
				switch ( alt531 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:675:30: ( WS )* infix_func ( WS )* b= selector_expr
					{
					DebugLocation(675, 30);
					// SugarCpp.g:675:30: ( WS )*
					try { DebugEnterSubRule(529);
					while (true)
					{
						int alt529=2;
						try { DebugEnterDecision(529, false);
						int LA529_0 = input.LA(1);

						if ((LA529_0==WS))
						{
							alt529 = 1;
						}


						} finally { DebugExitDecision(529); }
						switch ( alt529 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:675:30: WS
							{
							DebugLocation(675, 30);
							WS811=(IToken)Match(input,WS,Follow._WS_in_infix_expr7664); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS811);


							}
							break;

						default:
							goto loop529;
						}
					}

					loop529:
						;

					} finally { DebugExitSubRule(529); }

					DebugLocation(675, 34);
					PushFollow(Follow._infix_func_in_infix_expr7667);
					infix_func812=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func812.Tree);
					DebugLocation(675, 45);
					// SugarCpp.g:675:45: ( WS )*
					try { DebugEnterSubRule(530);
					while (true)
					{
						int alt530=2;
						try { DebugEnterDecision(530, false);
						int LA530_0 = input.LA(1);

						if ((LA530_0==WS))
						{
							alt530 = 1;
						}


						} finally { DebugExitDecision(530); }
						switch ( alt530 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:675:45: WS
							{
							DebugLocation(675, 45);
							WS813=(IToken)Match(input,WS,Follow._WS_in_infix_expr7669); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS813);


							}
							break;

						default:
							goto loop530;
						}
					}

					loop530:
						;

					} finally { DebugExitSubRule(530); }

					DebugLocation(675, 50);
					PushFollow(Follow._selector_expr_in_infix_expr7674);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 675:66: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(675, 69);
						// SugarCpp.g:675:69: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(675, 71);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(675, 82);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(675, 94);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(675, 106);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop531;
				}
			}

			loop531:
				;

			} finally { DebugExitSubRule(531); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 88);
			LeaveRule("infix_expr", 88);
			LeaveRule_infix_expr();
		}
		DebugLocation(676, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:678:1: selector_expr : (a= cast_expr -> $a) ( ( WS )* '->*' ( WS )* b= ident -> ^( Expr_Access '->*' $selector_expr $b) | ( WS )* '.*' ( WS )* b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 89);
		TraceIn("selector_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS814 = default(IToken);
		IToken string_literal815 = default(IToken);
		IToken WS816 = default(IToken);
		IToken WS817 = default(IToken);
		IToken string_literal818 = default(IToken);
		IToken WS819 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS814_tree = default(CommonTree);
		CommonTree string_literal815_tree = default(CommonTree);
		CommonTree WS816_tree = default(CommonTree);
		CommonTree WS817_tree = default(CommonTree);
		CommonTree string_literal818_tree = default(CommonTree);
		CommonTree WS819_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(678, 1);
		try
		{
			// SugarCpp.g:679:2: ( (a= cast_expr -> $a) ( ( WS )* '->*' ( WS )* b= ident -> ^( Expr_Access '->*' $selector_expr $b) | ( WS )* '.*' ( WS )* b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:679:4: (a= cast_expr -> $a) ( ( WS )* '->*' ( WS )* b= ident -> ^( Expr_Access '->*' $selector_expr $b) | ( WS )* '.*' ( WS )* b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(679, 4);
			// SugarCpp.g:679:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:679:5: a= cast_expr
			{
			DebugLocation(679, 6);
			PushFollow(Follow._cast_expr_in_selector_expr7706);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 679:17: -> $a
			{
				DebugLocation(679, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(679, 24);
			// SugarCpp.g:679:24: ( ( WS )* '->*' ( WS )* b= ident -> ^( Expr_Access '->*' $selector_expr $b) | ( WS )* '.*' ( WS )* b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(536);
			while (true)
			{
				int alt536=3;
				try { DebugEnterDecision(536, false);
				try
				{
					alt536 = dfa536.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(536); }
				switch ( alt536 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:679:26: ( WS )* '->*' ( WS )* b= ident
					{
					DebugLocation(679, 26);
					// SugarCpp.g:679:26: ( WS )*
					try { DebugEnterSubRule(532);
					while (true)
					{
						int alt532=2;
						try { DebugEnterDecision(532, false);
						int LA532_0 = input.LA(1);

						if ((LA532_0==WS))
						{
							alt532 = 1;
						}


						} finally { DebugExitDecision(532); }
						switch ( alt532 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:679:26: WS
							{
							DebugLocation(679, 26);
							WS814=(IToken)Match(input,WS,Follow._WS_in_selector_expr7716); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS814);


							}
							break;

						default:
							goto loop532;
						}
					}

					loop532:
						;

					} finally { DebugExitSubRule(532); }

					DebugLocation(679, 30);
					string_literal815=(IToken)Match(input,106,Follow._106_in_selector_expr7719); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(string_literal815);

					DebugLocation(679, 36);
					// SugarCpp.g:679:36: ( WS )*
					try { DebugEnterSubRule(533);
					while (true)
					{
						int alt533=2;
						try { DebugEnterDecision(533, false);
						int LA533_0 = input.LA(1);

						if ((LA533_0==WS))
						{
							alt533 = 1;
						}


						} finally { DebugExitDecision(533); }
						switch ( alt533 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:679:36: WS
							{
							DebugLocation(679, 36);
							WS816=(IToken)Match(input,WS,Follow._WS_in_selector_expr7721); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS816);


							}
							break;

						default:
							goto loop533;
						}
					}

					loop533:
						;

					} finally { DebugExitSubRule(533); }

					DebugLocation(679, 41);
					PushFollow(Follow._ident_in_selector_expr7726);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 106
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 679:48: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(679, 51);
						// SugarCpp.g:679:51: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(679, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(679, 65);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(679, 72);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(679, 87);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:680:11: ( WS )* '.*' ( WS )* b= ident
					{
					DebugLocation(680, 11);
					// SugarCpp.g:680:11: ( WS )*
					try { DebugEnterSubRule(534);
					while (true)
					{
						int alt534=2;
						try { DebugEnterDecision(534, false);
						int LA534_0 = input.LA(1);

						if ((LA534_0==WS))
						{
							alt534 = 1;
						}


						} finally { DebugExitDecision(534); }
						switch ( alt534 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:680:11: WS
							{
							DebugLocation(680, 11);
							WS817=(IToken)Match(input,WS,Follow._WS_in_selector_expr7752); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS817);


							}
							break;

						default:
							goto loop534;
						}
					}

					loop534:
						;

					} finally { DebugExitSubRule(534); }

					DebugLocation(680, 15);
					string_literal818=(IToken)Match(input,108,Follow._108_in_selector_expr7755); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(string_literal818);

					DebugLocation(680, 21);
					// SugarCpp.g:680:21: ( WS )*
					try { DebugEnterSubRule(535);
					while (true)
					{
						int alt535=2;
						try { DebugEnterDecision(535, false);
						int LA535_0 = input.LA(1);

						if ((LA535_0==WS))
						{
							alt535 = 1;
						}


						} finally { DebugExitDecision(535); }
						switch ( alt535 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:680:21: WS
							{
							DebugLocation(680, 21);
							WS819=(IToken)Match(input,WS,Follow._WS_in_selector_expr7758); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS819);


							}
							break;

						default:
							goto loop535;
						}
					}

					loop535:
						;

					} finally { DebugExitSubRule(535); }

					DebugLocation(680, 26);
					PushFollow(Follow._ident_in_selector_expr7763);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 108
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 680:33: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(680, 36);
						// SugarCpp.g:680:36: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(680, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(680, 50);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(680, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(680, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop536;
				}
			}

			loop536:
				;

			} finally { DebugExitSubRule(536); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 89);
			LeaveRule("selector_expr", 89);
			LeaveRule_selector_expr();
		}
		DebugLocation(682, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:684:1: cast_expr : ( ( '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr )=> '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 90);
		TraceIn("cast_expr", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal820 = default(IToken);
		IToken WS821 = default(IToken);
		IToken WS823 = default(IToken);
		IToken char_literal824 = default(IToken);
		IToken WS825 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name822 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr826 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr827 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal820_tree = default(CommonTree);
		CommonTree WS821_tree = default(CommonTree);
		CommonTree WS823_tree = default(CommonTree);
		CommonTree char_literal824_tree = default(CommonTree);
		CommonTree WS825_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(684, 1);
		try
		{
			// SugarCpp.g:685:2: ( ( '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr )=> '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt540=2;
			try { DebugEnterDecision(540, false);
			int LA540_0 = input.LA(1);

			if ((LA540_0==93))
			{
				int LA540_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt540 = 1;
				}
				else if ((true))
				{
					alt540 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 540, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA540_0==IDENT||LA540_0==NUMBER||LA540_0==STRING||LA540_0==86||LA540_0==91||LA540_0==95||(LA540_0>=97 && LA540_0<=98)||(LA540_0>=101 && LA540_0<=102)||LA540_0==131||(LA540_0>=160 && LA540_0<=161)||LA540_0==186))
			{
				alt540 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 540, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(540); }
			switch (alt540)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:685:4: ( '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr )=> '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr
				{
				DebugLocation(685, 51);
				char_literal820=(IToken)Match(input,93,Follow._93_in_cast_expr7821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal820);

				DebugLocation(685, 55);
				// SugarCpp.g:685:55: ( WS )*
				try { DebugEnterSubRule(537);
				while (true)
				{
					int alt537=2;
					try { DebugEnterDecision(537, false);
					int LA537_0 = input.LA(1);

					if ((LA537_0==WS))
					{
						alt537 = 1;
					}


					} finally { DebugExitDecision(537); }
					switch ( alt537 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:685:55: WS
						{
						DebugLocation(685, 55);
						WS821=(IToken)Match(input,WS,Follow._WS_in_cast_expr7823); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS821);


						}
						break;

					default:
						goto loop537;
					}
				}

				loop537:
					;

				} finally { DebugExitSubRule(537); }

				DebugLocation(685, 59);
				PushFollow(Follow._type_name_in_cast_expr7826);
				type_name822=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name822.Tree);
				DebugLocation(685, 69);
				// SugarCpp.g:685:69: ( WS )*
				try { DebugEnterSubRule(538);
				while (true)
				{
					int alt538=2;
					try { DebugEnterDecision(538, false);
					int LA538_0 = input.LA(1);

					if ((LA538_0==WS))
					{
						alt538 = 1;
					}


					} finally { DebugExitDecision(538); }
					switch ( alt538 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:685:69: WS
						{
						DebugLocation(685, 69);
						WS823=(IToken)Match(input,WS,Follow._WS_in_cast_expr7828); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS823);


						}
						break;

					default:
						goto loop538;
					}
				}

				loop538:
					;

				} finally { DebugExitSubRule(538); }

				DebugLocation(685, 73);
				char_literal824=(IToken)Match(input,94,Follow._94_in_cast_expr7831); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal824);

				DebugLocation(685, 77);
				// SugarCpp.g:685:77: ( WS )*
				try { DebugEnterSubRule(539);
				while (true)
				{
					int alt539=2;
					try { DebugEnterDecision(539, false);
					int LA539_0 = input.LA(1);

					if ((LA539_0==WS))
					{
						alt539 = 1;
					}


					} finally { DebugExitDecision(539); }
					switch ( alt539 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:685:77: WS
						{
						DebugLocation(685, 77);
						WS825=(IToken)Match(input,WS,Follow._WS_in_cast_expr7833); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS825);


						}
						break;

					default:
						goto loop539;
					}
				}

				loop539:
					;

				} finally { DebugExitSubRule(539); }

				DebugLocation(685, 81);
				PushFollow(Follow._prefix_expr_in_cast_expr7836);
				prefix_expr826=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr826.Tree);


				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 685:93: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(685, 96);
					// SugarCpp.g:685:96: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(685, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(685, 108);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(685, 118);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:686:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(686, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr7851);
				prefix_expr827=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr827.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 90);
			LeaveRule("cast_expr", 90);
			LeaveRule_cast_expr();
		}
		DebugLocation(687, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:689:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 91);
		TraceIn("prefix_expr_op", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set828 = default(IToken);

		CommonTree set828_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(689, 71);
		try
		{
			// SugarCpp.g:689:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(689, 15);

			set828=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==91||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=101 && input.LA(1)<=102)||input.LA(1)==161||input.LA(1)==186)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set828));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 91);
			LeaveRule("prefix_expr_op", 91);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(689, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:690:1: prefix_expr : ( ( prefix_expr_op ( WS )* prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' ( WS )* type_no_array ( ( WS )* bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 92);
		TraceIn("prefix_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS830 = default(IToken);
		IToken string_literal832 = default(IToken);
		IToken WS833 = default(IToken);
		IToken WS835 = default(IToken);
		IToken WS837 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op829 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr831 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array834 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list836 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list838 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr839 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS830_tree = default(CommonTree);
		CommonTree string_literal832_tree = default(CommonTree);
		CommonTree WS833_tree = default(CommonTree);
		CommonTree WS835_tree = default(CommonTree);
		CommonTree WS837_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(690, 1);
		try
		{
			// SugarCpp.g:691:2: ( ( prefix_expr_op ( WS )* prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' ( WS )* type_no_array ( ( WS )* bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt546=3;
			try { DebugEnterDecision(546, false);
			switch (input.LA(1))
			{
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 161:
			case 186:
				{
				alt546 = 1;
				}
				break;
			case 160:
				{
				alt546 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 93:
			case 131:
				{
				alt546 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 546, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(546); }
			switch (alt546)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:691:4: ( prefix_expr_op ( WS )* prefix_expr )
				{
				DebugLocation(691, 4);
				// SugarCpp.g:691:4: ( prefix_expr_op ( WS )* prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:691:5: prefix_expr_op ( WS )* prefix_expr
				{
				DebugLocation(691, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr7901);
				prefix_expr_op829=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op829.Tree);
				DebugLocation(691, 20);
				// SugarCpp.g:691:20: ( WS )*
				try { DebugEnterSubRule(541);
				while (true)
				{
					int alt541=2;
					try { DebugEnterDecision(541, false);
					int LA541_0 = input.LA(1);

					if ((LA541_0==WS))
					{
						alt541 = 1;
					}


					} finally { DebugExitDecision(541); }
					switch ( alt541 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:691:20: WS
						{
						DebugLocation(691, 20);
						WS830=(IToken)Match(input,WS,Follow._WS_in_prefix_expr7903); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS830);


						}
						break;

					default:
						goto loop541;
					}
				}

				loop541:
					;

				} finally { DebugExitSubRule(541); }

				DebugLocation(691, 24);
				PushFollow(Follow._prefix_expr_in_prefix_expr7906);
				prefix_expr831=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr831.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 691:37: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(691, 40);
					// SugarCpp.g:691:40: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(691, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(691, 54);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(691, 69);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:692:4: 'new' ( WS )* type_no_array ( ( WS )* bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(692, 4);
				string_literal832=(IToken)Match(input,160,Follow._160_in_prefix_expr7922); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal832);

				DebugLocation(692, 10);
				// SugarCpp.g:692:10: ( WS )*
				try { DebugEnterSubRule(542);
				while (true)
				{
					int alt542=2;
					try { DebugEnterDecision(542, false);
					int LA542_0 = input.LA(1);

					if ((LA542_0==WS))
					{
						alt542 = 1;
					}


					} finally { DebugExitDecision(542); }
					switch ( alt542 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:692:10: WS
						{
						DebugLocation(692, 10);
						WS833=(IToken)Match(input,WS,Follow._WS_in_prefix_expr7924); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS833);


						}
						break;

					default:
						goto loop542;
					}
				}

				loop542:
					;

				} finally { DebugExitSubRule(542); }

				DebugLocation(692, 14);
				PushFollow(Follow._type_no_array_in_prefix_expr7927);
				type_no_array834=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array834.Tree);
				DebugLocation(692, 28);
				// SugarCpp.g:692:28: ( ( WS )* bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt545=2;
				try { DebugEnterSubRule(545);
				try { DebugEnterDecision(545, false);
				try
				{
					alt545 = dfa545.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(545); }
				switch (alt545)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:692:30: ( WS )* bracket_expr_list
					{
					DebugLocation(692, 30);
					// SugarCpp.g:692:30: ( WS )*
					try { DebugEnterSubRule(543);
					while (true)
					{
						int alt543=2;
						try { DebugEnterDecision(543, false);
						int LA543_0 = input.LA(1);

						if ((LA543_0==WS))
						{
							alt543 = 1;
						}


						} finally { DebugExitDecision(543); }
						switch ( alt543 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:692:30: WS
							{
							DebugLocation(692, 30);
							WS835=(IToken)Match(input,WS,Follow._WS_in_prefix_expr7931); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS835);


							}
							break;

						default:
							goto loop543;
						}
					}

					loop543:
						;

					} finally { DebugExitSubRule(543); }

					DebugLocation(692, 34);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr7934);
					bracket_expr_list836=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list836.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 692:52: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(692, 55);
						// SugarCpp.g:692:55: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(692, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(692, 71);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(692, 85);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:693:15: ( WS )* square_expr_list
					{
					DebugLocation(693, 15);
					// SugarCpp.g:693:15: ( WS )*
					try { DebugEnterSubRule(544);
					while (true)
					{
						int alt544=2;
						try { DebugEnterDecision(544, false);
						int LA544_0 = input.LA(1);

						if ((LA544_0==WS))
						{
							alt544 = 1;
						}


						} finally { DebugExitDecision(544); }
						switch ( alt544 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:693:15: WS
							{
							DebugLocation(693, 15);
							WS837=(IToken)Match(input,WS,Follow._WS_in_prefix_expr7960); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS837);


							}
							break;

						default:
							goto loop544;
						}
					}

					loop544:
						;

					} finally { DebugExitSubRule(544); }

					DebugLocation(693, 19);
					PushFollow(Follow._square_expr_list_in_prefix_expr7963);
					square_expr_list838=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list838.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 693:36: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(693, 39);
						// SugarCpp.g:693:39: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(693, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(693, 56);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(693, 70);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(545); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:695:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(695, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr7992);
				suffix_expr839=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr839.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 92);
			LeaveRule("prefix_expr", 92);
			LeaveRule_prefix_expr();
		}
		DebugLocation(696, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:698:1: square_expr_list : '[' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 93);
		TraceIn("square_expr_list", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal840 = default(IToken);
		IToken WS841 = default(IToken);
		IToken WS843 = default(IToken);
		IToken char_literal844 = default(IToken);
		IToken WS845 = default(IToken);
		IToken WS847 = default(IToken);
		IToken char_literal848 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr842 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr846 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal840_tree = default(CommonTree);
		CommonTree WS841_tree = default(CommonTree);
		CommonTree WS843_tree = default(CommonTree);
		CommonTree char_literal844_tree = default(CommonTree);
		CommonTree WS845_tree = default(CommonTree);
		CommonTree WS847_tree = default(CommonTree);
		CommonTree char_literal848_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(698, 1);
		try
		{
			// SugarCpp.g:699:2: ( '[' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:699:4: '[' ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']'
			{
			DebugLocation(699, 4);
			char_literal840=(IToken)Match(input,132,Follow._132_in_square_expr_list8003); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal840);

			DebugLocation(699, 8);
			// SugarCpp.g:699:8: ( WS )*
			try { DebugEnterSubRule(547);
			while (true)
			{
				int alt547=2;
				try { DebugEnterDecision(547, false);
				int LA547_0 = input.LA(1);

				if ((LA547_0==WS))
				{
					alt547 = 1;
				}


				} finally { DebugExitDecision(547); }
				switch ( alt547 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:699:8: WS
					{
					DebugLocation(699, 8);
					WS841=(IToken)Match(input,WS,Follow._WS_in_square_expr_list8005); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS841);


					}
					break;

				default:
					goto loop547;
				}
			}

			loop547:
				;

			} finally { DebugExitSubRule(547); }

			DebugLocation(699, 12);
			PushFollow(Follow._expr_in_square_expr_list8008);
			expr842=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr842.Tree);
			DebugLocation(699, 17);
			// SugarCpp.g:699:17: ( ( WS )* ',' ( WS )* expr )*
			try { DebugEnterSubRule(550);
			while (true)
			{
				int alt550=2;
				try { DebugEnterDecision(550, false);
				try
				{
					alt550 = dfa550.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(550); }
				switch ( alt550 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:699:18: ( WS )* ',' ( WS )* expr
					{
					DebugLocation(699, 18);
					// SugarCpp.g:699:18: ( WS )*
					try { DebugEnterSubRule(548);
					while (true)
					{
						int alt548=2;
						try { DebugEnterDecision(548, false);
						int LA548_0 = input.LA(1);

						if ((LA548_0==WS))
						{
							alt548 = 1;
						}


						} finally { DebugExitDecision(548); }
						switch ( alt548 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:699:18: WS
							{
							DebugLocation(699, 18);
							WS843=(IToken)Match(input,WS,Follow._WS_in_square_expr_list8011); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS843);


							}
							break;

						default:
							goto loop548;
						}
					}

					loop548:
						;

					} finally { DebugExitSubRule(548); }

					DebugLocation(699, 22);
					char_literal844=(IToken)Match(input,100,Follow._100_in_square_expr_list8014); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal844);

					DebugLocation(699, 26);
					// SugarCpp.g:699:26: ( WS )*
					try { DebugEnterSubRule(549);
					while (true)
					{
						int alt549=2;
						try { DebugEnterDecision(549, false);
						int LA549_0 = input.LA(1);

						if ((LA549_0==WS))
						{
							alt549 = 1;
						}


						} finally { DebugExitDecision(549); }
						switch ( alt549 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:699:26: WS
							{
							DebugLocation(699, 26);
							WS845=(IToken)Match(input,WS,Follow._WS_in_square_expr_list8016); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS845);


							}
							break;

						default:
							goto loop549;
						}
					}

					loop549:
						;

					} finally { DebugExitSubRule(549); }

					DebugLocation(699, 30);
					PushFollow(Follow._expr_in_square_expr_list8019);
					expr846=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr846.Tree);

					}
					break;

				default:
					goto loop550;
				}
			}

			loop550:
				;

			} finally { DebugExitSubRule(550); }

			DebugLocation(699, 37);
			// SugarCpp.g:699:37: ( WS )*
			try { DebugEnterSubRule(551);
			while (true)
			{
				int alt551=2;
				try { DebugEnterDecision(551, false);
				int LA551_0 = input.LA(1);

				if ((LA551_0==WS))
				{
					alt551 = 1;
				}


				} finally { DebugExitDecision(551); }
				switch ( alt551 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:699:37: WS
					{
					DebugLocation(699, 37);
					WS847=(IToken)Match(input,WS,Follow._WS_in_square_expr_list8023); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS847);


					}
					break;

				default:
					goto loop551;
				}
			}

			loop551:
				;

			} finally { DebugExitSubRule(551); }

			DebugLocation(699, 41);
			char_literal848=(IToken)Match(input,133,Follow._133_in_square_expr_list8026); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(char_literal848);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 699:45: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(699, 48);
				// SugarCpp.g:699:48: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(699, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(699, 60);
				// SugarCpp.g:699:60: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(699, 60);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 93);
			LeaveRule("square_expr_list", 93);
			LeaveRule_square_expr_list();
		}
		DebugLocation(700, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:702:1: bracket_expr_list : '(' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* )? ( ( WS )* ')' -> ^( Expr_Args ( expr )* ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 94);
		TraceIn("bracket_expr_list", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal849 = default(IToken);
		IToken WS850 = default(IToken);
		IToken WS852 = default(IToken);
		IToken char_literal853 = default(IToken);
		IToken WS854 = default(IToken);
		IToken WS856 = default(IToken);
		IToken char_literal857 = default(IToken);
		IToken WS858 = default(IToken);
		IToken NEWLINE859 = default(IToken);
		IToken INDENT860 = default(IToken);
		IToken NEWLINE861 = default(IToken);
		IToken WS863 = default(IToken);
		IToken char_literal864 = default(IToken);
		IToken WS865 = default(IToken);
		IToken NEWLINE866 = default(IToken);
		IToken WS867 = default(IToken);
		IToken WS869 = default(IToken);
		IToken NEWLINE870 = default(IToken);
		IToken WS871 = default(IToken);
		IToken char_literal872 = default(IToken);
		IToken WS873 = default(IToken);
		IToken NEWLINE874 = default(IToken);
		IToken DEDENT875 = default(IToken);
		IToken DEDENT876 = default(IToken);
		IToken NEWLINE877 = default(IToken);
		IToken WS878 = default(IToken);
		IToken char_literal879 = default(IToken);
		IToken WS880 = default(IToken);
		IToken WS882 = default(IToken);
		IToken char_literal883 = default(IToken);
		IToken WS884 = default(IToken);
		IToken NEWLINE885 = default(IToken);
		IToken WS886 = default(IToken);
		IToken WS888 = default(IToken);
		IToken char_literal889 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr851 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr855 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr862 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr868 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr881 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr887 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal849_tree = default(CommonTree);
		CommonTree WS850_tree = default(CommonTree);
		CommonTree WS852_tree = default(CommonTree);
		CommonTree char_literal853_tree = default(CommonTree);
		CommonTree WS854_tree = default(CommonTree);
		CommonTree WS856_tree = default(CommonTree);
		CommonTree char_literal857_tree = default(CommonTree);
		CommonTree WS858_tree = default(CommonTree);
		CommonTree NEWLINE859_tree = default(CommonTree);
		CommonTree INDENT860_tree = default(CommonTree);
		CommonTree NEWLINE861_tree = default(CommonTree);
		CommonTree WS863_tree = default(CommonTree);
		CommonTree char_literal864_tree = default(CommonTree);
		CommonTree WS865_tree = default(CommonTree);
		CommonTree NEWLINE866_tree = default(CommonTree);
		CommonTree WS867_tree = default(CommonTree);
		CommonTree WS869_tree = default(CommonTree);
		CommonTree NEWLINE870_tree = default(CommonTree);
		CommonTree WS871_tree = default(CommonTree);
		CommonTree char_literal872_tree = default(CommonTree);
		CommonTree WS873_tree = default(CommonTree);
		CommonTree NEWLINE874_tree = default(CommonTree);
		CommonTree DEDENT875_tree = default(CommonTree);
		CommonTree DEDENT876_tree = default(CommonTree);
		CommonTree NEWLINE877_tree = default(CommonTree);
		CommonTree WS878_tree = default(CommonTree);
		CommonTree char_literal879_tree = default(CommonTree);
		CommonTree WS880_tree = default(CommonTree);
		CommonTree WS882_tree = default(CommonTree);
		CommonTree char_literal883_tree = default(CommonTree);
		CommonTree WS884_tree = default(CommonTree);
		CommonTree NEWLINE885_tree = default(CommonTree);
		CommonTree WS886_tree = default(CommonTree);
		CommonTree WS888_tree = default(CommonTree);
		CommonTree char_literal889_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(702, 1);
		try
		{
			// SugarCpp.g:703:2: ( '(' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* )? ( ( WS )* ')' -> ^( Expr_Args ( expr )* ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:703:4: '(' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* )? ( ( WS )* ')' -> ^( Expr_Args ( expr )* ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(703, 4);
			char_literal849=(IToken)Match(input,93,Follow._93_in_bracket_expr_list8046); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal849);

			DebugLocation(703, 8);
			// SugarCpp.g:703:8: ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* )?
			int alt556=2;
			try { DebugEnterSubRule(556);
			try { DebugEnterDecision(556, false);
			try
			{
				alt556 = dfa556.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(556); }
			switch (alt556)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:703:9: ( WS )* expr ( ( WS )* ',' ( WS )* expr )*
				{
				DebugLocation(703, 9);
				// SugarCpp.g:703:9: ( WS )*
				try { DebugEnterSubRule(552);
				while (true)
				{
					int alt552=2;
					try { DebugEnterDecision(552, false);
					int LA552_0 = input.LA(1);

					if ((LA552_0==WS))
					{
						alt552 = 1;
					}


					} finally { DebugExitDecision(552); }
					switch ( alt552 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:703:9: WS
						{
						DebugLocation(703, 9);
						WS850=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8049); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS850);


						}
						break;

					default:
						goto loop552;
					}
				}

				loop552:
					;

				} finally { DebugExitSubRule(552); }

				DebugLocation(703, 13);
				PushFollow(Follow._expr_in_bracket_expr_list8052);
				expr851=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr851.Tree);
				DebugLocation(703, 18);
				// SugarCpp.g:703:18: ( ( WS )* ',' ( WS )* expr )*
				try { DebugEnterSubRule(555);
				while (true)
				{
					int alt555=2;
					try { DebugEnterDecision(555, false);
					try
					{
						alt555 = dfa555.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(555); }
					switch ( alt555 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:703:19: ( WS )* ',' ( WS )* expr
						{
						DebugLocation(703, 19);
						// SugarCpp.g:703:19: ( WS )*
						try { DebugEnterSubRule(553);
						while (true)
						{
							int alt553=2;
							try { DebugEnterDecision(553, false);
							int LA553_0 = input.LA(1);

							if ((LA553_0==WS))
							{
								alt553 = 1;
							}


							} finally { DebugExitDecision(553); }
							switch ( alt553 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:703:19: WS
								{
								DebugLocation(703, 19);
								WS852=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8055); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS852);


								}
								break;

							default:
								goto loop553;
							}
						}

						loop553:
							;

						} finally { DebugExitSubRule(553); }

						DebugLocation(703, 23);
						char_literal853=(IToken)Match(input,100,Follow._100_in_bracket_expr_list8058); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal853);

						DebugLocation(703, 27);
						// SugarCpp.g:703:27: ( WS )*
						try { DebugEnterSubRule(554);
						while (true)
						{
							int alt554=2;
							try { DebugEnterDecision(554, false);
							int LA554_0 = input.LA(1);

							if ((LA554_0==WS))
							{
								alt554 = 1;
							}


							} finally { DebugExitDecision(554); }
							switch ( alt554 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:703:27: WS
								{
								DebugLocation(703, 27);
								WS854=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8060); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS854);


								}
								break;

							default:
								goto loop554;
							}
						}

						loop554:
							;

						} finally { DebugExitSubRule(554); }

						DebugLocation(703, 31);
						PushFollow(Follow._expr_in_bracket_expr_list8063);
						expr855=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr855.Tree);

						}
						break;

					default:
						goto loop555;
					}
				}

				loop555:
					;

				} finally { DebugExitSubRule(555); }


				}
				break;

			}
			} finally { DebugExitSubRule(556); }

			DebugLocation(703, 40);
			// SugarCpp.g:703:40: ( ( WS )* ')' -> ^( Expr_Args ( expr )* ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt583=2;
			try { DebugEnterSubRule(583);
			try { DebugEnterDecision(583, false);
			try
			{
				alt583 = dfa583.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(583); }
			switch (alt583)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:703:42: ( WS )* ')'
				{
				DebugLocation(703, 42);
				// SugarCpp.g:703:42: ( WS )*
				try { DebugEnterSubRule(557);
				while (true)
				{
					int alt557=2;
					try { DebugEnterDecision(557, false);
					int LA557_0 = input.LA(1);

					if ((LA557_0==WS))
					{
						alt557 = 1;
					}


					} finally { DebugExitDecision(557); }
					switch ( alt557 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:703:42: WS
						{
						DebugLocation(703, 42);
						WS856=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8071); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS856);


						}
						break;

					default:
						goto loop557;
					}
				}

				loop557:
					;

				} finally { DebugExitSubRule(557); }

				DebugLocation(703, 46);
				char_literal857=(IToken)Match(input,94,Follow._94_in_bracket_expr_list8074); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal857);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 703:50: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(703, 53);
					// SugarCpp.g:703:53: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(703, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(703, 65);
					// SugarCpp.g:703:65: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(703, 65);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:704:24: ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(704, 24);
				// SugarCpp.g:704:24: ( WS )*
				try { DebugEnterSubRule(558);
				while (true)
				{
					int alt558=2;
					try { DebugEnterDecision(558, false);
					int LA558_0 = input.LA(1);

					if ((LA558_0==WS))
					{
						alt558 = 1;
					}


					} finally { DebugExitDecision(558); }
					switch ( alt558 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:704:24: WS
						{
						DebugLocation(704, 24);
						WS858=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8108); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS858);


						}
						break;

					default:
						goto loop558;
					}
				}

				loop558:
					;

				} finally { DebugExitSubRule(558); }

				DebugLocation(704, 28);
				// SugarCpp.g:704:28: ( NEWLINE )+
				int cnt559=0;
				try { DebugEnterSubRule(559);
				while (true)
				{
					int alt559=2;
					try { DebugEnterDecision(559, false);
					int LA559_0 = input.LA(1);

					if ((LA559_0==NEWLINE))
					{
						alt559 = 1;
					}


					} finally { DebugExitDecision(559); }
					switch (alt559)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:704:28: NEWLINE
						{
						DebugLocation(704, 28);
						NEWLINE859=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8111); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE859);


						}
						break;

					default:
						if (cnt559 >= 1)
							goto loop559;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee559 = new EarlyExitException( 559, input );
						DebugRecognitionException(eee559);
						throw eee559;
					}
					cnt559++;
				}
				loop559:
					;

				} finally { DebugExitSubRule(559); }

				DebugLocation(704, 37);
				// SugarCpp.g:704:37: ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) )
				int alt582=2;
				try { DebugEnterSubRule(582);
				try { DebugEnterDecision(582, false);
				int LA582_0 = input.LA(1);

				if ((LA582_0==INDENT))
				{
					alt582 = 1;
				}
				else if ((LA582_0==IDENT||LA582_0==NUMBER||LA582_0==STRING||(LA582_0>=WS && LA582_0<=86)||LA582_0==91||(LA582_0>=93 && LA582_0<=95)||(LA582_0>=97 && LA582_0<=98)||(LA582_0>=101 && LA582_0<=102)||(LA582_0>=131 && LA582_0<=132)||LA582_0==155||LA582_0==158||(LA582_0>=160 && LA582_0<=161)||LA582_0==186))
				{
					alt582 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 582, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(582); }
				switch (alt582)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:704:39: INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' )
					{
					DebugLocation(704, 39);
					INDENT860=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list8116); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT860);

					DebugLocation(704, 46);
					// SugarCpp.g:704:46: ( NEWLINE )*
					try { DebugEnterSubRule(560);
					while (true)
					{
						int alt560=2;
						try { DebugEnterDecision(560, false);
						int LA560_0 = input.LA(1);

						if ((LA560_0==NEWLINE))
						{
							alt560 = 1;
						}


						} finally { DebugExitDecision(560); }
						switch ( alt560 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:704:46: NEWLINE
							{
							DebugLocation(704, 46);
							NEWLINE861=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8118); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE861);


							}
							break;

						default:
							goto loop560;
						}
					}

					loop560:
						;

					} finally { DebugExitSubRule(560); }

					DebugLocation(704, 55);
					PushFollow(Follow._expr_in_bracket_expr_list8121);
					expr862=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr862.Tree);
					DebugLocation(704, 60);
					// SugarCpp.g:704:60: ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )*
					try { DebugEnterSubRule(565);
					while (true)
					{
						int alt565=2;
						try { DebugEnterDecision(565, false);
						try
						{
							alt565 = dfa565.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(565); }
						switch ( alt565 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:704:61: ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr
							{
							DebugLocation(704, 61);
							// SugarCpp.g:704:61: ( ( WS )* ',' | ( WS )* NEWLINE )+
							int cnt563=0;
							try { DebugEnterSubRule(563);
							while (true)
							{
								int alt563=3;
								try { DebugEnterDecision(563, false);
								try
								{
									alt563 = dfa563.Predict(input);
								}
								catch (NoViableAltException nvae)
								{
									DebugRecognitionException(nvae);
									throw;
								}
								} finally { DebugExitDecision(563); }
								switch (alt563)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:704:62: ( WS )* ','
									{
									DebugLocation(704, 62);
									// SugarCpp.g:704:62: ( WS )*
									try { DebugEnterSubRule(561);
									while (true)
									{
										int alt561=2;
										try { DebugEnterDecision(561, false);
										int LA561_0 = input.LA(1);

										if ((LA561_0==WS))
										{
											alt561 = 1;
										}


										} finally { DebugExitDecision(561); }
										switch ( alt561 )
										{
										case 1:
											DebugEnterAlt(1);
											// SugarCpp.g:704:62: WS
											{
											DebugLocation(704, 62);
											WS863=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8125); if (state.failed) return retval; 
											if (state.backtracking == 0) stream_WS.Add(WS863);


											}
											break;

										default:
											goto loop561;
										}
									}

									loop561:
										;

									} finally { DebugExitSubRule(561); }

									DebugLocation(704, 66);
									char_literal864=(IToken)Match(input,100,Follow._100_in_bracket_expr_list8128); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal864);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:704:72: ( WS )* NEWLINE
									{
									DebugLocation(704, 72);
									// SugarCpp.g:704:72: ( WS )*
									try { DebugEnterSubRule(562);
									while (true)
									{
										int alt562=2;
										try { DebugEnterDecision(562, false);
										int LA562_0 = input.LA(1);

										if ((LA562_0==WS))
										{
											alt562 = 1;
										}


										} finally { DebugExitDecision(562); }
										switch ( alt562 )
										{
										case 1:
											DebugEnterAlt(1);
											// SugarCpp.g:704:72: WS
											{
											DebugLocation(704, 72);
											WS865=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8132); if (state.failed) return retval; 
											if (state.backtracking == 0) stream_WS.Add(WS865);


											}
											break;

										default:
											goto loop562;
										}
									}

									loop562:
										;

									} finally { DebugExitSubRule(562); }

									DebugLocation(704, 76);
									NEWLINE866=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8135); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE866);


									}
									break;

								default:
									if (cnt563 >= 1)
										goto loop563;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee563 = new EarlyExitException( 563, input );
									DebugRecognitionException(eee563);
									throw eee563;
								}
								cnt563++;
							}
							loop563:
								;

							} finally { DebugExitSubRule(563); }

							DebugLocation(704, 86);
							// SugarCpp.g:704:86: ( WS )*
							try { DebugEnterSubRule(564);
							while (true)
							{
								int alt564=2;
								try { DebugEnterDecision(564, false);
								int LA564_0 = input.LA(1);

								if ((LA564_0==WS))
								{
									alt564 = 1;
								}


								} finally { DebugExitDecision(564); }
								switch ( alt564 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:704:86: WS
									{
									DebugLocation(704, 86);
									WS867=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8139); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS867);


									}
									break;

								default:
									goto loop564;
								}
							}

							loop564:
								;

							} finally { DebugExitSubRule(564); }

							DebugLocation(704, 90);
							PushFollow(Follow._expr_in_bracket_expr_list8142);
							expr868=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr868.Tree);

							}
							break;

						default:
							goto loop565;
						}
					}

					loop565:
						;

					} finally { DebugExitSubRule(565); }

					DebugLocation(704, 97);
					// SugarCpp.g:704:97: ( ( WS )* NEWLINE )*
					try { DebugEnterSubRule(567);
					while (true)
					{
						int alt567=2;
						try { DebugEnterDecision(567, false);
						try
						{
							alt567 = dfa567.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(567); }
						switch ( alt567 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:704:98: ( WS )* NEWLINE
							{
							DebugLocation(704, 98);
							// SugarCpp.g:704:98: ( WS )*
							try { DebugEnterSubRule(566);
							while (true)
							{
								int alt566=2;
								try { DebugEnterDecision(566, false);
								int LA566_0 = input.LA(1);

								if ((LA566_0==WS))
								{
									alt566 = 1;
								}


								} finally { DebugExitDecision(566); }
								switch ( alt566 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:704:98: WS
									{
									DebugLocation(704, 98);
									WS869=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8147); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS869);


									}
									break;

								default:
									goto loop566;
								}
							}

							loop566:
								;

							} finally { DebugExitSubRule(566); }

							DebugLocation(704, 102);
							NEWLINE870=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8150); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE870);


							}
							break;

						default:
							goto loop567;
						}
					}

					loop567:
						;

					} finally { DebugExitSubRule(567); }

					DebugLocation(704, 112);
					// SugarCpp.g:704:112: ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' )
					int alt573=2;
					try { DebugEnterSubRule(573);
					try { DebugEnterDecision(573, false);
					int LA573_0 = input.LA(1);

					if ((LA573_0==WS||LA573_0==94))
					{
						alt573 = 1;
					}
					else if ((LA573_0==DEDENT))
					{
						alt573 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 573, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(573); }
					switch (alt573)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:704:114: ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT
						{
						DebugLocation(704, 114);
						// SugarCpp.g:704:114: ( WS )*
						try { DebugEnterSubRule(568);
						while (true)
						{
							int alt568=2;
							try { DebugEnterDecision(568, false);
							int LA568_0 = input.LA(1);

							if ((LA568_0==WS))
							{
								alt568 = 1;
							}


							} finally { DebugExitDecision(568); }
							switch ( alt568 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:704:114: WS
								{
								DebugLocation(704, 114);
								WS871=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8156); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS871);


								}
								break;

							default:
								goto loop568;
							}
						}

						loop568:
							;

						} finally { DebugExitSubRule(568); }

						DebugLocation(704, 118);
						char_literal872=(IToken)Match(input,94,Follow._94_in_bracket_expr_list8159); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal872);

						DebugLocation(704, 122);
						// SugarCpp.g:704:122: ( WS )*
						try { DebugEnterSubRule(569);
						while (true)
						{
							int alt569=2;
							try { DebugEnterDecision(569, false);
							int LA569_0 = input.LA(1);

							if ((LA569_0==WS))
							{
								alt569 = 1;
							}


							} finally { DebugExitDecision(569); }
							switch ( alt569 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:704:122: WS
								{
								DebugLocation(704, 122);
								WS873=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8161); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS873);


								}
								break;

							default:
								goto loop569;
							}
						}

						loop569:
							;

						} finally { DebugExitSubRule(569); }

						DebugLocation(704, 126);
						// SugarCpp.g:704:126: ( NEWLINE )*
						try { DebugEnterSubRule(570);
						while (true)
						{
							int alt570=2;
							try { DebugEnterDecision(570, false);
							int LA570_0 = input.LA(1);

							if ((LA570_0==NEWLINE))
							{
								alt570 = 1;
							}


							} finally { DebugExitDecision(570); }
							switch ( alt570 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:704:126: NEWLINE
								{
								DebugLocation(704, 126);
								NEWLINE874=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8164); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE874);


								}
								break;

							default:
								goto loop570;
							}
						}

						loop570:
							;

						} finally { DebugExitSubRule(570); }

						DebugLocation(704, 135);
						DEDENT875=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list8167); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT875);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:705:101: DEDENT ( NEWLINE )* ( WS )* ')'
						{
						DebugLocation(705, 101);
						DEDENT876=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list8269); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT876);

						DebugLocation(705, 108);
						// SugarCpp.g:705:108: ( NEWLINE )*
						try { DebugEnterSubRule(571);
						while (true)
						{
							int alt571=2;
							try { DebugEnterDecision(571, false);
							int LA571_0 = input.LA(1);

							if ((LA571_0==NEWLINE))
							{
								alt571 = 1;
							}


							} finally { DebugExitDecision(571); }
							switch ( alt571 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:705:108: NEWLINE
								{
								DebugLocation(705, 108);
								NEWLINE877=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8271); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE877);


								}
								break;

							default:
								goto loop571;
							}
						}

						loop571:
							;

						} finally { DebugExitSubRule(571); }

						DebugLocation(705, 117);
						// SugarCpp.g:705:117: ( WS )*
						try { DebugEnterSubRule(572);
						while (true)
						{
							int alt572=2;
							try { DebugEnterDecision(572, false);
							int LA572_0 = input.LA(1);

							if ((LA572_0==WS))
							{
								alt572 = 1;
							}


							} finally { DebugExitDecision(572); }
							switch ( alt572 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:705:117: WS
								{
								DebugLocation(705, 117);
								WS878=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8274); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS878);


								}
								break;

							default:
								goto loop572;
							}
						}

						loop572:
							;

						} finally { DebugExitSubRule(572); }

						DebugLocation(705, 121);
						char_literal879=(IToken)Match(input,94,Follow._94_in_bracket_expr_list8277); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal879);


						}
						break;

					}
					} finally { DebugExitSubRule(573); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 706:50: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(706, 53);
						// SugarCpp.g:706:53: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(706, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(706, 65);
						// SugarCpp.g:706:65: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(706, 65);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:707:30: ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')'
					{
					DebugLocation(707, 30);
					// SugarCpp.g:707:30: ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )?
					int alt580=2;
					try { DebugEnterSubRule(580);
					try { DebugEnterDecision(580, false);
					try
					{
						alt580 = dfa580.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(580); }
					switch (alt580)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:707:31: ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )*
						{
						DebugLocation(707, 31);
						// SugarCpp.g:707:31: ( WS )*
						try { DebugEnterSubRule(574);
						while (true)
						{
							int alt574=2;
							try { DebugEnterDecision(574, false);
							int LA574_0 = input.LA(1);

							if ((LA574_0==WS))
							{
								alt574 = 1;
							}


							} finally { DebugExitDecision(574); }
							switch ( alt574 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:707:31: WS
								{
								DebugLocation(707, 31);
								WS880=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8367); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS880);


								}
								break;

							default:
								goto loop574;
							}
						}

						loop574:
							;

						} finally { DebugExitSubRule(574); }

						DebugLocation(707, 35);
						PushFollow(Follow._expr_in_bracket_expr_list8370);
						expr881=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr881.Tree);
						DebugLocation(707, 40);
						// SugarCpp.g:707:40: ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )*
						try { DebugEnterSubRule(579);
						while (true)
						{
							int alt579=2;
							try { DebugEnterDecision(579, false);
							try
							{
								alt579 = dfa579.Predict(input);
							}
							catch (NoViableAltException nvae)
							{
								DebugRecognitionException(nvae);
								throw;
							}
							} finally { DebugExitDecision(579); }
							switch ( alt579 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:707:41: ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr
								{
								DebugLocation(707, 41);
								// SugarCpp.g:707:41: ( ( WS )* ',' | ( WS )* NEWLINE )+
								int cnt577=0;
								try { DebugEnterSubRule(577);
								while (true)
								{
									int alt577=3;
									try { DebugEnterDecision(577, false);
									try
									{
										alt577 = dfa577.Predict(input);
									}
									catch (NoViableAltException nvae)
									{
										DebugRecognitionException(nvae);
										throw;
									}
									} finally { DebugExitDecision(577); }
									switch (alt577)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:707:42: ( WS )* ','
										{
										DebugLocation(707, 42);
										// SugarCpp.g:707:42: ( WS )*
										try { DebugEnterSubRule(575);
										while (true)
										{
											int alt575=2;
											try { DebugEnterDecision(575, false);
											int LA575_0 = input.LA(1);

											if ((LA575_0==WS))
											{
												alt575 = 1;
											}


											} finally { DebugExitDecision(575); }
											switch ( alt575 )
											{
											case 1:
												DebugEnterAlt(1);
												// SugarCpp.g:707:42: WS
												{
												DebugLocation(707, 42);
												WS882=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8374); if (state.failed) return retval; 
												if (state.backtracking == 0) stream_WS.Add(WS882);


												}
												break;

											default:
												goto loop575;
											}
										}

										loop575:
											;

										} finally { DebugExitSubRule(575); }

										DebugLocation(707, 47);
										char_literal883=(IToken)Match(input,100,Follow._100_in_bracket_expr_list8378); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_100.Add(char_literal883);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:707:53: ( WS )* NEWLINE
										{
										DebugLocation(707, 53);
										// SugarCpp.g:707:53: ( WS )*
										try { DebugEnterSubRule(576);
										while (true)
										{
											int alt576=2;
											try { DebugEnterDecision(576, false);
											int LA576_0 = input.LA(1);

											if ((LA576_0==WS))
											{
												alt576 = 1;
											}


											} finally { DebugExitDecision(576); }
											switch ( alt576 )
											{
											case 1:
												DebugEnterAlt(1);
												// SugarCpp.g:707:53: WS
												{
												DebugLocation(707, 53);
												WS884=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8382); if (state.failed) return retval; 
												if (state.backtracking == 0) stream_WS.Add(WS884);


												}
												break;

											default:
												goto loop576;
											}
										}

										loop576:
											;

										} finally { DebugExitSubRule(576); }

										DebugLocation(707, 58);
										NEWLINE885=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list8386); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE885);


										}
										break;

									default:
										if (cnt577 >= 1)
											goto loop577;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee577 = new EarlyExitException( 577, input );
										DebugRecognitionException(eee577);
										throw eee577;
									}
									cnt577++;
								}
								loop577:
									;

								} finally { DebugExitSubRule(577); }

								DebugLocation(707, 68);
								// SugarCpp.g:707:68: ( WS )*
								try { DebugEnterSubRule(578);
								while (true)
								{
									int alt578=2;
									try { DebugEnterDecision(578, false);
									int LA578_0 = input.LA(1);

									if ((LA578_0==WS))
									{
										alt578 = 1;
									}


									} finally { DebugExitDecision(578); }
									switch ( alt578 )
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:707:68: WS
										{
										DebugLocation(707, 68);
										WS886=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8390); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_WS.Add(WS886);


										}
										break;

									default:
										goto loop578;
									}
								}

								loop578:
									;

								} finally { DebugExitSubRule(578); }

								DebugLocation(707, 72);
								PushFollow(Follow._expr_in_bracket_expr_list8393);
								expr887=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr887.Tree);

								}
								break;

							default:
								goto loop579;
							}
						}

						loop579:
							;

						} finally { DebugExitSubRule(579); }


						}
						break;

					}
					} finally { DebugExitSubRule(580); }

					DebugLocation(707, 81);
					// SugarCpp.g:707:81: ( WS )*
					try { DebugEnterSubRule(581);
					while (true)
					{
						int alt581=2;
						try { DebugEnterDecision(581, false);
						int LA581_0 = input.LA(1);

						if ((LA581_0==WS))
						{
							alt581 = 1;
						}


						} finally { DebugExitDecision(581); }
						switch ( alt581 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:707:81: WS
							{
							DebugLocation(707, 81);
							WS888=(IToken)Match(input,WS,Follow._WS_in_bracket_expr_list8399); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS888);


							}
							break;

						default:
							goto loop581;
						}
					}

					loop581:
						;

					} finally { DebugExitSubRule(581); }

					DebugLocation(707, 85);
					char_literal889=(IToken)Match(input,94,Follow._94_in_bracket_expr_list8402); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal889);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 707:89: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(707, 92);
						// SugarCpp.g:707:92: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(707, 94);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(707, 104);
						// SugarCpp.g:707:104: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(707, 104);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(582); }


				}
				break;

			}
			} finally { DebugExitSubRule(583); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 94);
			LeaveRule("bracket_expr_list", 94);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(710, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:712:1: suffix_expr : (a= atom_expr -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $suffix_expr) | ( WS )* '--' -> ^( Expr_Suffix '--' $suffix_expr) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $suffix_expr ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 95);
		TraceIn("suffix_expr", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS890 = default(IToken);
		IToken string_literal891 = default(IToken);
		IToken WS892 = default(IToken);
		IToken string_literal893 = default(IToken);
		IToken WS894 = default(IToken);
		IToken char_literal895 = default(IToken);
		IToken WS896 = default(IToken);
		IToken WS898 = default(IToken);
		IToken string_literal899 = default(IToken);
		IToken WS900 = default(IToken);
		IToken WS902 = default(IToken);
		IToken WS905 = default(IToken);
		IToken WS907 = default(IToken);
		IToken WS909 = default(IToken);
		IToken char_literal910 = default(IToken);
		IToken WS911 = default(IToken);
		IToken WS913 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident897 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident901 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list903 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter904 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list906 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list908 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident912 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list914 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS890_tree = default(CommonTree);
		CommonTree string_literal891_tree = default(CommonTree);
		CommonTree WS892_tree = default(CommonTree);
		CommonTree string_literal893_tree = default(CommonTree);
		CommonTree WS894_tree = default(CommonTree);
		CommonTree char_literal895_tree = default(CommonTree);
		CommonTree WS896_tree = default(CommonTree);
		CommonTree WS898_tree = default(CommonTree);
		CommonTree string_literal899_tree = default(CommonTree);
		CommonTree WS900_tree = default(CommonTree);
		CommonTree WS902_tree = default(CommonTree);
		CommonTree WS905_tree = default(CommonTree);
		CommonTree WS907_tree = default(CommonTree);
		CommonTree WS909_tree = default(CommonTree);
		CommonTree char_literal910_tree = default(CommonTree);
		CommonTree WS911_tree = default(CommonTree);
		CommonTree WS913_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(712, 1);
		try
		{
			// SugarCpp.g:713:2: ( (a= atom_expr -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $suffix_expr) | ( WS )* '--' -> ^( Expr_Suffix '--' $suffix_expr) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $suffix_expr ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:713:4: (a= atom_expr -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $suffix_expr) | ( WS )* '--' -> ^( Expr_Suffix '--' $suffix_expr) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $suffix_expr ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(713, 4);
			// SugarCpp.g:713:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:713:5: a= atom_expr
			{
			DebugLocation(713, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr8477);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 713:17: -> $a
			{
				DebugLocation(713, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(713, 24);
			// SugarCpp.g:713:24: ( ( WS )* '++' -> ^( Expr_Suffix '++' $suffix_expr) | ( WS )* '--' -> ^( Expr_Suffix '--' $suffix_expr) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $suffix_expr ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(596);
			while (true)
			{
				int alt596=9;
				try { DebugEnterDecision(596, false);
				try
				{
					alt596 = dfa596.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(596); }
				switch ( alt596 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:713:26: ( WS )* '++'
					{
					DebugLocation(713, 26);
					// SugarCpp.g:713:26: ( WS )*
					try { DebugEnterSubRule(584);
					while (true)
					{
						int alt584=2;
						try { DebugEnterDecision(584, false);
						int LA584_0 = input.LA(1);

						if ((LA584_0==WS))
						{
							alt584 = 1;
						}


						} finally { DebugExitDecision(584); }
						switch ( alt584 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:713:26: WS
							{
							DebugLocation(713, 26);
							WS890=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8487); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS890);


							}
							break;

						default:
							goto loop584;
						}
					}

					loop584:
						;

					} finally { DebugExitSubRule(584); }

					DebugLocation(713, 30);
					string_literal891=(IToken)Match(input,98,Follow._98_in_suffix_expr8490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal891);



					{
					// AST REWRITE
					// elements: suffix_expr, 98
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 713:35: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(713, 38);
						// SugarCpp.g:713:38: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(713, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(713, 52);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(713, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:714:14: ( WS )* '--'
					{
					DebugLocation(714, 14);
					// SugarCpp.g:714:14: ( WS )*
					try { DebugEnterSubRule(585);
					while (true)
					{
						int alt585=2;
						try { DebugEnterDecision(585, false);
						int LA585_0 = input.LA(1);

						if ((LA585_0==WS))
						{
							alt585 = 1;
						}


						} finally { DebugExitDecision(585); }
						switch ( alt585 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:714:14: WS
							{
							DebugLocation(714, 14);
							WS892=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8516); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS892);


							}
							break;

						default:
							goto loop585;
						}
					}

					loop585:
						;

					} finally { DebugExitSubRule(585); }

					DebugLocation(714, 18);
					string_literal893=(IToken)Match(input,102,Follow._102_in_suffix_expr8519); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal893);



					{
					// AST REWRITE
					// elements: suffix_expr, 102
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 714:23: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(714, 26);
						// SugarCpp.g:714:26: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(714, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(714, 40);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(714, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:715:11: ( WS )* '.' ( WS )* ident
					{
					DebugLocation(715, 11);
					// SugarCpp.g:715:11: ( WS )*
					try { DebugEnterSubRule(586);
					while (true)
					{
						int alt586=2;
						try { DebugEnterDecision(586, false);
						int LA586_0 = input.LA(1);

						if ((LA586_0==WS))
						{
							alt586 = 1;
						}


						} finally { DebugExitDecision(586); }
						switch ( alt586 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:715:11: WS
							{
							DebugLocation(715, 11);
							WS894=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8542); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS894);


							}
							break;

						default:
							goto loop586;
						}
					}

					loop586:
						;

					} finally { DebugExitSubRule(586); }

					DebugLocation(715, 15);
					char_literal895=(IToken)Match(input,107,Follow._107_in_suffix_expr8545); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal895);

					DebugLocation(715, 19);
					// SugarCpp.g:715:19: ( WS )*
					try { DebugEnterSubRule(587);
					while (true)
					{
						int alt587=2;
						try { DebugEnterDecision(587, false);
						int LA587_0 = input.LA(1);

						if ((LA587_0==WS))
						{
							alt587 = 1;
						}


						} finally { DebugExitDecision(587); }
						switch ( alt587 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:715:19: WS
							{
							DebugLocation(715, 19);
							WS896=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8547); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS896);


							}
							break;

						default:
							goto loop587;
						}
					}

					loop587:
						;

					} finally { DebugExitSubRule(587); }

					DebugLocation(715, 23);
					PushFollow(Follow._ident_in_suffix_expr8550);
					ident897=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident897.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 107
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 715:29: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(715, 32);
						// SugarCpp.g:715:32: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(715, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(715, 46);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(715, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(715, 63);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:716:11: ( WS )* '->' ( WS )* ident
					{
					DebugLocation(716, 11);
					// SugarCpp.g:716:11: ( WS )*
					try { DebugEnterSubRule(588);
					while (true)
					{
						int alt588=2;
						try { DebugEnterDecision(588, false);
						int LA588_0 = input.LA(1);

						if ((LA588_0==WS))
						{
							alt588 = 1;
						}


						} finally { DebugExitDecision(588); }
						switch ( alt588 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:716:11: WS
							{
							DebugLocation(716, 11);
							WS898=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8575); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS898);


							}
							break;

						default:
							goto loop588;
						}
					}

					loop588:
						;

					} finally { DebugExitSubRule(588); }

					DebugLocation(716, 15);
					string_literal899=(IToken)Match(input,105,Follow._105_in_suffix_expr8578); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal899);

					DebugLocation(716, 20);
					// SugarCpp.g:716:20: ( WS )*
					try { DebugEnterSubRule(589);
					while (true)
					{
						int alt589=2;
						try { DebugEnterDecision(589, false);
						int LA589_0 = input.LA(1);

						if ((LA589_0==WS))
						{
							alt589 = 1;
						}


						} finally { DebugExitDecision(589); }
						switch ( alt589 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:716:20: WS
							{
							DebugLocation(716, 20);
							WS900=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8580); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS900);


							}
							break;

						default:
							goto loop589;
						}
					}

					loop589:
						;

					} finally { DebugExitSubRule(589); }

					DebugLocation(716, 24);
					PushFollow(Follow._ident_in_suffix_expr8583);
					ident901=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident901.Tree);


					{
					// AST REWRITE
					// elements: 105, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 716:30: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(716, 33);
						// SugarCpp.g:716:33: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(716, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(716, 47);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(716, 53);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(716, 65);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:717:11: ( WS )* bracket_expr_list
					{
					DebugLocation(717, 11);
					// SugarCpp.g:717:11: ( WS )*
					try { DebugEnterSubRule(590);
					while (true)
					{
						int alt590=2;
						try { DebugEnterDecision(590, false);
						int LA590_0 = input.LA(1);

						if ((LA590_0==WS))
						{
							alt590 = 1;
						}


						} finally { DebugExitDecision(590); }
						switch ( alt590 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:717:11: WS
							{
							DebugLocation(717, 11);
							WS902=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8608); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS902);


							}
							break;

						default:
							goto loop590;
						}
					}

					loop590:
						;

					} finally { DebugExitSubRule(590); }

					DebugLocation(717, 15);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr8611);
					bracket_expr_list903=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list903.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 717:33: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(717, 36);
						// SugarCpp.g:717:36: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(717, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(717, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(717, 61);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:718:11: generic_parameter ( WS )* bracket_expr_list
					{
					DebugLocation(718, 11);
					PushFollow(Follow._generic_parameter_in_suffix_expr8634);
					generic_parameter904=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter904.Tree);
					DebugLocation(718, 29);
					// SugarCpp.g:718:29: ( WS )*
					try { DebugEnterSubRule(591);
					while (true)
					{
						int alt591=2;
						try { DebugEnterDecision(591, false);
						int LA591_0 = input.LA(1);

						if ((LA591_0==WS))
						{
							alt591 = 1;
						}


						} finally { DebugExitDecision(591); }
						switch ( alt591 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:718:29: WS
							{
							DebugLocation(718, 29);
							WS905=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8636); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS905);


							}
							break;

						default:
							goto loop591;
						}
					}

					loop591:
						;

					} finally { DebugExitSubRule(591); }

					DebugLocation(718, 33);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr8639);
					bracket_expr_list906=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list906.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 718:51: -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list )
					{
						DebugLocation(718, 54);
						// SugarCpp.g:718:54: ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(718, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(718, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(718, 79);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());
						DebugLocation(718, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:719:11: ( WS )* square_expr_list
					{
					DebugLocation(719, 11);
					// SugarCpp.g:719:11: ( WS )*
					try { DebugEnterSubRule(592);
					while (true)
					{
						int alt592=2;
						try { DebugEnterDecision(592, false);
						int LA592_0 = input.LA(1);

						if ((LA592_0==WS))
						{
							alt592 = 1;
						}


						} finally { DebugExitDecision(592); }
						switch ( alt592 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:719:11: WS
							{
							DebugLocation(719, 11);
							WS907=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8664); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS907);


							}
							break;

						default:
							goto loop592;
						}
					}

					loop592:
						;

					} finally { DebugExitSubRule(592); }

					DebugLocation(719, 15);
					PushFollow(Follow._square_expr_list_in_suffix_expr8667);
					square_expr_list908=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list908.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 719:32: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(719, 35);
						// SugarCpp.g:719:35: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(719, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(719, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(719, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:720:11: ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list
					{
					DebugLocation(720, 11);
					// SugarCpp.g:720:11: ( WS )*
					try { DebugEnterSubRule(593);
					while (true)
					{
						int alt593=2;
						try { DebugEnterDecision(593, false);
						int LA593_0 = input.LA(1);

						if ((LA593_0==WS))
						{
							alt593 = 1;
						}


						} finally { DebugExitDecision(593); }
						switch ( alt593 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:720:11: WS
							{
							DebugLocation(720, 11);
							WS909=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8690); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS909);


							}
							break;

						default:
							goto loop593;
						}
					}

					loop593:
						;

					} finally { DebugExitSubRule(593); }

					DebugLocation(720, 15);
					char_literal910=(IToken)Match(input,131,Follow._131_in_suffix_expr8693); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal910);

					DebugLocation(720, 19);
					// SugarCpp.g:720:19: ( WS )*
					try { DebugEnterSubRule(594);
					while (true)
					{
						int alt594=2;
						try { DebugEnterDecision(594, false);
						int LA594_0 = input.LA(1);

						if ((LA594_0==WS))
						{
							alt594 = 1;
						}


						} finally { DebugExitDecision(594); }
						switch ( alt594 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:720:19: WS
							{
							DebugLocation(720, 19);
							WS911=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8695); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS911);


							}
							break;

						default:
							goto loop594;
						}
					}

					loop594:
						;

					} finally { DebugExitSubRule(594); }

					DebugLocation(720, 23);
					PushFollow(Follow._ident_in_suffix_expr8698);
					ident912=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident912.Tree);
					DebugLocation(720, 29);
					// SugarCpp.g:720:29: ( WS )*
					try { DebugEnterSubRule(595);
					while (true)
					{
						int alt595=2;
						try { DebugEnterDecision(595, false);
						int LA595_0 = input.LA(1);

						if ((LA595_0==WS))
						{
							alt595 = 1;
						}


						} finally { DebugExitDecision(595); }
						switch ( alt595 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:720:29: WS
							{
							DebugLocation(720, 29);
							WS913=(IToken)Match(input,WS,Follow._WS_in_suffix_expr8700); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS913);


							}
							break;

						default:
							goto loop595;
						}
					}

					loop595:
						;

					} finally { DebugExitSubRule(595); }

					DebugLocation(720, 33);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr8703);
					bracket_expr_list914=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list914.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 720:51: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(720, 54);
						// SugarCpp.g:720:54: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(720, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(720, 72);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(720, 84);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(720, 90);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop596;
				}
			}

			loop596:
				;

			} finally { DebugExitSubRule(596); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 95);
			LeaveRule("suffix_expr", 95);
			LeaveRule_suffix_expr();
		}
		DebugLocation(722, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:724:1: atom_expr : ( NUMBER | ident | STRING | '@' ( WS )* ident -> ^( '@' ident ) | '(' ( WS )* a= expr ( ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')' -> ^( Expr_Tuple ( expr )+ ) | ( WS )* ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 96);
		TraceIn("atom_expr", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER915 = default(IToken);
		IToken STRING917 = default(IToken);
		IToken char_literal918 = default(IToken);
		IToken WS919 = default(IToken);
		IToken char_literal921 = default(IToken);
		IToken WS922 = default(IToken);
		IToken WS923 = default(IToken);
		IToken char_literal924 = default(IToken);
		IToken WS925 = default(IToken);
		IToken WS927 = default(IToken);
		IToken char_literal928 = default(IToken);
		IToken WS929 = default(IToken);
		IToken char_literal930 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident916 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident920 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr926 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER915_tree = default(CommonTree);
		CommonTree STRING917_tree = default(CommonTree);
		CommonTree char_literal918_tree = default(CommonTree);
		CommonTree WS919_tree = default(CommonTree);
		CommonTree char_literal921_tree = default(CommonTree);
		CommonTree WS922_tree = default(CommonTree);
		CommonTree WS923_tree = default(CommonTree);
		CommonTree char_literal924_tree = default(CommonTree);
		CommonTree WS925_tree = default(CommonTree);
		CommonTree WS927_tree = default(CommonTree);
		CommonTree char_literal928_tree = default(CommonTree);
		CommonTree WS929_tree = default(CommonTree);
		CommonTree char_literal930_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(724, 1);
		try
		{
			// SugarCpp.g:725:2: ( NUMBER | ident | STRING | '@' ( WS )* ident -> ^( '@' ident ) | '(' ( WS )* a= expr ( ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')' -> ^( Expr_Tuple ( expr )+ ) | ( WS )* ')' -> ^( Expr_Bracket expr ) ) )
			int alt605=5;
			try { DebugEnterDecision(605, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt605 = 1;
				}
				break;
			case IDENT:
				{
				alt605 = 2;
				}
				break;
			case STRING:
				{
				alt605 = 3;
				}
				break;
			case 131:
				{
				alt605 = 4;
				}
				break;
			case 93:
				{
				alt605 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 605, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(605); }
			switch (alt605)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:725:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(725, 4);
				NUMBER915=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr8741); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER915_tree = (CommonTree)adaptor.Create(NUMBER915);
				adaptor.AddChild(root_0, NUMBER915_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:726:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(726, 4);
				PushFollow(Follow._ident_in_atom_expr8746);
				ident916=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident916.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:727:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(727, 4);
				STRING917=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr8751); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING917_tree = (CommonTree)adaptor.Create(STRING917);
				adaptor.AddChild(root_0, STRING917_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:728:4: '@' ( WS )* ident
				{
				DebugLocation(728, 4);
				char_literal918=(IToken)Match(input,131,Follow._131_in_atom_expr8756); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal918);

				DebugLocation(728, 8);
				// SugarCpp.g:728:8: ( WS )*
				try { DebugEnterSubRule(597);
				while (true)
				{
					int alt597=2;
					try { DebugEnterDecision(597, false);
					int LA597_0 = input.LA(1);

					if ((LA597_0==WS))
					{
						alt597 = 1;
					}


					} finally { DebugExitDecision(597); }
					switch ( alt597 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:728:8: WS
						{
						DebugLocation(728, 8);
						WS919=(IToken)Match(input,WS,Follow._WS_in_atom_expr8758); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS919);


						}
						break;

					default:
						goto loop597;
					}
				}

				loop597:
					;

				} finally { DebugExitSubRule(597); }

				DebugLocation(728, 12);
				PushFollow(Follow._ident_in_atom_expr8761);
				ident920=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident920.Tree);


				{
				// AST REWRITE
				// elements: 131, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 728:18: -> ^( '@' ident )
				{
					DebugLocation(728, 21);
					// SugarCpp.g:728:21: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(728, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(728, 27);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:729:4: '(' ( WS )* a= expr ( ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')' -> ^( Expr_Tuple ( expr )+ ) | ( WS )* ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(729, 4);
				char_literal921=(IToken)Match(input,93,Follow._93_in_atom_expr8774); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal921);

				DebugLocation(729, 8);
				// SugarCpp.g:729:8: ( WS )*
				try { DebugEnterSubRule(598);
				while (true)
				{
					int alt598=2;
					try { DebugEnterDecision(598, false);
					int LA598_0 = input.LA(1);

					if ((LA598_0==WS))
					{
						alt598 = 1;
					}


					} finally { DebugExitDecision(598); }
					switch ( alt598 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:729:8: WS
						{
						DebugLocation(729, 8);
						WS922=(IToken)Match(input,WS,Follow._WS_in_atom_expr8776); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS922);


						}
						break;

					default:
						goto loop598;
					}
				}

				loop598:
					;

				} finally { DebugExitSubRule(598); }

				DebugLocation(729, 13);
				PushFollow(Follow._expr_in_atom_expr8781);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(729, 19);
				// SugarCpp.g:729:19: ( ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')' -> ^( Expr_Tuple ( expr )+ ) | ( WS )* ')' -> ^( Expr_Bracket expr ) )
				int alt604=2;
				try { DebugEnterSubRule(604);
				try { DebugEnterDecision(604, false);
				try
				{
					alt604 = dfa604.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(604); }
				switch (alt604)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:729:21: ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')'
					{
					DebugLocation(729, 21);
					// SugarCpp.g:729:21: ( ( WS )* ',' ( WS )* expr )+
					int cnt601=0;
					try { DebugEnterSubRule(601);
					while (true)
					{
						int alt601=2;
						try { DebugEnterDecision(601, false);
						try
						{
							alt601 = dfa601.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(601); }
						switch (alt601)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:729:22: ( WS )* ',' ( WS )* expr
							{
							DebugLocation(729, 22);
							// SugarCpp.g:729:22: ( WS )*
							try { DebugEnterSubRule(599);
							while (true)
							{
								int alt599=2;
								try { DebugEnterDecision(599, false);
								int LA599_0 = input.LA(1);

								if ((LA599_0==WS))
								{
									alt599 = 1;
								}


								} finally { DebugExitDecision(599); }
								switch ( alt599 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:729:22: WS
									{
									DebugLocation(729, 22);
									WS923=(IToken)Match(input,WS,Follow._WS_in_atom_expr8786); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS923);


									}
									break;

								default:
									goto loop599;
								}
							}

							loop599:
								;

							} finally { DebugExitSubRule(599); }

							DebugLocation(729, 26);
							char_literal924=(IToken)Match(input,100,Follow._100_in_atom_expr8789); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal924);

							DebugLocation(729, 30);
							// SugarCpp.g:729:30: ( WS )*
							try { DebugEnterSubRule(600);
							while (true)
							{
								int alt600=2;
								try { DebugEnterDecision(600, false);
								int LA600_0 = input.LA(1);

								if ((LA600_0==WS))
								{
									alt600 = 1;
								}


								} finally { DebugExitDecision(600); }
								switch ( alt600 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:729:30: WS
									{
									DebugLocation(729, 30);
									WS925=(IToken)Match(input,WS,Follow._WS_in_atom_expr8791); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_WS.Add(WS925);


									}
									break;

								default:
									goto loop600;
								}
							}

							loop600:
								;

							} finally { DebugExitSubRule(600); }

							DebugLocation(729, 34);
							PushFollow(Follow._expr_in_atom_expr8794);
							expr926=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr926.Tree);

							}
							break;

						default:
							if (cnt601 >= 1)
								goto loop601;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee601 = new EarlyExitException( 601, input );
							DebugRecognitionException(eee601);
							throw eee601;
						}
						cnt601++;
					}
					loop601:
						;

					} finally { DebugExitSubRule(601); }

					DebugLocation(729, 41);
					// SugarCpp.g:729:41: ( WS )*
					try { DebugEnterSubRule(602);
					while (true)
					{
						int alt602=2;
						try { DebugEnterDecision(602, false);
						int LA602_0 = input.LA(1);

						if ((LA602_0==WS))
						{
							alt602 = 1;
						}


						} finally { DebugExitDecision(602); }
						switch ( alt602 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:729:41: WS
							{
							DebugLocation(729, 41);
							WS927=(IToken)Match(input,WS,Follow._WS_in_atom_expr8798); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS927);


							}
							break;

						default:
							goto loop602;
						}
					}

					loop602:
						;

					} finally { DebugExitSubRule(602); }

					DebugLocation(729, 45);
					char_literal928=(IToken)Match(input,94,Follow._94_in_atom_expr8801); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal928);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 729:49: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(729, 52);
						// SugarCpp.g:729:52: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(729, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(729, 65);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(729, 65);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:730:21: ( WS )* ')'
					{
					DebugLocation(730, 21);
					// SugarCpp.g:730:21: ( WS )*
					try { DebugEnterSubRule(603);
					while (true)
					{
						int alt603=2;
						try { DebugEnterDecision(603, false);
						int LA603_0 = input.LA(1);

						if ((LA603_0==WS))
						{
							alt603 = 1;
						}


						} finally { DebugExitDecision(603); }
						switch ( alt603 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:730:21: WS
							{
							DebugLocation(730, 21);
							WS929=(IToken)Match(input,WS,Follow._WS_in_atom_expr8832); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS929);


							}
							break;

						default:
							goto loop603;
						}
					}

					loop603:
						;

					} finally { DebugExitSubRule(603); }

					DebugLocation(730, 25);
					char_literal930=(IToken)Match(input,94,Follow._94_in_atom_expr8835); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal930);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 730:29: -> ^( Expr_Bracket expr )
					{
						DebugLocation(730, 32);
						// SugarCpp.g:730:32: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(730, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(730, 47);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(604); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 96);
			LeaveRule("atom_expr", 96);
			LeaveRule_atom_expr();
		}
		DebugLocation(732, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:734:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 97);
		TraceIn("lvalue_item", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix931 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(734, 1);
		try
		{
			// SugarCpp.g:735:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:735:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(735, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item8868);
			lvalue_prefix931=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix931.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 97);
			LeaveRule("lvalue_item", 97);
			LeaveRule_lvalue_item();
		}
		DebugLocation(736, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:738:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 98);
		TraceIn("lvalue_prefix", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op932 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix933 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix934 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(738, 1);
		try
		{
			// SugarCpp.g:739:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt606=2;
			try { DebugEnterDecision(606, false);
			int LA606_0 = input.LA(1);

			if ((LA606_0==86||LA606_0==91||LA606_0==95||(LA606_0>=97 && LA606_0<=98)||(LA606_0>=101 && LA606_0<=102)||LA606_0==161||LA606_0==186))
			{
				alt606 = 1;
			}
			else if ((LA606_0==IDENT||LA606_0==131))
			{
				alt606 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 606, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(606); }
			switch (alt606)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:739:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(739, 4);
				// SugarCpp.g:739:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:739:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(739, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix8880);
				prefix_expr_op932=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op932.Tree);
				DebugLocation(739, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix8882);
				lvalue_prefix933=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix933.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 739:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(739, 38);
					// SugarCpp.g:739:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(739, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(739, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(739, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:740:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(740, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix8898);
				lvalue_suffix934=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix934.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 98);
			LeaveRule("lvalue_prefix", 98);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(741, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:743:1: lvalue_suffix : (a= lvalue_atom -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | ( WS )* '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 99);
		TraceIn("lvalue_suffix", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken WS935 = default(IToken);
		IToken string_literal936 = default(IToken);
		IToken WS937 = default(IToken);
		IToken string_literal938 = default(IToken);
		IToken WS939 = default(IToken);
		IToken char_literal940 = default(IToken);
		IToken WS941 = default(IToken);
		IToken WS943 = default(IToken);
		IToken string_literal944 = default(IToken);
		IToken WS945 = default(IToken);
		IToken WS947 = default(IToken);
		IToken WS950 = default(IToken);
		IToken WS952 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident942 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident946 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list948 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter949 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list951 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list953 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree WS935_tree = default(CommonTree);
		CommonTree string_literal936_tree = default(CommonTree);
		CommonTree WS937_tree = default(CommonTree);
		CommonTree string_literal938_tree = default(CommonTree);
		CommonTree WS939_tree = default(CommonTree);
		CommonTree char_literal940_tree = default(CommonTree);
		CommonTree WS941_tree = default(CommonTree);
		CommonTree WS943_tree = default(CommonTree);
		CommonTree string_literal944_tree = default(CommonTree);
		CommonTree WS945_tree = default(CommonTree);
		CommonTree WS947_tree = default(CommonTree);
		CommonTree WS950_tree = default(CommonTree);
		CommonTree WS952_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(743, 1);
		try
		{
			// SugarCpp.g:744:2: ( (a= lvalue_atom -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | ( WS )* '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:744:4: (a= lvalue_atom -> $a) ( ( WS )* '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | ( WS )* '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(744, 4);
			// SugarCpp.g:744:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:744:5: a= lvalue_atom
			{
			DebugLocation(744, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix8912);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 744:19: -> $a
			{
				DebugLocation(744, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(744, 26);
			// SugarCpp.g:744:26: ( ( WS )* '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | ( WS )* '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(616);
			while (true)
			{
				int alt616=8;
				try { DebugEnterDecision(616, false);
				try
				{
					alt616 = dfa616.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(616); }
				switch ( alt616 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:744:28: ( WS )* '++'
					{
					DebugLocation(744, 28);
					// SugarCpp.g:744:28: ( WS )*
					try { DebugEnterSubRule(607);
					while (true)
					{
						int alt607=2;
						try { DebugEnterDecision(607, false);
						int LA607_0 = input.LA(1);

						if ((LA607_0==WS))
						{
							alt607 = 1;
						}


						} finally { DebugExitDecision(607); }
						switch ( alt607 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:744:28: WS
							{
							DebugLocation(744, 28);
							WS935=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix8922); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS935);


							}
							break;

						default:
							goto loop607;
						}
					}

					loop607:
						;

					} finally { DebugExitSubRule(607); }

					DebugLocation(744, 32);
					string_literal936=(IToken)Match(input,98,Follow._98_in_lvalue_suffix8925); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal936);



					{
					// AST REWRITE
					// elements: 98, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 744:37: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(744, 40);
						// SugarCpp.g:744:40: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(744, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(744, 54);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(744, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:745:16: ( WS )* '--'
					{
					DebugLocation(745, 16);
					// SugarCpp.g:745:16: ( WS )*
					try { DebugEnterSubRule(608);
					while (true)
					{
						int alt608=2;
						try { DebugEnterDecision(608, false);
						int LA608_0 = input.LA(1);

						if ((LA608_0==WS))
						{
							alt608 = 1;
						}


						} finally { DebugExitDecision(608); }
						switch ( alt608 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:745:16: WS
							{
							DebugLocation(745, 16);
							WS937=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix8953); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS937);


							}
							break;

						default:
							goto loop608;
						}
					}

					loop608:
						;

					} finally { DebugExitSubRule(608); }

					DebugLocation(745, 20);
					string_literal938=(IToken)Match(input,102,Follow._102_in_lvalue_suffix8956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal938);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 102
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 745:25: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(745, 28);
						// SugarCpp.g:745:28: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(745, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(745, 42);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(745, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:746:13: ( WS )* '.' ( WS )* ident
					{
					DebugLocation(746, 13);
					// SugarCpp.g:746:13: ( WS )*
					try { DebugEnterSubRule(609);
					while (true)
					{
						int alt609=2;
						try { DebugEnterDecision(609, false);
						int LA609_0 = input.LA(1);

						if ((LA609_0==WS))
						{
							alt609 = 1;
						}


						} finally { DebugExitDecision(609); }
						switch ( alt609 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:746:13: WS
							{
							DebugLocation(746, 13);
							WS939=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix8981); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS939);


							}
							break;

						default:
							goto loop609;
						}
					}

					loop609:
						;

					} finally { DebugExitSubRule(609); }

					DebugLocation(746, 17);
					char_literal940=(IToken)Match(input,107,Follow._107_in_lvalue_suffix8984); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal940);

					DebugLocation(746, 21);
					// SugarCpp.g:746:21: ( WS )*
					try { DebugEnterSubRule(610);
					while (true)
					{
						int alt610=2;
						try { DebugEnterDecision(610, false);
						int LA610_0 = input.LA(1);

						if ((LA610_0==WS))
						{
							alt610 = 1;
						}


						} finally { DebugExitDecision(610); }
						switch ( alt610 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:746:21: WS
							{
							DebugLocation(746, 21);
							WS941=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix8986); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS941);


							}
							break;

						default:
							goto loop610;
						}
					}

					loop610:
						;

					} finally { DebugExitSubRule(610); }

					DebugLocation(746, 25);
					PushFollow(Follow._ident_in_lvalue_suffix8989);
					ident942=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident942.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 107
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 746:31: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(746, 34);
						// SugarCpp.g:746:34: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(746, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(746, 48);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(746, 53);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(746, 67);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:747:13: ( WS )* '->' ( WS )* ident
					{
					DebugLocation(747, 13);
					// SugarCpp.g:747:13: ( WS )*
					try { DebugEnterSubRule(611);
					while (true)
					{
						int alt611=2;
						try { DebugEnterDecision(611, false);
						int LA611_0 = input.LA(1);

						if ((LA611_0==WS))
						{
							alt611 = 1;
						}


						} finally { DebugExitDecision(611); }
						switch ( alt611 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:747:13: WS
							{
							DebugLocation(747, 13);
							WS943=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix9016); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS943);


							}
							break;

						default:
							goto loop611;
						}
					}

					loop611:
						;

					} finally { DebugExitSubRule(611); }

					DebugLocation(747, 17);
					string_literal944=(IToken)Match(input,105,Follow._105_in_lvalue_suffix9019); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal944);

					DebugLocation(747, 22);
					// SugarCpp.g:747:22: ( WS )*
					try { DebugEnterSubRule(612);
					while (true)
					{
						int alt612=2;
						try { DebugEnterDecision(612, false);
						int LA612_0 = input.LA(1);

						if ((LA612_0==WS))
						{
							alt612 = 1;
						}


						} finally { DebugExitDecision(612); }
						switch ( alt612 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:747:22: WS
							{
							DebugLocation(747, 22);
							WS945=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix9021); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS945);


							}
							break;

						default:
							goto loop612;
						}
					}

					loop612:
						;

					} finally { DebugExitSubRule(612); }

					DebugLocation(747, 26);
					PushFollow(Follow._ident_in_lvalue_suffix9024);
					ident946=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident946.Tree);


					{
					// AST REWRITE
					// elements: 105, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 747:32: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(747, 35);
						// SugarCpp.g:747:35: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(747, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(747, 49);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(747, 55);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(747, 69);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:748:13: ( WS )* bracket_expr_list
					{
					DebugLocation(748, 13);
					// SugarCpp.g:748:13: ( WS )*
					try { DebugEnterSubRule(613);
					while (true)
					{
						int alt613=2;
						try { DebugEnterDecision(613, false);
						int LA613_0 = input.LA(1);

						if ((LA613_0==WS))
						{
							alt613 = 1;
						}


						} finally { DebugExitDecision(613); }
						switch ( alt613 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:748:13: WS
							{
							DebugLocation(748, 13);
							WS947=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix9051); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS947);


							}
							break;

						default:
							goto loop613;
						}
					}

					loop613:
						;

					} finally { DebugExitSubRule(613); }

					DebugLocation(748, 17);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix9054);
					bracket_expr_list948=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list948.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 748:35: -> ^( Expr_Call $lvalue_suffix bracket_expr_list )
					{
						DebugLocation(748, 38);
						// SugarCpp.g:748:38: ^( Expr_Call $lvalue_suffix bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(748, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(748, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(748, 65);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:749:13: generic_parameter ( WS )* bracket_expr_list
					{
					DebugLocation(749, 13);
					PushFollow(Follow._generic_parameter_in_lvalue_suffix9079);
					generic_parameter949=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter949.Tree);
					DebugLocation(749, 31);
					// SugarCpp.g:749:31: ( WS )*
					try { DebugEnterSubRule(614);
					while (true)
					{
						int alt614=2;
						try { DebugEnterDecision(614, false);
						int LA614_0 = input.LA(1);

						if ((LA614_0==WS))
						{
							alt614 = 1;
						}


						} finally { DebugExitDecision(614); }
						switch ( alt614 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:749:31: WS
							{
							DebugLocation(749, 31);
							WS950=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix9081); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS950);


							}
							break;

						default:
							goto loop614;
						}
					}

					loop614:
						;

					} finally { DebugExitSubRule(614); }

					DebugLocation(749, 35);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix9084);
					bracket_expr_list951=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list951.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, lvalue_suffix, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 749:53: -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list )
					{
						DebugLocation(749, 56);
						// SugarCpp.g:749:56: ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(749, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(749, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(749, 83);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());
						DebugLocation(749, 101);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:750:13: ( WS )* square_expr_list
					{
					DebugLocation(750, 13);
					// SugarCpp.g:750:13: ( WS )*
					try { DebugEnterSubRule(615);
					while (true)
					{
						int alt615=2;
						try { DebugEnterDecision(615, false);
						int LA615_0 = input.LA(1);

						if ((LA615_0==WS))
						{
							alt615 = 1;
						}


						} finally { DebugExitDecision(615); }
						switch ( alt615 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:750:13: WS
							{
							DebugLocation(750, 13);
							WS952=(IToken)Match(input,WS,Follow._WS_in_lvalue_suffix9111); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS952);


							}
							break;

						default:
							goto loop615;
						}
					}

					loop615:
						;

					} finally { DebugExitSubRule(615); }

					DebugLocation(750, 17);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix9114);
					square_expr_list953=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list953.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 750:34: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(750, 37);
						// SugarCpp.g:750:37: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(750, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(750, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(750, 64);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop616;
				}
			}

			loop616:
				;

			} finally { DebugExitSubRule(616); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 99);
			LeaveRule("lvalue_suffix", 99);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(752, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:754:1: lvalue_atom : ( ident | '@' ( WS )* ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 100);
		TraceIn("lvalue_atom", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal955 = default(IToken);
		IToken WS956 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident954 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident957 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal955_tree = default(CommonTree);
		CommonTree WS956_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(754, 1);
		try
		{
			// SugarCpp.g:755:2: ( ident | '@' ( WS )* ident -> ^( '@' ident ) )
			int alt618=2;
			try { DebugEnterDecision(618, false);
			int LA618_0 = input.LA(1);

			if ((LA618_0==IDENT))
			{
				alt618 = 1;
			}
			else if ((LA618_0==131))
			{
				alt618 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 618, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(618); }
			switch (alt618)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:755:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(755, 4);
				PushFollow(Follow._ident_in_lvalue_atom9152);
				ident954=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident954.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:756:4: '@' ( WS )* ident
				{
				DebugLocation(756, 4);
				char_literal955=(IToken)Match(input,131,Follow._131_in_lvalue_atom9157); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal955);

				DebugLocation(756, 8);
				// SugarCpp.g:756:8: ( WS )*
				try { DebugEnterSubRule(617);
				while (true)
				{
					int alt617=2;
					try { DebugEnterDecision(617, false);
					int LA617_0 = input.LA(1);

					if ((LA617_0==WS))
					{
						alt617 = 1;
					}


					} finally { DebugExitDecision(617); }
					switch ( alt617 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:756:8: WS
						{
						DebugLocation(756, 8);
						WS956=(IToken)Match(input,WS,Follow._WS_in_lvalue_atom9159); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS956);


						}
						break;

					default:
						goto loop617;
					}
				}

				loop617:
					;

				} finally { DebugExitSubRule(617); }

				DebugLocation(756, 12);
				PushFollow(Follow._ident_in_lvalue_atom9162);
				ident957=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident957.Tree);


				{
				// AST REWRITE
				// elements: ident, 131
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 756:18: -> ^( '@' ident )
				{
					DebugLocation(756, 21);
					// SugarCpp.g:756:21: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(756, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(756, 27);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 100);
			LeaveRule("lvalue_atom", 100);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(757, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:759:1: lvalue : ( '(' ( WS )* lvalue_item ( ( WS )* ',' ( WS )* lvalue_item )+ ( WS )* ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 101);
		TraceIn("lvalue", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal958 = default(IToken);
		IToken WS959 = default(IToken);
		IToken WS961 = default(IToken);
		IToken char_literal962 = default(IToken);
		IToken WS963 = default(IToken);
		IToken WS965 = default(IToken);
		IToken char_literal966 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item960 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item964 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item967 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal958_tree = default(CommonTree);
		CommonTree WS959_tree = default(CommonTree);
		CommonTree WS961_tree = default(CommonTree);
		CommonTree char_literal962_tree = default(CommonTree);
		CommonTree WS963_tree = default(CommonTree);
		CommonTree WS965_tree = default(CommonTree);
		CommonTree char_literal966_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(759, 1);
		try
		{
			// SugarCpp.g:760:2: ( '(' ( WS )* lvalue_item ( ( WS )* ',' ( WS )* lvalue_item )+ ( WS )* ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt624=2;
			try { DebugEnterDecision(624, false);
			int LA624_0 = input.LA(1);

			if ((LA624_0==93))
			{
				alt624 = 1;
			}
			else if ((LA624_0==IDENT||LA624_0==86||LA624_0==91||LA624_0==95||(LA624_0>=97 && LA624_0<=98)||(LA624_0>=101 && LA624_0<=102)||LA624_0==131||LA624_0==161||LA624_0==186))
			{
				alt624 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 624, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(624); }
			switch (alt624)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:760:4: '(' ( WS )* lvalue_item ( ( WS )* ',' ( WS )* lvalue_item )+ ( WS )* ')'
				{
				DebugLocation(760, 4);
				char_literal958=(IToken)Match(input,93,Follow._93_in_lvalue9181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal958);

				DebugLocation(760, 8);
				// SugarCpp.g:760:8: ( WS )*
				try { DebugEnterSubRule(619);
				while (true)
				{
					int alt619=2;
					try { DebugEnterDecision(619, false);
					int LA619_0 = input.LA(1);

					if ((LA619_0==WS))
					{
						alt619 = 1;
					}


					} finally { DebugExitDecision(619); }
					switch ( alt619 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:760:8: WS
						{
						DebugLocation(760, 8);
						WS959=(IToken)Match(input,WS,Follow._WS_in_lvalue9183); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS959);


						}
						break;

					default:
						goto loop619;
					}
				}

				loop619:
					;

				} finally { DebugExitSubRule(619); }

				DebugLocation(760, 12);
				PushFollow(Follow._lvalue_item_in_lvalue9186);
				lvalue_item960=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item960.Tree);
				DebugLocation(760, 24);
				// SugarCpp.g:760:24: ( ( WS )* ',' ( WS )* lvalue_item )+
				int cnt622=0;
				try { DebugEnterSubRule(622);
				while (true)
				{
					int alt622=2;
					try { DebugEnterDecision(622, false);
					try
					{
						alt622 = dfa622.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(622); }
					switch (alt622)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:760:25: ( WS )* ',' ( WS )* lvalue_item
						{
						DebugLocation(760, 25);
						// SugarCpp.g:760:25: ( WS )*
						try { DebugEnterSubRule(620);
						while (true)
						{
							int alt620=2;
							try { DebugEnterDecision(620, false);
							int LA620_0 = input.LA(1);

							if ((LA620_0==WS))
							{
								alt620 = 1;
							}


							} finally { DebugExitDecision(620); }
							switch ( alt620 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:760:25: WS
								{
								DebugLocation(760, 25);
								WS961=(IToken)Match(input,WS,Follow._WS_in_lvalue9189); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS961);


								}
								break;

							default:
								goto loop620;
							}
						}

						loop620:
							;

						} finally { DebugExitSubRule(620); }

						DebugLocation(760, 29);
						char_literal962=(IToken)Match(input,100,Follow._100_in_lvalue9192); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal962);

						DebugLocation(760, 33);
						// SugarCpp.g:760:33: ( WS )*
						try { DebugEnterSubRule(621);
						while (true)
						{
							int alt621=2;
							try { DebugEnterDecision(621, false);
							int LA621_0 = input.LA(1);

							if ((LA621_0==WS))
							{
								alt621 = 1;
							}


							} finally { DebugExitDecision(621); }
							switch ( alt621 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:760:33: WS
								{
								DebugLocation(760, 33);
								WS963=(IToken)Match(input,WS,Follow._WS_in_lvalue9194); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS963);


								}
								break;

							default:
								goto loop621;
							}
						}

						loop621:
							;

						} finally { DebugExitSubRule(621); }

						DebugLocation(760, 37);
						PushFollow(Follow._lvalue_item_in_lvalue9197);
						lvalue_item964=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item964.Tree);

						}
						break;

					default:
						if (cnt622 >= 1)
							goto loop622;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee622 = new EarlyExitException( 622, input );
						DebugRecognitionException(eee622);
						throw eee622;
					}
					cnt622++;
				}
				loop622:
					;

				} finally { DebugExitSubRule(622); }

				DebugLocation(760, 51);
				// SugarCpp.g:760:51: ( WS )*
				try { DebugEnterSubRule(623);
				while (true)
				{
					int alt623=2;
					try { DebugEnterDecision(623, false);
					int LA623_0 = input.LA(1);

					if ((LA623_0==WS))
					{
						alt623 = 1;
					}


					} finally { DebugExitDecision(623); }
					switch ( alt623 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:760:51: WS
						{
						DebugLocation(760, 51);
						WS965=(IToken)Match(input,WS,Follow._WS_in_lvalue9201); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS965);


						}
						break;

					default:
						goto loop623;
					}
				}

				loop623:
					;

				} finally { DebugExitSubRule(623); }

				DebugLocation(760, 55);
				char_literal966=(IToken)Match(input,94,Follow._94_in_lvalue9204); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal966);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 760:59: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(760, 62);
					// SugarCpp.g:760:62: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(760, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(760, 76);
					// SugarCpp.g:760:76: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(760, 76);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:761:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(761, 4);
				PushFollow(Follow._lvalue_item_in_lvalue9218);
				lvalue_item967=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item967.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 101);
			LeaveRule("lvalue", 101);
			LeaveRule_lvalue();
		}
		DebugLocation(762, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:764:1: ident : IDENT ( ( WS )* '::' ( WS )* IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 102);
		TraceIn("ident", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT968 = default(IToken);
		IToken WS969 = default(IToken);
		IToken string_literal970 = default(IToken);
		IToken WS971 = default(IToken);
		IToken IDENT972 = default(IToken);

		CommonTree IDENT968_tree = default(CommonTree);
		CommonTree WS969_tree = default(CommonTree);
		CommonTree string_literal970_tree = default(CommonTree);
		CommonTree WS971_tree = default(CommonTree);
		CommonTree IDENT972_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(764, 1);
		try
		{
			// SugarCpp.g:765:2: ( IDENT ( ( WS )* '::' ( WS )* IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:765:4: IDENT ( ( WS )* '::' ( WS )* IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(765, 4);
			IDENT968=(IToken)Match(input,IDENT,Follow._IDENT_in_ident9229); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT968_tree = (CommonTree)adaptor.Create(IDENT968);
			adaptor.AddChild(root_0, IDENT968_tree);
			}
			DebugLocation(765, 10);
			// SugarCpp.g:765:10: ( ( WS )* '::' ( WS )* IDENT )*
			try { DebugEnterSubRule(627);
			while (true)
			{
				int alt627=2;
				try { DebugEnterDecision(627, false);
				try
				{
					alt627 = dfa627.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(627); }
				switch ( alt627 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:765:11: ( WS )* '::' ( WS )* IDENT
					{
					DebugLocation(765, 11);
					// SugarCpp.g:765:11: ( WS )*
					try { DebugEnterSubRule(625);
					while (true)
					{
						int alt625=2;
						try { DebugEnterDecision(625, false);
						int LA625_0 = input.LA(1);

						if ((LA625_0==WS))
						{
							alt625 = 1;
						}


						} finally { DebugExitDecision(625); }
						switch ( alt625 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:765:11: WS
							{
							DebugLocation(765, 11);
							WS969=(IToken)Match(input,WS,Follow._WS_in_ident9232); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS969_tree = (CommonTree)adaptor.Create(WS969);
							adaptor.AddChild(root_0, WS969_tree);
							}

							}
							break;

						default:
							goto loop625;
						}
					}

					loop625:
						;

					} finally { DebugExitSubRule(625); }

					DebugLocation(765, 15);
					string_literal970=(IToken)Match(input,112,Follow._112_in_ident9235); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal970_tree = (CommonTree)adaptor.Create(string_literal970);
					adaptor.AddChild(root_0, string_literal970_tree);
					}
					DebugLocation(765, 20);
					// SugarCpp.g:765:20: ( WS )*
					try { DebugEnterSubRule(626);
					while (true)
					{
						int alt626=2;
						try { DebugEnterDecision(626, false);
						int LA626_0 = input.LA(1);

						if ((LA626_0==WS))
						{
							alt626 = 1;
						}


						} finally { DebugExitDecision(626); }
						switch ( alt626 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:765:20: WS
							{
							DebugLocation(765, 20);
							WS971=(IToken)Match(input,WS,Follow._WS_in_ident9237); if (state.failed) return retval;
							if (state.backtracking == 0) {
							WS971_tree = (CommonTree)adaptor.Create(WS971);
							adaptor.AddChild(root_0, WS971_tree);
							}

							}
							break;

						default:
							goto loop626;
						}
					}

					loop626:
						;

					} finally { DebugExitSubRule(626); }

					DebugLocation(765, 24);
					IDENT972=(IToken)Match(input,IDENT,Follow._IDENT_in_ident9240); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT972_tree = (CommonTree)adaptor.Create(IDENT972);
					adaptor.AddChild(root_0, IDENT972_tree);
					}

					}
					break;

				default:
					goto loop627;
				}
			}

			loop627:
				;

			} finally { DebugExitSubRule(627); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 102);
			LeaveRule("ident", 102);
			LeaveRule_ident();
		}
		DebugLocation(766, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:768:1: infix_func : '`' ! ( WS )* ident ( WS )* '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 103);
		TraceIn("infix_func", 103);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal973 = default(IToken);
		IToken WS974 = default(IToken);
		IToken WS976 = default(IToken);
		IToken char_literal977 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident975 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal973_tree = default(CommonTree);
		CommonTree WS974_tree = default(CommonTree);
		CommonTree WS976_tree = default(CommonTree);
		CommonTree char_literal977_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(768, 1);
		try
		{
			// SugarCpp.g:769:2: ( '`' ! ( WS )* ident ( WS )* '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:769:4: '`' ! ( WS )* ident ( WS )* '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(769, 7);
			char_literal973=(IToken)Match(input,136,Follow._136_in_infix_func9253); if (state.failed) return retval;
			DebugLocation(769, 9);
			// SugarCpp.g:769:9: ( WS )*
			try { DebugEnterSubRule(628);
			while (true)
			{
				int alt628=2;
				try { DebugEnterDecision(628, false);
				int LA628_0 = input.LA(1);

				if ((LA628_0==WS))
				{
					alt628 = 1;
				}


				} finally { DebugExitDecision(628); }
				switch ( alt628 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:769:9: WS
					{
					DebugLocation(769, 9);
					WS974=(IToken)Match(input,WS,Follow._WS_in_infix_func9256); if (state.failed) return retval;
					if (state.backtracking == 0) {
					WS974_tree = (CommonTree)adaptor.Create(WS974);
					adaptor.AddChild(root_0, WS974_tree);
					}

					}
					break;

				default:
					goto loop628;
				}
			}

			loop628:
				;

			} finally { DebugExitSubRule(628); }

			DebugLocation(769, 13);
			PushFollow(Follow._ident_in_infix_func9259);
			ident975=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident975.Tree);
			DebugLocation(769, 19);
			// SugarCpp.g:769:19: ( WS )*
			try { DebugEnterSubRule(629);
			while (true)
			{
				int alt629=2;
				try { DebugEnterDecision(629, false);
				int LA629_0 = input.LA(1);

				if ((LA629_0==WS))
				{
					alt629 = 1;
				}


				} finally { DebugExitDecision(629); }
				switch ( alt629 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:769:19: WS
					{
					DebugLocation(769, 19);
					WS976=(IToken)Match(input,WS,Follow._WS_in_infix_func9261); if (state.failed) return retval;
					if (state.backtracking == 0) {
					WS976_tree = (CommonTree)adaptor.Create(WS976);
					adaptor.AddChild(root_0, WS976_tree);
					}

					}
					break;

				default:
					goto loop629;
				}
			}

			loop629:
				;

			} finally { DebugExitSubRule(629); }

			DebugLocation(769, 26);
			char_literal977=(IToken)Match(input,136,Follow._136_in_infix_func9264); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 103);
			LeaveRule("infix_func", 103);
			LeaveRule_infix_func();
		}
		DebugLocation(770, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 104);
		TraceIn("synpred1_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:571:4: ( modify_expr ( WS )* ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:571:5: modify_expr ( WS )* ( '<|' | '|>' )
			{
			DebugLocation(571, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp6029);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(571, 17);
			// SugarCpp.g:571:17: ( WS )*
			try { DebugEnterSubRule(630);
			while (true)
			{
				int alt630=2;
				try { DebugEnterDecision(630, false);
				int LA630_0 = input.LA(1);

				if ((LA630_0==WS))
				{
					alt630 = 1;
				}


				} finally { DebugExitDecision(630); }
				switch ( alt630 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:17: WS
					{
					DebugLocation(571, 17);
					Match(input,WS,Follow._WS_in_synpred1_SugarCpp6031); if (state.failed) return;

					}
					break;

				default:
					goto loop630;
				}
			}

			loop630:
				;

			} finally { DebugExitSubRule(630); }

			DebugLocation(571, 21);
			if (input.LA(1)==120||input.LA(1)==184)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 104);
			LeaveRule("synpred1_SugarCpp_fragment", 104);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 105);
		TraceIn("synpred2_SugarCpp_fragment", 105);
		try
		{
			// SugarCpp.g:578:4: ( '[' ( WS )* feed_expr ( WS )* 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:578:5: '[' ( WS )* feed_expr ( WS )* 'for'
			{
			DebugLocation(578, 5);
			Match(input,132,Follow._132_in_synpred2_SugarCpp6166); if (state.failed) return;
			DebugLocation(578, 9);
			// SugarCpp.g:578:9: ( WS )*
			try { DebugEnterSubRule(631);
			while (true)
			{
				int alt631=2;
				try { DebugEnterDecision(631, false);
				int LA631_0 = input.LA(1);

				if ((LA631_0==WS))
				{
					alt631 = 1;
				}


				} finally { DebugExitDecision(631); }
				switch ( alt631 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:578:9: WS
					{
					DebugLocation(578, 9);
					Match(input,WS,Follow._WS_in_synpred2_SugarCpp6168); if (state.failed) return;

					}
					break;

				default:
					goto loop631;
				}
			}

			loop631:
				;

			} finally { DebugExitSubRule(631); }

			DebugLocation(578, 13);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp6171);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(578, 23);
			// SugarCpp.g:578:23: ( WS )*
			try { DebugEnterSubRule(632);
			while (true)
			{
				int alt632=2;
				try { DebugEnterDecision(632, false);
				int LA632_0 = input.LA(1);

				if ((LA632_0==WS))
				{
					alt632 = 1;
				}


				} finally { DebugExitDecision(632); }
				switch ( alt632 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:578:23: WS
					{
					DebugLocation(578, 23);
					Match(input,WS,Follow._WS_in_synpred2_SugarCpp6173); if (state.failed) return;

					}
					break;

				default:
					goto loop632;
				}
			}

			loop632:
				;

			} finally { DebugExitSubRule(632); }

			DebugLocation(578, 27);
			Match(input,149,Follow._149_in_synpred2_SugarCpp6176); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 105);
			LeaveRule("synpred2_SugarCpp_fragment", 105);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 106);
		TraceIn("synpred3_SugarCpp_fragment", 106);
		try
		{
			// SugarCpp.g:685:4: ( '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:685:5: '(' ( WS )* type_name ( WS )* ')' ( WS )* prefix_expr
			{
			DebugLocation(685, 5);
			Match(input,93,Follow._93_in_synpred3_SugarCpp7801); if (state.failed) return;
			DebugLocation(685, 9);
			// SugarCpp.g:685:9: ( WS )*
			try { DebugEnterSubRule(633);
			while (true)
			{
				int alt633=2;
				try { DebugEnterDecision(633, false);
				int LA633_0 = input.LA(1);

				if ((LA633_0==WS))
				{
					alt633 = 1;
				}


				} finally { DebugExitDecision(633); }
				switch ( alt633 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:9: WS
					{
					DebugLocation(685, 9);
					Match(input,WS,Follow._WS_in_synpred3_SugarCpp7803); if (state.failed) return;

					}
					break;

				default:
					goto loop633;
				}
			}

			loop633:
				;

			} finally { DebugExitSubRule(633); }

			DebugLocation(685, 13);
			PushFollow(Follow._type_name_in_synpred3_SugarCpp7806);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(685, 23);
			// SugarCpp.g:685:23: ( WS )*
			try { DebugEnterSubRule(634);
			while (true)
			{
				int alt634=2;
				try { DebugEnterDecision(634, false);
				int LA634_0 = input.LA(1);

				if ((LA634_0==WS))
				{
					alt634 = 1;
				}


				} finally { DebugExitDecision(634); }
				switch ( alt634 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:23: WS
					{
					DebugLocation(685, 23);
					Match(input,WS,Follow._WS_in_synpred3_SugarCpp7808); if (state.failed) return;

					}
					break;

				default:
					goto loop634;
				}
			}

			loop634:
				;

			} finally { DebugExitSubRule(634); }

			DebugLocation(685, 27);
			Match(input,94,Follow._94_in_synpred3_SugarCpp7811); if (state.failed) return;
			DebugLocation(685, 31);
			// SugarCpp.g:685:31: ( WS )*
			try { DebugEnterSubRule(635);
			while (true)
			{
				int alt635=2;
				try { DebugEnterDecision(635, false);
				int LA635_0 = input.LA(1);

				if ((LA635_0==WS))
				{
					alt635 = 1;
				}


				} finally { DebugExitDecision(635); }
				switch ( alt635 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:31: WS
					{
					DebugLocation(685, 31);
					Match(input,WS,Follow._WS_in_synpred3_SugarCpp7813); if (state.failed) return;

					}
					break;

				default:
					goto loop635;
				}
			}

			loop635:
				;

			} finally { DebugExitSubRule(635); }

			DebugLocation(685, 35);
			PushFollow(Follow._prefix_expr_in_synpred3_SugarCpp7816);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 106);
			LeaveRule("synpred3_SugarCpp_fragment", 106);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA10 dfa10;
	private DFA13 dfa13;
	private DFA15 dfa15;
	private DFA17 dfa17;
	private DFA19 dfa19;
	private DFA21 dfa21;
	private DFA26 dfa26;
	private DFA46 dfa46;
	private DFA40 dfa40;
	private DFA45 dfa45;
	private DFA49 dfa49;
	private DFA56 dfa56;
	private DFA63 dfa63;
	private DFA71 dfa71;
	private DFA70 dfa70;
	private DFA77 dfa77;
	private DFA81 dfa81;
	private DFA92 dfa92;
	private DFA91 dfa91;
	private DFA96 dfa96;
	private DFA101 dfa101;
	private DFA107 dfa107;
	private DFA106 dfa106;
	private DFA111 dfa111;
	private DFA115 dfa115;
	private DFA120 dfa120;
	private DFA119 dfa119;
	private DFA122 dfa122;
	private DFA127 dfa127;
	private DFA140 dfa140;
	private DFA139 dfa139;
	private DFA134 dfa134;
	private DFA137 dfa137;
	private DFA142 dfa142;
	private DFA145 dfa145;
	private DFA144 dfa144;
	private DFA150 dfa150;
	private DFA149 dfa149;
	private DFA165 dfa165;
	private DFA171 dfa171;
	private DFA175 dfa175;
	private DFA182 dfa182;
	private DFA192 dfa192;
	private DFA196 dfa196;
	private DFA199 dfa199;
	private DFA212 dfa212;
	private DFA211 dfa211;
	private DFA237 dfa237;
	private DFA236 dfa236;
	private DFA238 dfa238;
	private DFA247 dfa247;
	private DFA249 dfa249;
	private DFA252 dfa252;
	private DFA261 dfa261;
	private DFA258 dfa258;
	private DFA269 dfa269;
	private DFA267 dfa267;
	private DFA276 dfa276;
	private DFA281 dfa281;
	private DFA283 dfa283;
	private DFA304 dfa304;
	private DFA293 dfa293;
	private DFA298 dfa298;
	private DFA303 dfa303;
	private DFA307 dfa307;
	private DFA312 dfa312;
	private DFA324 dfa324;
	private DFA329 dfa329;
	private DFA331 dfa331;
	private DFA343 dfa343;
	private DFA356 dfa356;
	private DFA350 dfa350;
	private DFA355 dfa355;
	private DFA365 dfa365;
	private DFA393 dfa393;
	private DFA385 dfa385;
	private DFA377 dfa377;
	private DFA415 dfa415;
	private DFA404 dfa404;
	private DFA420 dfa420;
	private DFA423 dfa423;
	private DFA435 dfa435;
	private DFA442 dfa442;
	private DFA451 dfa451;
	private DFA450 dfa450;
	private DFA465 dfa465;
	private DFA459 dfa459;
	private DFA462 dfa462;
	private DFA471 dfa471;
	private DFA470 dfa470;
	private DFA478 dfa478;
	private DFA477 dfa477;
	private DFA476 dfa476;
	private DFA481 dfa481;
	private DFA484 dfa484;
	private DFA487 dfa487;
	private DFA490 dfa490;
	private DFA493 dfa493;
	private DFA510 dfa510;
	private DFA511 dfa511;
	private DFA513 dfa513;
	private DFA512 dfa512;
	private DFA516 dfa516;
	private DFA521 dfa521;
	private DFA528 dfa528;
	private DFA531 dfa531;
	private DFA536 dfa536;
	private DFA545 dfa545;
	private DFA550 dfa550;
	private DFA556 dfa556;
	private DFA555 dfa555;
	private DFA583 dfa583;
	private DFA565 dfa565;
	private DFA563 dfa563;
	private DFA567 dfa567;
	private DFA580 dfa580;
	private DFA579 dfa579;
	private DFA577 dfa577;
	private DFA596 dfa596;
	private DFA604 dfa604;
	private DFA601 dfa601;
	private DFA616 dfa616;
	private DFA622 dfa622;
	private DFA627 dfa627;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa10 = new DFA10( this );
		dfa13 = new DFA13( this );
		dfa15 = new DFA15( this );
		dfa17 = new DFA17( this );
		dfa19 = new DFA19( this );
		dfa21 = new DFA21( this );
		dfa26 = new DFA26( this );
		dfa46 = new DFA46( this );
		dfa40 = new DFA40( this );
		dfa45 = new DFA45( this );
		dfa49 = new DFA49( this );
		dfa56 = new DFA56( this );
		dfa63 = new DFA63( this );
		dfa71 = new DFA71( this );
		dfa70 = new DFA70( this );
		dfa77 = new DFA77( this );
		dfa81 = new DFA81( this );
		dfa92 = new DFA92( this );
		dfa91 = new DFA91( this );
		dfa96 = new DFA96( this );
		dfa101 = new DFA101( this );
		dfa107 = new DFA107( this );
		dfa106 = new DFA106( this );
		dfa111 = new DFA111( this );
		dfa115 = new DFA115( this );
		dfa120 = new DFA120( this );
		dfa119 = new DFA119( this );
		dfa122 = new DFA122( this );
		dfa127 = new DFA127( this );
		dfa140 = new DFA140( this );
		dfa139 = new DFA139( this );
		dfa134 = new DFA134( this );
		dfa137 = new DFA137( this );
		dfa142 = new DFA142( this );
		dfa145 = new DFA145( this );
		dfa144 = new DFA144( this );
		dfa150 = new DFA150( this );
		dfa149 = new DFA149( this );
		dfa165 = new DFA165( this );
		dfa171 = new DFA171( this );
		dfa175 = new DFA175( this );
		dfa182 = new DFA182( this );
		dfa192 = new DFA192( this );
		dfa196 = new DFA196( this );
		dfa199 = new DFA199( this );
		dfa212 = new DFA212( this );
		dfa211 = new DFA211( this );
		dfa237 = new DFA237( this );
		dfa236 = new DFA236( this );
		dfa238 = new DFA238( this );
		dfa247 = new DFA247( this );
		dfa249 = new DFA249( this );
		dfa252 = new DFA252( this );
		dfa261 = new DFA261( this );
		dfa258 = new DFA258( this );
		dfa269 = new DFA269( this );
		dfa267 = new DFA267( this );
		dfa276 = new DFA276( this );
		dfa281 = new DFA281( this );
		dfa283 = new DFA283( this );
		dfa304 = new DFA304( this );
		dfa293 = new DFA293( this );
		dfa298 = new DFA298( this );
		dfa303 = new DFA303( this );
		dfa307 = new DFA307( this );
		dfa312 = new DFA312( this );
		dfa324 = new DFA324( this );
		dfa329 = new DFA329( this );
		dfa331 = new DFA331( this );
		dfa343 = new DFA343( this );
		dfa356 = new DFA356( this );
		dfa350 = new DFA350( this );
		dfa355 = new DFA355( this );
		dfa365 = new DFA365( this );
		dfa393 = new DFA393( this );
		dfa385 = new DFA385( this );
		dfa377 = new DFA377( this );
		dfa415 = new DFA415( this );
		dfa404 = new DFA404( this );
		dfa420 = new DFA420( this );
		dfa423 = new DFA423( this );
		dfa435 = new DFA435( this );
		dfa442 = new DFA442( this );
		dfa451 = new DFA451( this );
		dfa450 = new DFA450( this );
		dfa465 = new DFA465( this );
		dfa459 = new DFA459( this );
		dfa462 = new DFA462( this );
		dfa471 = new DFA471( this );
		dfa470 = new DFA470( this );
		dfa478 = new DFA478( this );
		dfa477 = new DFA477( this );
		dfa476 = new DFA476( this );
		dfa481 = new DFA481( this );
		dfa484 = new DFA484( this );
		dfa487 = new DFA487( this );
		dfa490 = new DFA490( this );
		dfa493 = new DFA493( this );
		dfa510 = new DFA510( this );
		dfa511 = new DFA511( this );
		dfa513 = new DFA513( this );
		dfa512 = new DFA512( this );
		dfa516 = new DFA516( this );
		dfa521 = new DFA521( this );
		dfa528 = new DFA528( this );
		dfa531 = new DFA531( this );
		dfa536 = new DFA536( this );
		dfa545 = new DFA545( this );
		dfa550 = new DFA550( this );
		dfa556 = new DFA556( this );
		dfa555 = new DFA555( this );
		dfa583 = new DFA583( this );
		dfa565 = new DFA565( this );
		dfa563 = new DFA563( this );
		dfa567 = new DFA567( this );
		dfa580 = new DFA580( this );
		dfa579 = new DFA579( this );
		dfa577 = new DFA577( this );
		dfa596 = new DFA596( this );
		dfa604 = new DFA604( this );
		dfa601 = new DFA601( this );
		dfa616 = new DFA616( this );
		dfa622 = new DFA622( this );
		dfa627 = new DFA627( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\xFA\xFFFF";
		private const string DFA5_eofS =
			"\xFA\xFFFF";
		private const string DFA5_minS =
			"\x3\x2F\x1\xFFFF\x1\x2F\x7\xFFFF\x1\x2F\x5\x55\x3\x2F\x1\x55\x3\x2F\x1"+
			"\x38\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x4\x2F\x1\x55\x1"+
			"\x2F\x3\x55\x1\x2F\x5\x55\x1\x38\x2\x2F\x3\x55\x1\x2F\x3\x55\x1\x2F\x3"+
			"\x55\x1\x2F\x4\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x2\x2F\x1\x55\x1\x2F\x1"+
			"\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x2\x55\x1\x2F\x1"+
			"\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x2"+
			"\x55\x2\x2F\x4\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x3\x55\x1\x2F\x3"+
			"\x55\x1\x2F\x3\x55\x1\x2F\x3\x55\x1\x2F\x3\x55\x1\x2F\x3\x55\x1\x2F\x1"+
			"\x55\x1\x2F\x3\x55\x1\x2F\x1\x55\x1\x2F\x3\x55\x1\x2F\x1\x55\x1\x2F\x3"+
			"\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x2"+
			"\x55\x1\x2F\x1\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x2\x55\x1\x2F\x1"+
			"\x55\x1\x2F\x2\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1"+
			"\x55\x2\x2F\x1\x55\x1\x2F\x3\x55\x1\x2F\x1\x55\x1\x2F\x3\x55\x1\x2F\x1"+
			"\x55\x1\x2F\x3\x55\x1\x2F\x1\x55\x1\x2F\x3\x55\x1\x2F\x1\x55\x1\x2F\x3"+
			"\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x2"+
			"\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x2\x2F\x1"+
			"\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55\x1\x2F\x1\x55";
		private const string DFA5_maxS =
			"\x1\xBA\x1\xB2\x1\xBA\x1\xFFFF\x1\xBA\x7\xFFFF\x1\xB2\x5\x85\x2\xBA\x1"+
			"\x55\x1\x85\x2\x55\x1\xB2\x1\x55\x1\x85\x1\x55\x1\x85\x1\x55\x1\x85\x1"+
			"\x55\x1\x85\x2\x55\x1\xBA\x1\x55\x1\x85\x1\x55\x2\x64\x1\x70\x1\xB2\x5"+
			"\x85\x1\x55\x1\xBA\x1\x55\x2\x64\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x2"+
			"\x64\x1\x70\x1\x55\x2\x64\x1\x70\x1\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1"+
			"\x85\x2\x55\x1\x85\x1\x55\x1\x85\x1\x55\x1\x85\x1\x55\x1\x85\x1\x55\x1"+
			"\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1"+
			"\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1\x85\x1\x70\x2\x55\x2"+
			"\x64\x1\x70\x1\x85\x1\x55\x1\x70\x1\x55\x1\x85\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x2\x64\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x2"+
			"\x64\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x2\x70\x1\x55\x1\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1"+
			"\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1"+
			"\x85\x1\x70\x1\x55\x1\x64\x1\x55\x1\x85\x1\x70\x1\x55\x1\x70\x1\x55\x1"+
			"\x70\x1\x55\x1\x70\x1\x55\x1\x70\x2\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1\x55\x1\x70\x1\x55\x2\x64\x1\x70\x1"+
			"\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70\x1\x55\x2\x70\x1"+
			"\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70\x2\x55\x1\x70\x1"+
			"\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70\x1\x55\x1\x70";
		private const string DFA5_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\xEE"+
			"\xFFFF";
		private const string DFA5_specialS =
			"\xFA\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x4\x2D\xFFFF\x1\x3\x26\xFFFF\x1\x1\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\x3\x3\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\xB\x3\xFFFF\x1\x2\x2\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x9\x2\xFFFF"+
				"\x1\x8\x1\x3\x7\xFFFF\x1\x3",
				"\x1\xD\x25\xFFFF\x1\xC\x38\xFFFF\x1\xE\x14\xFFFF\x1\x10\x2\xFFFF\x1"+
				"\xF\xB\xFFFF\x1\x11",
				"\x1\x3\x25\xFFFF\x1\x12\x7\xFFFF\x1\x3\x2D\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\x3\xD\xFFFF\x1\x3\x9\xFFFF\x2\x3\x2\xFFFF\x1\x3\x7\xFFFF\x1\x3"+
				"\x7\xFFFF\x1\x3",
				"",
				"\x1\x3\x25\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x7\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x14\x1\x7\x1\xFFFF"+
				"\x1\x3\x10\xFFFF\x1\x3\x35\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xD\x25\xFFFF\x1\xC\x38\xFFFF\x1\xE\x14\xFFFF\x1\x10\x2\xFFFF\x1"+
				"\xF\xB\xFFFF\x1\x11",
				"\x1\x15\x7\xFFFF\x1\x17\x6\xFFFF\x1\x18\xB\xFFFF\x1\x16\x14\xFFFF\x1"+
				"\x19",
				"\x1\x1A\x7\xFFFF\x1\x1B\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x1C\x7\xFFFF\x1\x1D\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x1E\x7\xFFFF\x1\x1F\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x20\x7\xFFFF\x1\x21\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x3\x25\xFFFF\x1\x12\x7\xFFFF\x1\x3\x2D\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\x3\xD\xFFFF\x1\x3\x9\xFFFF\x2\x3\x2\xFFFF\x1\x3\x7\xFFFF\x1\x3"+
				"\x7\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x7\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x14\x1\x7\x1\xFFFF"+
				"\x1\x3\x10\xFFFF\x1\x3\x35\xFFFF\x1\x3",
				"\x1\x23\x25\xFFFF\x1\x22",
				"\x1\x15\x7\xFFFF\x1\x17\x6\xFFFF\x1\x18\xB\xFFFF\x1\x16\x14\xFFFF\x1"+
				"\x19",
				"\x1\x25\x25\xFFFF\x1\x24",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28\x16\xFFFF\x1\x26",
				"\x1\x2B\x25\xFFFF\x1\x2A\x38\xFFFF\x1\x2C\x14\xFFFF\x1\x2E\x2\xFFFF"+
				"\x1\x2D\xB\xFFFF\x1\x2F",
				"\x1\x31\x1C\xFFFF\x1\x30",
				"\x1\x1A\x7\xFFFF\x1\x1B\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x35\x9\xFFFF\x1\x33\x4\xFFFF\x1\x34\x16\xFFFF\x1\x32",
				"\x1\x1C\x7\xFFFF\x1\x1D\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x39\x9\xFFFF\x1\x37\x4\xFFFF\x1\x38\x16\xFFFF\x1\x36",
				"\x1\x1E\x7\xFFFF\x1\x1F\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x3D\x9\xFFFF\x1\x3B\x4\xFFFF\x1\x3C\x16\xFFFF\x1\x3A",
				"\x1\x20\x7\xFFFF\x1\x21\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40\x16\xFFFF\x1\x3E",
				"\x1\x23\x25\xFFFF\x1\x22",
				"\x1\x3\x25\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x7\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x14\x1\x7\x1\xFFFF"+
				"\x1\x3\x10\xFFFF\x1\x3\x35\xFFFF\x1\x3",
				"\x1\x25\x25\xFFFF\x1\x24",
				"\x1\x15\x7\xFFFF\x1\x17\x6\xFFFF\x1\x18\xB\xFFFF\x1\x16\x14\xFFFF\x1"+
				"\x19",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28\x16\xFFFF\x1\x26",
				"\x1\x42\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x42\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x45\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x46",
				"\x1\x2B\x25\xFFFF\x1\x2A\x38\xFFFF\x1\x2C\x14\xFFFF\x1\x2E\x2\xFFFF"+
				"\x1\x2D\xB\xFFFF\x1\x2F",
				"\x1\x47\x7\xFFFF\x1\x49\x6\xFFFF\x1\x18\xB\xFFFF\x1\x48\x14\xFFFF\x1"+
				"\x19",
				"\x1\x4A\x7\xFFFF\x1\x4B\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x4C\x7\xFFFF\x1\x4D\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x4E\x7\xFFFF\x1\x4F\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x50\x7\xFFFF\x1\x51\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x31\x1C\xFFFF\x1\x30",
				"\x1\x4\x8\xFFFF\x1\x31\x24\xFFFF\x1\x3\x26\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\x3\x3\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\xB\x3\xFFFF\x1\x2\x2\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x9\x2\xFFFF\x1\x8\x1\x3\x7\xFFFF\x1\x3",
				"\x1\x35\x9\xFFFF\x1\x33\x4\xFFFF\x1\x34\x16\xFFFF\x1\x32",
				"\x1\x52\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53",
				"\x1\x52\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53",
				"\x1\x55\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\x56",
				"\x1\x39\x9\xFFFF\x1\x37\x4\xFFFF\x1\x38\x16\xFFFF\x1\x36",
				"\x1\x57\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58",
				"\x1\x57\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58",
				"\x1\x5A\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\x5B",
				"\x1\x3D\x9\xFFFF\x1\x3B\x4\xFFFF\x1\x3C\x16\xFFFF\x1\x3A",
				"\x1\x5C\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D",
				"\x1\x5C\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D",
				"\x1\x5F\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\x60",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40\x16\xFFFF\x1\x3E",
				"\x1\x61\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62",
				"\x1\x61\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62",
				"\x1\x64\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\x65",
				"\x1\x42\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x69\x9\xFFFF\x1\x67\x4\xFFFF\x1\x68\x16\xFFFF\x1\x66",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x45\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x46",
				"\x1\x6C\x25\xFFFF\x1\x6B",
				"\x1\x47\x7\xFFFF\x1\x49\x6\xFFFF\x1\x18\xB\xFFFF\x1\x48\x14\xFFFF\x1"+
				"\x19",
				"\x1\x6E\x25\xFFFF\x1\x6D",
				"\x1\x72\x9\xFFFF\x1\x70\x4\xFFFF\x1\x71\x16\xFFFF\x1\x6F",
				"\x1\x4A\x7\xFFFF\x1\x4B\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x76\x9\xFFFF\x1\x74\x4\xFFFF\x1\x75\x16\xFFFF\x1\x73",
				"\x1\x4C\x7\xFFFF\x1\x4D\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x7A\x9\xFFFF\x1\x78\x4\xFFFF\x1\x79\x16\xFFFF\x1\x77",
				"\x1\x4E\x7\xFFFF\x1\x4F\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x7E\x9\xFFFF\x1\x7C\x4\xFFFF\x1\x7D\x16\xFFFF\x1\x7B",
				"\x1\x50\x7\xFFFF\x1\x51\x6\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x82\x9\xFFFF\x1\x80\x4\xFFFF\x1\x81\x16\xFFFF\x1\x7F",
				"\x1\x52\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53",
				"\x1\x86\x9\xFFFF\x1\x84\x4\xFFFF\x1\x85\x16\xFFFF\x1\x83",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x55\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\x56",
				"\x1\x88\x25\xFFFF\x1\x87",
				"\x1\x57\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58",
				"\x1\x8C\x9\xFFFF\x1\x8A\x4\xFFFF\x1\x8B\x16\xFFFF\x1\x89",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x5A\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\x5B",
				"\x1\x8E\x25\xFFFF\x1\x8D",
				"\x1\x5C\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D",
				"\x1\x92\x9\xFFFF\x1\x90\x4\xFFFF\x1\x91\x16\xFFFF\x1\x8F",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x5F\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\x60",
				"\x1\x94\x25\xFFFF\x1\x93",
				"\x1\x61\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62",
				"\x1\x98\x9\xFFFF\x1\x96\x4\xFFFF\x1\x97\x16\xFFFF\x1\x95",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x64\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\x65",
				"\x1\x9A\x25\xFFFF\x1\x99",
				"\x1\x69\x9\xFFFF\x1\x67\x4\xFFFF\x1\x68\x16\xFFFF\x1\x66",
				"\x1\x42\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x42\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x9B\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x9C",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\x6C\x25\xFFFF\x1\x6B",
				"\x1\x45\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x46",
				"\x1\x6E\x25\xFFFF\x1\x6D",
				"\x1\x47\x7\xFFFF\x1\x49\x6\xFFFF\x1\x18\xB\xFFFF\x1\x48\x14\xFFFF\x1"+
				"\x19",
				"\x1\x72\x9\xFFFF\x1\x70\x4\xFFFF\x1\x71\x16\xFFFF\x1\x6F",
				"\x1\x9D\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E",
				"\x1\x9D\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E",
				"\x1\xA0\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xA1",
				"\x1\x76\x9\xFFFF\x1\x74\x4\xFFFF\x1\x75\x16\xFFFF\x1\x73",
				"\x1\xA2\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3",
				"\x1\xA2\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3",
				"\x1\xA5\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xA6",
				"\x1\x7A\x9\xFFFF\x1\x78\x4\xFFFF\x1\x79\x16\xFFFF\x1\x77",
				"\x1\xA7\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8",
				"\x1\xA7\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8",
				"\x1\xAA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xAB",
				"\x1\x7E\x9\xFFFF\x1\x7C\x4\xFFFF\x1\x7D\x16\xFFFF\x1\x7B",
				"\x1\xAC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD",
				"\x1\xAC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD",
				"\x1\xAF\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xB0",
				"\x1\x82\x9\xFFFF\x1\x80\x4\xFFFF\x1\x81\x16\xFFFF\x1\x7F",
				"\x1\xB1\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2",
				"\x1\xB1\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2",
				"\x1\xB4\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xB5",
				"\x1\x86\x9\xFFFF\x1\x84\x4\xFFFF\x1\x85\x16\xFFFF\x1\x83",
				"\x1\x52\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53",
				"\x1\x52\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53",
				"\x1\xB6\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\xB7",
				"\x1\x88\x25\xFFFF\x1\x87",
				"\x1\x55\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\x56",
				"\x1\x8C\x9\xFFFF\x1\x8A\x4\xFFFF\x1\x8B\x16\xFFFF\x1\x89",
				"\x1\x57\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58",
				"\x1\x57\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58",
				"\x1\xB8\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\xB9",
				"\x1\x8E\x25\xFFFF\x1\x8D",
				"\x1\x5A\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\x5B",
				"\x1\x92\x9\xFFFF\x1\x90\x4\xFFFF\x1\x91\x16\xFFFF\x1\x8F",
				"\x1\x5C\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D",
				"\x1\x5C\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D",
				"\x1\xBA\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\xBB",
				"\x1\x94\x25\xFFFF\x1\x93",
				"\x1\x5F\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\x60",
				"\x1\x98\x9\xFFFF\x1\x96\x4\xFFFF\x1\x97\x16\xFFFF\x1\x95",
				"\x1\x61\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62",
				"\x1\x61\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62",
				"\x1\xBC\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\xBD",
				"\x1\x9A\x25\xFFFF\x1\x99",
				"\x1\x64\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\x65",
				"\x1\x9B\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x9C",
				"\x1\xBF\x25\xFFFF\x1\xBE",
				"\x1\x9D\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E",
				"\x1\xC3\x9\xFFFF\x1\xC1\x4\xFFFF\x1\xC2\x16\xFFFF\x1\xC0",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\xA0\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xA1",
				"\x1\xC5\x25\xFFFF\x1\xC4",
				"\x1\xA2\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3",
				"\x1\xC9\x9\xFFFF\x1\xC7\x4\xFFFF\x1\xC8\x16\xFFFF\x1\xC6",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\xA5\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xA6",
				"\x1\xCB\x25\xFFFF\x1\xCA",
				"\x1\xA7\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8",
				"\x1\xCF\x9\xFFFF\x1\xCD\x4\xFFFF\x1\xCE\x16\xFFFF\x1\xCC",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\xAA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xAB",
				"\x1\xD1\x25\xFFFF\x1\xD0",
				"\x1\xAC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD",
				"\x1\xD5\x9\xFFFF\x1\xD3\x4\xFFFF\x1\xD4\x16\xFFFF\x1\xD2",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\xAF\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xB0",
				"\x1\xD7\x25\xFFFF\x1\xD6",
				"\x1\xB1\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2",
				"\x1\xDB\x9\xFFFF\x1\xD9\x4\xFFFF\x1\xDA\x16\xFFFF\x1\xD8",
				"\x1\x6A\xE\xFFFF\x1\x18\x20\xFFFF\x1\x19",
				"\x1\xB4\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xB5",
				"\x1\xDD\x25\xFFFF\x1\xDC",
				"\x1\xB6\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\xB7",
				"\x1\xDF\x25\xFFFF\x1\xDE",
				"\x1\xB8\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\xB9",
				"\x1\xE1\x25\xFFFF\x1\xE0",
				"\x1\xBA\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\xBB",
				"\x1\xE3\x25\xFFFF\x1\xE2",
				"\x1\xBC\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\xBD",
				"\x1\xE5\x25\xFFFF\x1\xE4",
				"\x1\xBF\x25\xFFFF\x1\xBE",
				"\x1\x9B\x8\xFFFF\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x9C",
				"\x1\xC3\x9\xFFFF\x1\xC1\x4\xFFFF\x1\xC2\x16\xFFFF\x1\xC0",
				"\x1\x9D\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E",
				"\x1\x9D\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E",
				"\x1\xE6\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xE7",
				"\x1\xC5\x25\xFFFF\x1\xC4",
				"\x1\xA0\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xA1",
				"\x1\xC9\x9\xFFFF\x1\xC7\x4\xFFFF\x1\xC8\x16\xFFFF\x1\xC6",
				"\x1\xA2\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3",
				"\x1\xA2\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3",
				"\x1\xE8\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xE9",
				"\x1\xCB\x25\xFFFF\x1\xCA",
				"\x1\xA5\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xA6",
				"\x1\xCF\x9\xFFFF\x1\xCD\x4\xFFFF\x1\xCE\x16\xFFFF\x1\xCC",
				"\x1\xA7\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8",
				"\x1\xA7\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8",
				"\x1\xEA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xEB",
				"\x1\xD1\x25\xFFFF\x1\xD0",
				"\x1\xAA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xAB",
				"\x1\xD5\x9\xFFFF\x1\xD3\x4\xFFFF\x1\xD4\x16\xFFFF\x1\xD2",
				"\x1\xAC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD",
				"\x1\xAC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD",
				"\x1\xEC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xED",
				"\x1\xD7\x25\xFFFF\x1\xD6",
				"\x1\xAF\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xB0",
				"\x1\xDB\x9\xFFFF\x1\xD9\x4\xFFFF\x1\xDA\x16\xFFFF\x1\xD8",
				"\x1\xB1\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2",
				"\x1\xB1\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2",
				"\x1\xEE\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xEF",
				"\x1\xDD\x25\xFFFF\x1\xDC",
				"\x1\xB4\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xB5",
				"\x1\xDF\x25\xFFFF\x1\xDE",
				"\x1\xB6\x8\xFFFF\x1\x54\x5\xFFFF\x1\x53\xB\xFFFF\x1\xB7",
				"\x1\xE1\x25\xFFFF\x1\xE0",
				"\x1\xB8\x8\xFFFF\x1\x59\x5\xFFFF\x1\x58\xB\xFFFF\x1\xB9",
				"\x1\xE3\x25\xFFFF\x1\xE2",
				"\x1\xBA\x8\xFFFF\x1\x5E\x5\xFFFF\x1\x5D\xB\xFFFF\x1\xBB",
				"\x1\xE5\x25\xFFFF\x1\xE4",
				"\x1\xBC\x8\xFFFF\x1\x63\x5\xFFFF\x1\x62\xB\xFFFF\x1\xBD",
				"\x1\xE6\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xE7",
				"\x1\xF1\x25\xFFFF\x1\xF0",
				"\x1\xE8\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xE9",
				"\x1\xF3\x25\xFFFF\x1\xF2",
				"\x1\xEA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xEB",
				"\x1\xF5\x25\xFFFF\x1\xF4",
				"\x1\xEC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xED",
				"\x1\xF7\x25\xFFFF\x1\xF6",
				"\x1\xEE\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xEF",
				"\x1\xF9\x25\xFFFF\x1\xF8",
				"\x1\xF1\x25\xFFFF\x1\xF0",
				"\x1\xE6\x8\xFFFF\x1\x9F\x5\xFFFF\x1\x9E\xB\xFFFF\x1\xE7",
				"\x1\xF3\x25\xFFFF\x1\xF2",
				"\x1\xE8\x8\xFFFF\x1\xA4\x5\xFFFF\x1\xA3\xB\xFFFF\x1\xE9",
				"\x1\xF5\x25\xFFFF\x1\xF4",
				"\x1\xEA\x8\xFFFF\x1\xA9\x5\xFFFF\x1\xA8\xB\xFFFF\x1\xEB",
				"\x1\xF7\x25\xFFFF\x1\xF6",
				"\x1\xEC\x8\xFFFF\x1\xAE\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xED",
				"\x1\xF9\x25\xFFFF\x1\xF8",
				"\x1\xEE\x8\xFFFF\x1\xB3\x5\xFFFF\x1\xB2\xB\xFFFF\x1\xEF"
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x4\xFFFF";
		private const string DFA10_eofS =
			"\x4\xFFFF";
		private const string DFA10_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA10_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA10_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA10_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "()* loopback of 240:27: ( ( WS )* ',' ( WS )* attribute_args )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x4\xFFFF";
		private const string DFA13_eofS =
			"\x4\xFFFF";
		private const string DFA13_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA13_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA13_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "244:10: ( ( WS )* attribute_args_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x4\xFFFF";
		private const string DFA15_eofS =
			"\x4\xFFFF";
		private const string DFA15_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA15_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA15_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA15_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "245:12: ( ( WS )* attribute_args_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x4\xFFFF";
		private const string DFA17_eofS =
			"\x4\xFFFF";
		private const string DFA17_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA17_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA17_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA17_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "246:13: ( ( WS )* attribute_args_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x4\xFFFF";
		private const string DFA19_eofS =
			"\x4\xFFFF";
		private const string DFA19_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA19_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA19_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "247:13: ( ( WS )* attribute_args_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x4\xFFFF";
		private const string DFA21_eofS =
			"\x4\xFFFF";
		private const string DFA21_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA21_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA21_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA21_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x6\xFFFF\x1\x3\x20\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "248:14: ( ( WS )* attribute_args_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x4\xFFFF";
		private const string DFA26_eofS =
			"\x4\xFFFF";
		private const string DFA26_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA26_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA26_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA26_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "()* loopback of 252:28: ( ( WS )* ',' ( WS )* attribute_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA46 : DFA
	{
		private const string DFA46_eotS =
			"\x4\xFFFF";
		private const string DFA46_eofS =
			"\x4\xFFFF";
		private const string DFA46_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA46_maxS =
			"\x2\x71\x2\xFFFF";
		private const string DFA46_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA46_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA46_transitionS =
			{
				"\x1\x1\x19\xFFFF\x1\x2\x1\xFFFF\x1\x3",
				"\x1\x1\x19\xFFFF\x1\x2\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
		private static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
		private static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
		private static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
		private static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
		private static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
		private static readonly short[][] DFA46_transition;

		static DFA46()
		{
			int numStates = DFA46_transitionS.Length;
			DFA46_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA46_transition[i] = DFA.UnpackEncodedString(DFA46_transitionS[i]);
			}
		}

		public DFA46( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}

		public override string Description { get { return "256:42: ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( WS )* ( where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( where_expr )+ ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA40 : DFA
	{
		private const string DFA40_eotS =
			"\x5\xFFFF";
		private const string DFA40_eofS =
			"\x5\xFFFF";
		private const string DFA40_minS =
			"\x2\x38\x3\xFFFF";
		private const string DFA40_maxS =
			"\x2\x79\x3\xFFFF";
		private const string DFA40_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA40_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA40_transitionS =
			{
				"\x1\x4\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x3\x13\xFFFF\x1\x2\x7\xFFFF\x1\x2",
				"\x1\x4\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x3\x13\xFFFF\x1\x2\x7\xFFFF\x1\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA40_eot = DFA.UnpackEncodedString(DFA40_eotS);
		private static readonly short[] DFA40_eof = DFA.UnpackEncodedString(DFA40_eofS);
		private static readonly char[] DFA40_min = DFA.UnpackEncodedStringToUnsignedChars(DFA40_minS);
		private static readonly char[] DFA40_max = DFA.UnpackEncodedStringToUnsignedChars(DFA40_maxS);
		private static readonly short[] DFA40_accept = DFA.UnpackEncodedString(DFA40_acceptS);
		private static readonly short[] DFA40_special = DFA.UnpackEncodedString(DFA40_specialS);
		private static readonly short[][] DFA40_transition;

		static DFA40()
		{
			int numStates = DFA40_transitionS.Length;
			DFA40_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA40_transition[i] = DFA.UnpackEncodedString(DFA40_transitionS[i]);
			}
		}

		public DFA40( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 40;
			this.eot = DFA40_eot;
			this.eof = DFA40_eof;
			this.min = DFA40_min;
			this.max = DFA40_max;
			this.accept = DFA40_accept;
			this.special = DFA40_special;
			this.transition = DFA40_transition;
		}

		public override string Description { get { return "256:66: ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA45 : DFA
	{
		private const string DFA45_eotS =
			"\x4\xFFFF";
		private const string DFA45_eofS =
			"\x4\xFFFF";
		private const string DFA45_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA45_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA45_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA45_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA45_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA45_eot = DFA.UnpackEncodedString(DFA45_eotS);
		private static readonly short[] DFA45_eof = DFA.UnpackEncodedString(DFA45_eofS);
		private static readonly char[] DFA45_min = DFA.UnpackEncodedStringToUnsignedChars(DFA45_minS);
		private static readonly char[] DFA45_max = DFA.UnpackEncodedStringToUnsignedChars(DFA45_maxS);
		private static readonly short[] DFA45_accept = DFA.UnpackEncodedString(DFA45_acceptS);
		private static readonly short[] DFA45_special = DFA.UnpackEncodedString(DFA45_specialS);
		private static readonly short[][] DFA45_transition;

		static DFA45()
		{
			int numStates = DFA45_transitionS.Length;
			DFA45_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA45_transition[i] = DFA.UnpackEncodedString(DFA45_transitionS[i]);
			}
		}

		public DFA45( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 45;
			this.eot = DFA45_eot;
			this.eof = DFA45_eof;
			this.min = DFA45_min;
			this.max = DFA45_max;
			this.accept = DFA45_accept;
			this.special = DFA45_special;
			this.transition = DFA45_transition;
		}

		public override string Description { get { return "()* loopback of 260:45: ( ( WS )* ',' ( WS )* where_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x4\xFFFF";
		private const string DFA49_eofS =
			"\x4\xFFFF";
		private const string DFA49_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA49_maxS =
			"\x2\x9F\x2\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA49_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x3\x8\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x49\xFFFF\x1\x3",
				"\x1\x3\x8\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x49\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "()* loopback of 265:23: ( ( WS )* stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA56 : DFA
	{
		private const string DFA56_eotS =
			"\x4\xFFFF";
		private const string DFA56_eofS =
			"\x4\xFFFF";
		private const string DFA56_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA56_maxS =
			"\x2\x55\x2\xFFFF";
		private const string DFA56_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA56_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA56_transitionS =
			{
				"\x1\x3\x5\xFFFF\x1\x2\x16\xFFFF\x1\x1",
				"\x1\x3\x5\xFFFF\x1\x2\x16\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA56_eot = DFA.UnpackEncodedString(DFA56_eotS);
		private static readonly short[] DFA56_eof = DFA.UnpackEncodedString(DFA56_eofS);
		private static readonly char[] DFA56_min = DFA.UnpackEncodedStringToUnsignedChars(DFA56_minS);
		private static readonly char[] DFA56_max = DFA.UnpackEncodedStringToUnsignedChars(DFA56_maxS);
		private static readonly short[] DFA56_accept = DFA.UnpackEncodedString(DFA56_acceptS);
		private static readonly short[] DFA56_special = DFA.UnpackEncodedString(DFA56_specialS);
		private static readonly short[][] DFA56_transition;

		static DFA56()
		{
			int numStates = DFA56_transitionS.Length;
			DFA56_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA56_transition[i] = DFA.UnpackEncodedString(DFA56_transitionS[i]);
			}
		}

		public DFA56( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 56;
			this.eot = DFA56_eot;
			this.eof = DFA56_eof;
			this.min = DFA56_min;
			this.max = DFA56_max;
			this.accept = DFA56_accept;
			this.special = DFA56_special;
			this.transition = DFA56_transition;
		}

		public override string Description { get { return "273:24: ( ( WS )* STRING )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\x5\xFFFF";
		private const string DFA63_eofS =
			"\x2\xFFFF\x1\x4\x2\xFFFF";
		private const string DFA63_minS =
			"\x2\x38\x1\x8\x2\xFFFF";
		private const string DFA63_maxS =
			"\x2\x55\x1\xBA\x2\xFFFF";
		private const string DFA63_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2";
		private const string DFA63_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x2\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x6\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x2\xFFFF\x1"+
				"\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x7\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "273:38: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( WS )* ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x4\xFFFF";
		private const string DFA71_eofS =
			"\x4\xFFFF";
		private const string DFA71_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA71_maxS =
			"\x2\x55\x2\xFFFF";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA71_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1C\xFFFF\x1\x1",
				"\x1\x2\x8\xFFFF\x1\x3\x1C\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "277:40: ( ( WS )* ident ( ( WS )* '|' ( WS )* ident )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\x4\xFFFF";
		private const string DFA70_eofS =
			"\x4\xFFFF";
		private const string DFA70_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA70_maxS =
			"\x2\xB6\x2\xFFFF";
		private const string DFA70_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA70_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x60\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x60\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "()* loopback of 277:51: ( ( WS )* '|' ( WS )* ident )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA77 : DFA
	{
		private const string DFA77_eotS =
			"\x5\xFFFF";
		private const string DFA77_eofS =
			"\x2\xFFFF\x1\x4\x2\xFFFF";
		private const string DFA77_minS =
			"\x2\x38\x1\x8\x2\xFFFF";
		private const string DFA77_maxS =
			"\x2\x55\x1\xBA\x2\xFFFF";
		private const string DFA77_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2";
		private const string DFA77_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA77_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x2\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x6\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x2\xFFFF\x1"+
				"\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x7\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
		private static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
		private static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
		private static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
		private static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
		private static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
		private static readonly short[][] DFA77_transition;

		static DFA77()
		{
			int numStates = DFA77_transitionS.Length;
			DFA77_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA77_transition[i] = DFA.UnpackEncodedString(DFA77_transitionS[i]);
			}
		}

		public DFA77( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 77;
			this.eot = DFA77_eot;
			this.eof = DFA77_eof;
			this.min = DFA77_min;
			this.max = DFA77_max;
			this.accept = DFA77_accept;
			this.special = DFA77_special;
			this.transition = DFA77_transition;
		}

		public override string Description { get { return "281:37: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x4\xFFFF";
		private const string DFA81_eofS =
			"\x4\xFFFF";
		private const string DFA81_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA81_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA81_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA81_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "285:8: ( ( WS )* func_args ( WS )* ')' -> func_args | ( WS )* ')' -> ^( Func_Args ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA92 : DFA
	{
		private const string DFA92_eotS =
			"\x4\xFFFF";
		private const string DFA92_eofS =
			"\x4\xFFFF";
		private const string DFA92_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA92_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA92_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA92_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA92_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x19\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x19\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA92_eot = DFA.UnpackEncodedString(DFA92_eotS);
		private static readonly short[] DFA92_eof = DFA.UnpackEncodedString(DFA92_eofS);
		private static readonly char[] DFA92_min = DFA.UnpackEncodedStringToUnsignedChars(DFA92_minS);
		private static readonly char[] DFA92_max = DFA.UnpackEncodedStringToUnsignedChars(DFA92_maxS);
		private static readonly short[] DFA92_accept = DFA.UnpackEncodedString(DFA92_acceptS);
		private static readonly short[] DFA92_special = DFA.UnpackEncodedString(DFA92_specialS);
		private static readonly short[][] DFA92_transition;

		static DFA92()
		{
			int numStates = DFA92_transitionS.Length;
			DFA92_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA92_transition[i] = DFA.UnpackEncodedString(DFA92_transitionS[i]);
			}
		}

		public DFA92( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 92;
			this.eot = DFA92_eot;
			this.eof = DFA92_eof;
			this.min = DFA92_min;
			this.max = DFA92_max;
			this.accept = DFA92_accept;
			this.special = DFA92_special;
			this.transition = DFA92_transition;
		}

		public override string Description { get { return "291:73: ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA91 : DFA
	{
		private const string DFA91_eotS =
			"\x4\xFFFF";
		private const string DFA91_eofS =
			"\x4\xFFFF";
		private const string DFA91_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA91_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA91_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA91_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA91_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA91_eot = DFA.UnpackEncodedString(DFA91_eotS);
		private static readonly short[] DFA91_eof = DFA.UnpackEncodedString(DFA91_eofS);
		private static readonly char[] DFA91_min = DFA.UnpackEncodedStringToUnsignedChars(DFA91_minS);
		private static readonly char[] DFA91_max = DFA.UnpackEncodedStringToUnsignedChars(DFA91_maxS);
		private static readonly short[] DFA91_accept = DFA.UnpackEncodedString(DFA91_acceptS);
		private static readonly short[] DFA91_special = DFA.UnpackEncodedString(DFA91_specialS);
		private static readonly short[][] DFA91_transition;

		static DFA91()
		{
			int numStates = DFA91_transitionS.Length;
			DFA91_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA91_transition[i] = DFA.UnpackEncodedString(DFA91_transitionS[i]);
			}
		}

		public DFA91( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 91;
			this.eot = DFA91_eot;
			this.eof = DFA91_eof;
			this.min = DFA91_min;
			this.max = DFA91_max;
			this.accept = DFA91_accept;
			this.special = DFA91_special;
			this.transition = DFA91_transition;
		}

		public override string Description { get { return "()* loopback of 291:92: ( ( WS )* ',' ( WS )* ident )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\x5\xFFFF";
		private const string DFA96_eofS =
			"\x2\xFFFF\x1\x4\x2\xFFFF";
		private const string DFA96_minS =
			"\x2\x38\x1\x8\x2\xFFFF";
		private const string DFA96_maxS =
			"\x2\x55\x1\xBA\x2\xFFFF";
		private const string DFA96_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2";
		private const string DFA96_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x2\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x6\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x2\xFFFF\x1"+
				"\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x7\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "291:115: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x4\xFFFF";
		private const string DFA101_eofS =
			"\x4\xFFFF";
		private const string DFA101_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA101_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA101_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA101_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x2\x11\xFFFF\x1\x3",
				"\x1\x3\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x2\x11\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "292:63: ( ( WS )* class_args )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA107 : DFA
	{
		private const string DFA107_eotS =
			"\x4\xFFFF";
		private const string DFA107_eofS =
			"\x4\xFFFF";
		private const string DFA107_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA107_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA107_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA107_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA107_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x19\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x19\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
		private static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
		private static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
		private static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
		private static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
		private static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
		private static readonly short[][] DFA107_transition;

		static DFA107()
		{
			int numStates = DFA107_transitionS.Length;
			DFA107_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA107_transition[i] = DFA.UnpackEncodedString(DFA107_transitionS[i]);
			}
		}

		public DFA107( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 107;
			this.eot = DFA107_eot;
			this.eof = DFA107_eof;
			this.min = DFA107_min;
			this.max = DFA107_max;
			this.accept = DFA107_accept;
			this.special = DFA107_special;
			this.transition = DFA107_transition;
		}

		public override string Description { get { return "292:81: ( ( WS )* ':' ( WS )* ident ( ( WS )* ',' ( WS )* ident )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA106 : DFA
	{
		private const string DFA106_eotS =
			"\x4\xFFFF";
		private const string DFA106_eofS =
			"\x4\xFFFF";
		private const string DFA106_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA106_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA106_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA106_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA106_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
		private static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
		private static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
		private static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
		private static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
		private static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
		private static readonly short[][] DFA106_transition;

		static DFA106()
		{
			int numStates = DFA106_transitionS.Length;
			DFA106_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA106_transition[i] = DFA.UnpackEncodedString(DFA106_transitionS[i]);
			}
		}

		public DFA106( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}

		public override string Description { get { return "()* loopback of 292:100: ( ( WS )* ',' ( WS )* ident )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA111 : DFA
	{
		private const string DFA111_eotS =
			"\x5\xFFFF";
		private const string DFA111_eofS =
			"\x2\xFFFF\x1\x4\x2\xFFFF";
		private const string DFA111_minS =
			"\x2\x38\x1\x8\x2\xFFFF";
		private const string DFA111_maxS =
			"\x2\x55\x1\xBA\x2\xFFFF";
		private const string DFA111_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2";
		private const string DFA111_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA111_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x2\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x6\xFFFF\x1\x4\x1\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x2\xFFFF\x1"+
				"\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x7\xFFFF\x1\x4",
				"",
				""
			};

		private static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
		private static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
		private static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
		private static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
		private static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
		private static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
		private static readonly short[][] DFA111_transition;

		static DFA111()
		{
			int numStates = DFA111_transitionS.Length;
			DFA111_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA111_transition[i] = DFA.UnpackEncodedString(DFA111_transitionS[i]);
			}
		}

		public DFA111( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 111;
			this.eot = DFA111_eot;
			this.eof = DFA111_eof;
			this.min = DFA111_min;
			this.max = DFA111_max;
			this.accept = DFA111_accept;
			this.special = DFA111_special;
			this.transition = DFA111_transition;
		}

		public override string Description { get { return "292:123: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA115 : DFA
	{
		private const string DFA115_eotS =
			"\x4\xFFFF";
		private const string DFA115_eofS =
			"\x4\xFFFF";
		private const string DFA115_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA115_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA115_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA115_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA115_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA115_eot = DFA.UnpackEncodedString(DFA115_eotS);
		private static readonly short[] DFA115_eof = DFA.UnpackEncodedString(DFA115_eofS);
		private static readonly char[] DFA115_min = DFA.UnpackEncodedStringToUnsignedChars(DFA115_minS);
		private static readonly char[] DFA115_max = DFA.UnpackEncodedStringToUnsignedChars(DFA115_maxS);
		private static readonly short[] DFA115_accept = DFA.UnpackEncodedString(DFA115_acceptS);
		private static readonly short[] DFA115_special = DFA.UnpackEncodedString(DFA115_specialS);
		private static readonly short[][] DFA115_transition;

		static DFA115()
		{
			int numStates = DFA115_transitionS.Length;
			DFA115_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA115_transition[i] = DFA.UnpackEncodedString(DFA115_transitionS[i]);
			}
		}

		public DFA115( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 115;
			this.eot = DFA115_eot;
			this.eof = DFA115_eof;
			this.min = DFA115_min;
			this.max = DFA115_max;
			this.accept = DFA115_accept;
			this.special = DFA115_special;
			this.transition = DFA115_transition;
		}

		public override string Description { get { return "()* loopback of 297:14: ( ( WS )* ',' ( WS )* type_name )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA120 : DFA
	{
		private const string DFA120_eotS =
			"\x4\xFFFF";
		private const string DFA120_eofS =
			"\x4\xFFFF";
		private const string DFA120_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA120_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA120_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA120_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA120_transitionS =
			{
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x7\xFFFF\x2\x3"+
				"\x5\xFFFF\x1\x3\x4\xFFFF\x1\x2\x7\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2"+
				"\x3\x3\xFFFF\x2\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x7\xFFFF\x2\x3"+
				"\x5\xFFFF\x1\x3\x4\xFFFF\x1\x2\x7\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2"+
				"\x3\x3\xFFFF\x2\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
		private static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
		private static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
		private static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
		private static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
		private static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
		private static readonly short[][] DFA120_transition;

		static DFA120()
		{
			int numStates = DFA120_transitionS.Length;
			DFA120_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA120_transition[i] = DFA.UnpackEncodedString(DFA120_transitionS[i]);
			}
		}

		public DFA120( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 120;
			this.eot = DFA120_eot;
			this.eof = DFA120_eof;
			this.min = DFA120_min;
			this.max = DFA120_max;
			this.accept = DFA120_accept;
			this.special = DFA120_special;
			this.transition = DFA120_transition;
		}

		public override string Description { get { return "301:16: ( ( WS )* '->' ( WS )* ( type_name | '(' ( WS )* ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA119 : DFA
	{
		private const string DFA119_eotS =
			"\x7\xFFFF";
		private const string DFA119_eofS =
			"\x7\xFFFF";
		private const string DFA119_minS =
			"\x1\x2F\x1\xFFFF\x2\x2F\x2\x8\x1\xFFFF";
		private const string DFA119_maxS =
			"\x1\xAA\x1\xFFFF\x2\xAA\x2\xBA\x1\xFFFF";
		private const string DFA119_acceptS =
			"\x1\xFFFF\x1\x1\x4\xFFFF\x1\x2";
		private const string DFA119_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA119_transitionS =
			{
				"\x1\x1\x2D\xFFFF\x1\x2\x30\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x2\xFFFF\x1\x1",
				"",
				"\x1\x1\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\x4\x2F\xFFFF\x1\x1\xD\xFFFF"+
				"\x1\x1\x9\xFFFF\x2\x1\x2\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\x4\x2F\xFFFF\x1\x1\xD\xFFFF"+
				"\x1\x1\x9\xFFFF\x2\x1\x2\xFFFF\x1\x1",
				"\x1\x6\x26\xFFFF\x2\x6\x7\xFFFF\x1\x6\x1C\xFFFF\x1\x5\x7\xFFFF\x2\x6"+
				"\x5\xFFFF\x1\x6\x4\xFFFF\x1\x1\x7\xFFFF\x2\x6\x6\xFFFF\x1\x6\x2\xFFFF"+
				"\x2\x6\x7\xFFFF\x1\x6\x4\xFFFF\x1\x6\x5\xFFFF\x1\x6\x4\xFFFF\x2\x6\x1"+
				"\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1\xFFFF\x2\x6\x2\xFFFF\x2"+
				"\x6\x3\xFFFF\x2\x6\x4\xFFFF\x1\x6",
				"\x1\x6\x26\xFFFF\x2\x6\x7\xFFFF\x1\x6\x1C\xFFFF\x1\x5\x7\xFFFF\x2\x6"+
				"\x5\xFFFF\x1\x6\x4\xFFFF\x1\x1\x7\xFFFF\x2\x6\x6\xFFFF\x1\x6\x2\xFFFF"+
				"\x2\x6\x7\xFFFF\x1\x6\x4\xFFFF\x1\x6\x5\xFFFF\x1\x6\x4\xFFFF\x2\x6\x1"+
				"\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1\xFFFF\x2\x6\x2\xFFFF\x2"+
				"\x6\x3\xFFFF\x2\x6\x4\xFFFF\x1\x6",
				""
			};

		private static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
		private static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
		private static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
		private static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
		private static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
		private static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
		private static readonly short[][] DFA119_transition;

		static DFA119()
		{
			int numStates = DFA119_transitionS.Length;
			DFA119_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA119_transition[i] = DFA.UnpackEncodedString(DFA119_transitionS[i]);
			}
		}

		public DFA119( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 119;
			this.eot = DFA119_eot;
			this.eof = DFA119_eof;
			this.min = DFA119_min;
			this.max = DFA119_max;
			this.accept = DFA119_accept;
			this.special = DFA119_special;
			this.transition = DFA119_transition;
		}

		public override string Description { get { return "301:31: ( type_name | '(' ( WS )* ')' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA122 : DFA
	{
		private const string DFA122_eotS =
			"\x4\xFFFF";
		private const string DFA122_eofS =
			"\x4\xFFFF";
		private const string DFA122_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA122_maxS =
			"\x2\xAA\x2\xFFFF";
		private const string DFA122_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA122_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA122_transitionS =
			{
				"\x1\x2\x25\xFFFF\x1\x1\x7\xFFFF\x1\x2\x1\x3\x2F\xFFFF\x1\x2\xD\xFFFF"+
				"\x1\x2\x9\xFFFF\x2\x2\x2\xFFFF\x1\x2",
				"\x1\x2\x25\xFFFF\x1\x1\x7\xFFFF\x1\x2\x1\x3\x2F\xFFFF\x1\x2\xD\xFFFF"+
				"\x1\x2\x9\xFFFF\x2\x2\x2\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA122_eot = DFA.UnpackEncodedString(DFA122_eotS);
		private static readonly short[] DFA122_eof = DFA.UnpackEncodedString(DFA122_eofS);
		private static readonly char[] DFA122_min = DFA.UnpackEncodedStringToUnsignedChars(DFA122_minS);
		private static readonly char[] DFA122_max = DFA.UnpackEncodedStringToUnsignedChars(DFA122_maxS);
		private static readonly short[] DFA122_accept = DFA.UnpackEncodedString(DFA122_acceptS);
		private static readonly short[] DFA122_special = DFA.UnpackEncodedString(DFA122_specialS);
		private static readonly short[][] DFA122_transition;

		static DFA122()
		{
			int numStates = DFA122_transitionS.Length;
			DFA122_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA122_transition[i] = DFA.UnpackEncodedString(DFA122_transitionS[i]);
			}
		}

		public DFA122( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 122;
			this.eot = DFA122_eot;
			this.eof = DFA122_eof;
			this.min = DFA122_min;
			this.max = DFA122_max;
			this.accept = DFA122_accept;
			this.special = DFA122_special;
			this.transition = DFA122_transition;
		}

		public override string Description { get { return "304:8: ( ( WS )* type_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA127 : DFA
	{
		private const string DFA127_eotS =
			"\x7\xFFFF";
		private const string DFA127_eofS =
			"\x7\xFFFF";
		private const string DFA127_minS =
			"\x1\x2F\x1\xFFFF\x2\x2F\x2\x8\x1\xFFFF";
		private const string DFA127_maxS =
			"\x1\xAA\x1\xFFFF\x2\xAA\x2\xBA\x1\xFFFF";
		private const string DFA127_acceptS =
			"\x1\xFFFF\x1\x1\x4\xFFFF\x1\x2";
		private const string DFA127_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA127_transitionS =
			{
				"\x1\x1\x2D\xFFFF\x1\x2\x30\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x2\xFFFF\x1\x1",
				"",
				"\x1\x1\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\x4\x2F\xFFFF\x1\x1\xD\xFFFF"+
				"\x1\x1\x9\xFFFF\x2\x1\x2\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\x4\x2F\xFFFF\x1\x1\xD\xFFFF"+
				"\x1\x1\x9\xFFFF\x2\x1\x2\xFFFF\x1\x1",
				"\x1\x6\x26\xFFFF\x2\x6\x7\xFFFF\x1\x6\x1C\xFFFF\x1\x5\x7\xFFFF\x2\x6"+
				"\x5\xFFFF\x1\x6\x4\xFFFF\x1\x1\x7\xFFFF\x2\x6\x6\xFFFF\x1\x6\x2\xFFFF"+
				"\x2\x6\x7\xFFFF\x1\x6\x4\xFFFF\x1\x6\x5\xFFFF\x1\x6\x4\xFFFF\x2\x6\x1"+
				"\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1\xFFFF\x2\x6\x2\xFFFF\x2"+
				"\x6\x3\xFFFF\x2\x6\x4\xFFFF\x1\x6",
				"\x1\x6\x26\xFFFF\x2\x6\x7\xFFFF\x1\x6\x1C\xFFFF\x1\x5\x7\xFFFF\x2\x6"+
				"\x5\xFFFF\x1\x6\x4\xFFFF\x1\x1\x7\xFFFF\x2\x6\x6\xFFFF\x1\x6\x2\xFFFF"+
				"\x2\x6\x7\xFFFF\x1\x6\x4\xFFFF\x1\x6\x5\xFFFF\x1\x6\x4\xFFFF\x2\x6\x1"+
				"\xFFFF\x1\x6\xC\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1\xFFFF\x2\x6\x2\xFFFF\x2"+
				"\x6\x3\xFFFF\x2\x6\x4\xFFFF\x1\x6",
				""
			};

		private static readonly short[] DFA127_eot = DFA.UnpackEncodedString(DFA127_eotS);
		private static readonly short[] DFA127_eof = DFA.UnpackEncodedString(DFA127_eofS);
		private static readonly char[] DFA127_min = DFA.UnpackEncodedStringToUnsignedChars(DFA127_minS);
		private static readonly char[] DFA127_max = DFA.UnpackEncodedStringToUnsignedChars(DFA127_maxS);
		private static readonly short[] DFA127_accept = DFA.UnpackEncodedString(DFA127_acceptS);
		private static readonly short[] DFA127_special = DFA.UnpackEncodedString(DFA127_specialS);
		private static readonly short[][] DFA127_transition;

		static DFA127()
		{
			int numStates = DFA127_transitionS.Length;
			DFA127_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA127_transition[i] = DFA.UnpackEncodedString(DFA127_transitionS[i]);
			}
		}

		public DFA127( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 127;
			this.eot = DFA127_eot;
			this.eof = DFA127_eof;
			this.min = DFA127_min;
			this.max = DFA127_max;
			this.accept = DFA127_accept;
			this.special = DFA127_special;
			this.transition = DFA127_transition;
		}

		public override string Description { get { return "304:46: ( type_name | '(' ( WS )* ')' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA140 : DFA
	{
		private const string DFA140_eotS =
			"\x5\xFFFF";
		private const string DFA140_eofS =
			"\x5\xFFFF";
		private const string DFA140_minS =
			"\x2\x8\x3\xFFFF";
		private const string DFA140_maxS =
			"\x2\xBA\x3\xFFFF";
		private const string DFA140_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA140_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA140_transitionS =
			{
				"\x1\x4\x26\xFFFF\x2\x4\x7\xFFFF\x1\x4\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x2"+
				"\x1\xFFFF\x2\x4\x5\xFFFF\x1\x4\x4\xFFFF\x1\x4\x7\xFFFF\x2\x4\x6\xFFFF"+
				"\x1\x4\x2\xFFFF\x2\x4\x6\xFFFF\x1\x3\x1\x4\x4\xFFFF\x1\x4\x5\xFFFF\x1"+
				"\x4\x4\xFFFF\x2\x4\x1\xFFFF\x1\x4\xC\xFFFF\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF"+
				"\x2\x4\x2\xFFFF\x2\x4\x3\xFFFF\x2\x4\x4\xFFFF\x1\x4",
				"\x1\x4\x26\xFFFF\x2\x4\x7\xFFFF\x1\x4\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x2"+
				"\x1\xFFFF\x2\x4\x5\xFFFF\x1\x4\x4\xFFFF\x1\x4\x7\xFFFF\x2\x4\x6\xFFFF"+
				"\x1\x4\x2\xFFFF\x2\x4\x6\xFFFF\x1\x3\x1\x4\x4\xFFFF\x1\x4\x5\xFFFF\x1"+
				"\x4\x4\xFFFF\x2\x4\x1\xFFFF\x1\x4\xC\xFFFF\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF"+
				"\x2\x4\x2\xFFFF\x2\x4\x3\xFFFF\x2\x4\x4\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA140_eot = DFA.UnpackEncodedString(DFA140_eotS);
		private static readonly short[] DFA140_eof = DFA.UnpackEncodedString(DFA140_eofS);
		private static readonly char[] DFA140_min = DFA.UnpackEncodedStringToUnsignedChars(DFA140_minS);
		private static readonly char[] DFA140_max = DFA.UnpackEncodedStringToUnsignedChars(DFA140_maxS);
		private static readonly short[] DFA140_accept = DFA.UnpackEncodedString(DFA140_acceptS);
		private static readonly short[] DFA140_special = DFA.UnpackEncodedString(DFA140_specialS);
		private static readonly short[][] DFA140_transition;

		static DFA140()
		{
			int numStates = DFA140_transitionS.Length;
			DFA140_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA140_transition[i] = DFA.UnpackEncodedString(DFA140_transitionS[i]);
			}
		}

		public DFA140( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 140;
			this.eot = DFA140_eot;
			this.eof = DFA140_eof;
			this.min = DFA140_min;
			this.max = DFA140_max;
			this.accept = DFA140_accept;
			this.special = DFA140_special;
			this.transition = DFA140_transition;
		}

		public override string Description { get { return "308:14: ( ( WS )* '&' -> ^( Type_Ref type_star ) | ( WS )* '[' ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA139 : DFA
	{
		private const string DFA139_eotS =
			"\x4\xFFFF";
		private const string DFA139_eofS =
			"\x4\xFFFF";
		private const string DFA139_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA139_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA139_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA139_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA139_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2"+
				"\x2\x1C\xFFFF\x2\x2\x1\x3\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2"+
				"\x2\x1C\xFFFF\x2\x2\x1\x3\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA139_eot = DFA.UnpackEncodedString(DFA139_eotS);
		private static readonly short[] DFA139_eof = DFA.UnpackEncodedString(DFA139_eofS);
		private static readonly char[] DFA139_min = DFA.UnpackEncodedStringToUnsignedChars(DFA139_minS);
		private static readonly char[] DFA139_max = DFA.UnpackEncodedStringToUnsignedChars(DFA139_maxS);
		private static readonly short[] DFA139_accept = DFA.UnpackEncodedString(DFA139_acceptS);
		private static readonly short[] DFA139_special = DFA.UnpackEncodedString(DFA139_specialS);
		private static readonly short[][] DFA139_transition;

		static DFA139()
		{
			int numStates = DFA139_transitionS.Length;
			DFA139_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA139_transition[i] = DFA.UnpackEncodedString(DFA139_transitionS[i]);
			}
		}

		public DFA139( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 139;
			this.eot = DFA139_eot;
			this.eof = DFA139_eof;
			this.min = DFA139_min;
			this.max = DFA139_max;
			this.accept = DFA139_accept;
			this.special = DFA139_special;
			this.transition = DFA139_transition;
		}

		public override string Description { get { return "309:15: ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ( WS )* ',' )* ( WS )* ']' -> ^( Type_Array type_star ( expr )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA134 : DFA
	{
		private const string DFA134_eotS =
			"\x4\xFFFF";
		private const string DFA134_eofS =
			"\x4\xFFFF";
		private const string DFA134_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA134_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA134_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA134_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA134_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA134_eot = DFA.UnpackEncodedString(DFA134_eotS);
		private static readonly short[] DFA134_eof = DFA.UnpackEncodedString(DFA134_eofS);
		private static readonly char[] DFA134_min = DFA.UnpackEncodedStringToUnsignedChars(DFA134_minS);
		private static readonly char[] DFA134_max = DFA.UnpackEncodedStringToUnsignedChars(DFA134_maxS);
		private static readonly short[] DFA134_accept = DFA.UnpackEncodedString(DFA134_acceptS);
		private static readonly short[] DFA134_special = DFA.UnpackEncodedString(DFA134_specialS);
		private static readonly short[][] DFA134_transition;

		static DFA134()
		{
			int numStates = DFA134_transitionS.Length;
			DFA134_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA134_transition[i] = DFA.UnpackEncodedString(DFA134_transitionS[i]);
			}
		}

		public DFA134( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 134;
			this.eot = DFA134_eot;
			this.eof = DFA134_eof;
			this.min = DFA134_min;
			this.max = DFA134_max;
			this.accept = DFA134_accept;
			this.special = DFA134_special;
			this.transition = DFA134_transition;
		}

		public override string Description { get { return "()* loopback of 309:26: ( ( WS )* ',' ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA137 : DFA
	{
		private const string DFA137_eotS =
			"\x4\xFFFF";
		private const string DFA137_eofS =
			"\x4\xFFFF";
		private const string DFA137_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA137_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA137_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA137_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA137_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA137_eot = DFA.UnpackEncodedString(DFA137_eotS);
		private static readonly short[] DFA137_eof = DFA.UnpackEncodedString(DFA137_eofS);
		private static readonly char[] DFA137_min = DFA.UnpackEncodedStringToUnsignedChars(DFA137_minS);
		private static readonly char[] DFA137_max = DFA.UnpackEncodedStringToUnsignedChars(DFA137_maxS);
		private static readonly short[] DFA137_accept = DFA.UnpackEncodedString(DFA137_acceptS);
		private static readonly short[] DFA137_special = DFA.UnpackEncodedString(DFA137_specialS);
		private static readonly short[][] DFA137_transition;

		static DFA137()
		{
			int numStates = DFA137_transitionS.Length;
			DFA137_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA137_transition[i] = DFA.UnpackEncodedString(DFA137_transitionS[i]);
			}
		}

		public DFA137( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 137;
			this.eot = DFA137_eot;
			this.eof = DFA137_eof;
			this.min = DFA137_min;
			this.max = DFA137_max;
			this.accept = DFA137_accept;
			this.special = DFA137_special;
			this.transition = DFA137_transition;
		}

		public override string Description { get { return "()* loopback of 310:17: ( ( WS )* ',' )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA142 : DFA
	{
		private const string DFA142_eotS =
			"\x4\xFFFF";
		private const string DFA142_eofS =
			"\x4\xFFFF";
		private const string DFA142_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA142_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA142_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA142_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA142_transitionS =
			{
				"\x1\x1\x5\xFFFF\x1\x2\x1\xFFFF\x1\x3\x26\xFFFF\x1\x3",
				"\x1\x1\x5\xFFFF\x1\x2\x1\xFFFF\x1\x3\x26\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA142_eot = DFA.UnpackEncodedString(DFA142_eotS);
		private static readonly short[] DFA142_eof = DFA.UnpackEncodedString(DFA142_eofS);
		private static readonly char[] DFA142_min = DFA.UnpackEncodedStringToUnsignedChars(DFA142_minS);
		private static readonly char[] DFA142_max = DFA.UnpackEncodedStringToUnsignedChars(DFA142_maxS);
		private static readonly short[] DFA142_accept = DFA.UnpackEncodedString(DFA142_acceptS);
		private static readonly short[] DFA142_special = DFA.UnpackEncodedString(DFA142_specialS);
		private static readonly short[][] DFA142_transition;

		static DFA142()
		{
			int numStates = DFA142_transitionS.Length;
			DFA142_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA142_transition[i] = DFA.UnpackEncodedString(DFA142_transitionS[i]);
			}
		}

		public DFA142( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 142;
			this.eot = DFA142_eot;
			this.eof = DFA142_eof;
			this.min = DFA142_min;
			this.max = DFA142_max;
			this.accept = DFA142_accept;
			this.special = DFA142_special;
			this.transition = DFA142_transition;
		}

		public override string Description { get { return "317:14: ( ( WS )* '&' -> ^( Type_Ref type_star ) | -> type_star )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA145 : DFA
	{
		private const string DFA145_eotS =
			"\x4\xFFFF";
		private const string DFA145_eofS =
			"\x4\xFFFF";
		private const string DFA145_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA145_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA145_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA145_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA145_transitionS =
			{
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x2\x3\x1\x2\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x7\xFFFF\x2\x3\x6"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x2\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x2\x3\x1\x2\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x7\xFFFF\x2\x3\x6"+
				"\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x2\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1"+
				"\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA145_eot = DFA.UnpackEncodedString(DFA145_eotS);
		private static readonly short[] DFA145_eof = DFA.UnpackEncodedString(DFA145_eofS);
		private static readonly char[] DFA145_min = DFA.UnpackEncodedStringToUnsignedChars(DFA145_minS);
		private static readonly char[] DFA145_max = DFA.UnpackEncodedStringToUnsignedChars(DFA145_maxS);
		private static readonly short[] DFA145_accept = DFA.UnpackEncodedString(DFA145_acceptS);
		private static readonly short[] DFA145_special = DFA.UnpackEncodedString(DFA145_specialS);
		private static readonly short[][] DFA145_transition;

		static DFA145()
		{
			int numStates = DFA145_transitionS.Length;
			DFA145_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA145_transition[i] = DFA.UnpackEncodedString(DFA145_transitionS[i]);
			}
		}

		public DFA145( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 145;
			this.eot = DFA145_eot;
			this.eof = DFA145_eof;
			this.min = DFA145_min;
			this.max = DFA145_max;
			this.accept = DFA145_accept;
			this.special = DFA145_special;
			this.transition = DFA145_transition;
		}

		public override string Description { get { return "323:23: ( ( ( WS )* '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA144 : DFA
	{
		private const string DFA144_eotS =
			"\x4\xFFFF";
		private const string DFA144_eofS =
			"\x4\xFFFF";
		private const string DFA144_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA144_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA144_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA144_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA144_transitionS =
			{
				"\x1\x2\x26\xFFFF\x2\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x2"+
				"\x1\xFFFF\x2\x2\x1\x3\x4\xFFFF\x1\x2\x4\xFFFF\x1\x2\x7\xFFFF\x2\x2\x6"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x6\xFFFF\x2\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1"+
				"\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x26\xFFFF\x2\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x5\xFFFF\x1\x2"+
				"\x1\xFFFF\x2\x2\x1\x3\x4\xFFFF\x1\x2\x4\xFFFF\x1\x2\x7\xFFFF\x2\x2\x6"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x6\xFFFF\x2\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1"+
				"\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA144_eot = DFA.UnpackEncodedString(DFA144_eotS);
		private static readonly short[] DFA144_eof = DFA.UnpackEncodedString(DFA144_eofS);
		private static readonly char[] DFA144_min = DFA.UnpackEncodedStringToUnsignedChars(DFA144_minS);
		private static readonly char[] DFA144_max = DFA.UnpackEncodedStringToUnsignedChars(DFA144_maxS);
		private static readonly short[] DFA144_accept = DFA.UnpackEncodedString(DFA144_acceptS);
		private static readonly short[] DFA144_special = DFA.UnpackEncodedString(DFA144_specialS);
		private static readonly short[][] DFA144_transition;

		static DFA144()
		{
			int numStates = DFA144_transitionS.Length;
			DFA144_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA144_transition[i] = DFA.UnpackEncodedString(DFA144_transitionS[i]);
			}
		}

		public DFA144( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 144;
			this.eot = DFA144_eot;
			this.eof = DFA144_eof;
			this.min = DFA144_min;
			this.max = DFA144_max;
			this.accept = DFA144_accept;
			this.special = DFA144_special;
			this.transition = DFA144_transition;
		}

		public override string Description { get { return "()+ loopback of 323:25: ( ( WS )* '*' )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA150 : DFA
	{
		private const string DFA150_eotS =
			"\x4\xFFFF";
		private const string DFA150_eofS =
			"\x4\xFFFF";
		private const string DFA150_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA150_maxS =
			"\x2\xAA\x2\xFFFF";
		private const string DFA150_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA150_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA150_transitionS =
			{
				"\x1\x2\x25\xFFFF\x1\x1\x7\xFFFF\x1\x2\x1F\xFFFF\x1\x3\x10\xFFFF\x1\x2"+
				"\xD\xFFFF\x1\x2\x9\xFFFF\x2\x2\x2\xFFFF\x1\x2",
				"\x1\x2\x25\xFFFF\x1\x1\x7\xFFFF\x1\x2\x1F\xFFFF\x1\x3\x10\xFFFF\x1"+
				"\x2\xD\xFFFF\x1\x2\x9\xFFFF\x2\x2\x2\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA150_eot = DFA.UnpackEncodedString(DFA150_eotS);
		private static readonly short[] DFA150_eof = DFA.UnpackEncodedString(DFA150_eofS);
		private static readonly char[] DFA150_min = DFA.UnpackEncodedStringToUnsignedChars(DFA150_minS);
		private static readonly char[] DFA150_max = DFA.UnpackEncodedStringToUnsignedChars(DFA150_maxS);
		private static readonly short[] DFA150_accept = DFA.UnpackEncodedString(DFA150_acceptS);
		private static readonly short[] DFA150_special = DFA.UnpackEncodedString(DFA150_specialS);
		private static readonly short[][] DFA150_transition;

		static DFA150()
		{
			int numStates = DFA150_transitionS.Length;
			DFA150_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA150_transition[i] = DFA.UnpackEncodedString(DFA150_transitionS[i]);
			}
		}

		public DFA150( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 150;
			this.eot = DFA150_eot;
			this.eof = DFA150_eof;
			this.min = DFA150_min;
			this.max = DFA150_max;
			this.accept = DFA150_accept;
			this.special = DFA150_special;
			this.transition = DFA150_transition;
		}

		public override string Description { get { return "329:21: ( ( WS )* type_name ( ( WS )* ',' ( WS )* type_name )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA149 : DFA
	{
		private const string DFA149_eotS =
			"\x4\xFFFF";
		private const string DFA149_eofS =
			"\x4\xFFFF";
		private const string DFA149_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA149_maxS =
			"\x2\x7D\x2\xFFFF";
		private const string DFA149_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA149_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA149_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA149_eot = DFA.UnpackEncodedString(DFA149_eotS);
		private static readonly short[] DFA149_eof = DFA.UnpackEncodedString(DFA149_eofS);
		private static readonly char[] DFA149_min = DFA.UnpackEncodedStringToUnsignedChars(DFA149_minS);
		private static readonly char[] DFA149_max = DFA.UnpackEncodedStringToUnsignedChars(DFA149_maxS);
		private static readonly short[] DFA149_accept = DFA.UnpackEncodedString(DFA149_acceptS);
		private static readonly short[] DFA149_special = DFA.UnpackEncodedString(DFA149_specialS);
		private static readonly short[][] DFA149_transition;

		static DFA149()
		{
			int numStates = DFA149_transitionS.Length;
			DFA149_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA149_transition[i] = DFA.UnpackEncodedString(DFA149_transitionS[i]);
			}
		}

		public DFA149( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 149;
			this.eot = DFA149_eot;
			this.eof = DFA149_eof;
			this.min = DFA149_min;
			this.max = DFA149_max;
			this.accept = DFA149_accept;
			this.special = DFA149_special;
			this.transition = DFA149_transition;
		}

		public override string Description { get { return "()* loopback of 329:36: ( ( WS )* ',' ( WS )* type_name )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA165 : DFA
	{
		private const string DFA165_eotS =
			"\x4\xFFFF";
		private const string DFA165_eofS =
			"\x4\xFFFF";
		private const string DFA165_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA165_maxS =
			"\x2\x7D\x2\xFFFF";
		private const string DFA165_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA165_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA165_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA165_eot = DFA.UnpackEncodedString(DFA165_eotS);
		private static readonly short[] DFA165_eof = DFA.UnpackEncodedString(DFA165_eofS);
		private static readonly char[] DFA165_min = DFA.UnpackEncodedStringToUnsignedChars(DFA165_minS);
		private static readonly char[] DFA165_max = DFA.UnpackEncodedStringToUnsignedChars(DFA165_maxS);
		private static readonly short[] DFA165_accept = DFA.UnpackEncodedString(DFA165_acceptS);
		private static readonly short[] DFA165_special = DFA.UnpackEncodedString(DFA165_specialS);
		private static readonly short[][] DFA165_transition;

		static DFA165()
		{
			int numStates = DFA165_transitionS.Length;
			DFA165_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA165_transition[i] = DFA.UnpackEncodedString(DFA165_transitionS[i]);
			}
		}

		public DFA165( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 165;
			this.eot = DFA165_eot;
			this.eof = DFA165_eof;
			this.min = DFA165_min;
			this.max = DFA165_max;
			this.accept = DFA165_accept;
			this.special = DFA165_special;
			this.transition = DFA165_transition;
		}

		public override string Description { get { return "()* loopback of 339:14: ( ( WS )* ',' ( WS )* type_name )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA171 : DFA
	{
		private const string DFA171_eotS =
			"\x4\xFFFF";
		private const string DFA171_eofS =
			"\x4\xFFFF";
		private const string DFA171_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA171_maxS =
			"\x2\x7D\x2\xFFFF";
		private const string DFA171_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA171_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA171_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x18\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
		private static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
		private static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
		private static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
		private static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
		private static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
		private static readonly short[][] DFA171_transition;

		static DFA171()
		{
			int numStates = DFA171_transitionS.Length;
			DFA171_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA171_transition[i] = DFA.UnpackEncodedString(DFA171_transitionS[i]);
			}
		}

		public DFA171( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 171;
			this.eot = DFA171_eot;
			this.eof = DFA171_eof;
			this.min = DFA171_min;
			this.max = DFA171_max;
			this.accept = DFA171_accept;
			this.special = DFA171_special;
			this.transition = DFA171_transition;
		}

		public override string Description { get { return "()* loopback of 347:23: ( ( WS )* ',' ( WS )* type_ident )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA175 : DFA
	{
		private const string DFA175_eotS =
			"\x4\xFFFF";
		private const string DFA175_eofS =
			"\x4\xFFFF";
		private const string DFA175_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA175_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA175_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA175_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA175_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA175_eot = DFA.UnpackEncodedString(DFA175_eotS);
		private static readonly short[] DFA175_eof = DFA.UnpackEncodedString(DFA175_eofS);
		private static readonly char[] DFA175_min = DFA.UnpackEncodedStringToUnsignedChars(DFA175_minS);
		private static readonly char[] DFA175_max = DFA.UnpackEncodedStringToUnsignedChars(DFA175_maxS);
		private static readonly short[] DFA175_accept = DFA.UnpackEncodedString(DFA175_acceptS);
		private static readonly short[] DFA175_special = DFA.UnpackEncodedString(DFA175_specialS);
		private static readonly short[][] DFA175_transition;

		static DFA175()
		{
			int numStates = DFA175_transitionS.Length;
			DFA175_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA175_transition[i] = DFA.UnpackEncodedString(DFA175_transitionS[i]);
			}
		}

		public DFA175( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 175;
			this.eot = DFA175_eot;
			this.eof = DFA175_eof;
			this.min = DFA175_min;
			this.max = DFA175_max;
			this.accept = DFA175_accept;
			this.special = DFA175_special;
			this.transition = DFA175_transition;
		}

		public override string Description { get { return "()* loopback of 351:19: ( ( WS )* ',' ( WS )* func_args_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA182 : DFA
	{
		private const string DFA182_eotS =
			"\x5\xFFFF";
		private const string DFA182_eofS =
			"\x5\xFFFF";
		private const string DFA182_minS =
			"\x2\x55\x3\xFFFF";
		private const string DFA182_maxS =
			"\x2\x79\x3\xFFFF";
		private const string DFA182_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA182_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA182_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x3\x1\x4\x5\xFFFF\x1\x4\xC\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2",
				"\x1\x1\x7\xFFFF\x1\x3\x1\x4\x5\xFFFF\x1\x4\xC\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA182_eot = DFA.UnpackEncodedString(DFA182_eotS);
		private static readonly short[] DFA182_eof = DFA.UnpackEncodedString(DFA182_eofS);
		private static readonly char[] DFA182_min = DFA.UnpackEncodedStringToUnsignedChars(DFA182_minS);
		private static readonly char[] DFA182_max = DFA.UnpackEncodedStringToUnsignedChars(DFA182_maxS);
		private static readonly short[] DFA182_accept = DFA.UnpackEncodedString(DFA182_acceptS);
		private static readonly short[] DFA182_special = DFA.UnpackEncodedString(DFA182_specialS);
		private static readonly short[][] DFA182_transition;

		static DFA182()
		{
			int numStates = DFA182_transitionS.Length;
			DFA182_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA182_transition[i] = DFA.UnpackEncodedString(DFA182_transitionS[i]);
			}
		}

		public DFA182( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}

		public override string Description { get { return "356:37: ( ( WS )* ( '=' | ':=' ) ( WS )* expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA192 : DFA
	{
		private const string DFA192_eotS =
			"\x30\xFFFF";
		private const string DFA192_eofS =
			"\x30\xFFFF";
		private const string DFA192_minS =
			"\x1\x2F\x1\xFFFF\x2\x2F\x1\xFFFF\xD\x2F\x1\x55\x6\x2F\x1\x55\x4\x2F\x1"+
			"\x55\x6\x2F\x1\x55\x6\x2F\x1\x55\x2\x2F\x1\x55";
		private const string DFA192_maxS =
			"\x1\xBA\x1\xFFFF\x1\xBA\x1\xAA\x1\xFFFF\x1\xBA\x1\x55\x1\xAA\x1\x6D\x1"+
			"\xAA\x1\x55\x1\xBA\x5\xAA\x1\x55\x1\x84\x1\x6D\x4\xAA\x1\x55\x1\x84\x1"+
			"\x55\x1\xAA\x1\xBA\x1\x55\x1\x84\x5\xAA\x1\x55\x1\x84\x1\xBA\x4\xAA\x1"+
			"\x55\x1\x84\x2\x55\x1\x84";
		private const string DFA192_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2B\xFFFF";
		private const string DFA192_specialS =
			"\x30\xFFFF}>";
		private static readonly string[] DFA192_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x30\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x2\xFFFF\x1\x1\xF\xFFFF\x1\x4",
				"",
				"\x1\x1\x25\xFFFF\x1\x5\x5\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x6\xFFFF\x1\x6\x2\xFFFF\x1\x7\x10\xFFFF\x1\x1\x35\xFFFF"+
				"\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x9\x7\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF"+
				"\x1\x4\x7\xFFFF\x1\x4\x20\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x2\xFFFF\x1\x1",
				"",
				"\x1\x1\x25\xFFFF\x1\x5\x5\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x6\xFFFF\x1\x6\x2\xFFFF\x1\x4\x10\xFFFF\x1\x1\x35\xFFFF"+
				"\x1\x1",
				"\x1\xB\x25\xFFFF\x1\xA",
				"\x1\x12\x25\xFFFF\x1\xC\x7\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1"+
				"\xE\xD\xFFFF\x1\x10\x9\xFFFF\x1\xD\x1\xF\x2\xFFFF\x1\x11",
				"\x1\x4\x25\xFFFF\x1\x13\x8\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x9\x7\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF"+
				"\x1\x4\x7\xFFFF\x1\x4\x20\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x2\xFFFF\x1\x1",
				"\x1\xB\x25\xFFFF\x1\xA",
				"\x1\x1\x25\xFFFF\x1\x5\x5\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x6\xFFFF\x1\x6\x2\xFFFF\x1\x7\x10\xFFFF\x1\x1\x35\xFFFF"+
				"\x1\x1",
				"\x1\x12\x25\xFFFF\x1\xC\x7\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1"+
				"\xE\xD\xFFFF\x1\x10\x9\xFFFF\x1\xD\x1\xF\x2\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x14\x38\xFFFF\x1\xE\xD\xFFFF\x1\x10\xA\xFFFF\x1"+
				"\xF\x2\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x15\x46\xFFFF\x1\x10\xA\xFFFF\x1\xF\x2\xFFFF\x1"+
				"\x11",
				"\x1\x12\x25\xFFFF\x1\x16\x46\xFFFF\x1\x10\xD\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x17\x54\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1A\x2\xFFFF\x1\x1\x9\xFFFF\x1\x1C\x6\xFFFF\x1\x1",
				"\x1\x4\x25\xFFFF\x1\x13\x8\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x12\x25\xFFFF\x1\x14\x38\xFFFF\x1\xE\xD\xFFFF\x1\x10\xA\xFFFF\x1"+
				"\xF\x2\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x15\x46\xFFFF\x1\x10\xA\xFFFF\x1\xF\x2\xFFFF\x1"+
				"\x11",
				"\x1\x12\x25\xFFFF\x1\x16\x46\xFFFF\x1\x10\xD\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x17\x54\xFFFF\x1\x11",
				"\x1\x12\x25\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1A\xC\xFFFF\x1\x1C\x6\xFFFF\x1\x1",
				"\x1\x1E\x25\xFFFF\x1\x1D",
				"\x1\x25\x25\xFFFF\x1\x1F\x7\xFFFF\x1\x1\x30\xFFFF\x1\x21\xD\xFFFF\x1"+
				"\x23\x9\xFFFF\x1\x20\x1\x22\x2\xFFFF\x1\x24",
				"\x1\x1\x25\xFFFF\x1\x26\x5\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x1A\xFFFF\x1\x1\x35\xFFFF\x1\x1",
				"\x1\x1E\x25\xFFFF\x1\x1D",
				"\x1\x19\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1A\x2\xFFFF\x1\x1\x9\xFFFF\x1\x1C\x6\xFFFF\x1\x1",
				"\x1\x25\x25\xFFFF\x1\x1F\x7\xFFFF\x1\x1\x30\xFFFF\x1\x21\xD\xFFFF\x1"+
				"\x23\x9\xFFFF\x1\x20\x1\x22\x2\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x27\x38\xFFFF\x1\x21\xD\xFFFF\x1\x23\xA\xFFFF"+
				"\x1\x22\x2\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x28\x46\xFFFF\x1\x23\xA\xFFFF\x1\x22\x2\xFFFF"+
				"\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x29\x46\xFFFF\x1\x23\xD\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x2A\x54\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x2D\x2\xFFFF\x1\x1\x9\xFFFF\x1\x1C\x6\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x26\x5\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x1A\xFFFF\x1\x1\x35\xFFFF\x1\x1",
				"\x1\x25\x25\xFFFF\x1\x27\x38\xFFFF\x1\x21\xD\xFFFF\x1\x23\xA\xFFFF"+
				"\x1\x22\x2\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x28\x46\xFFFF\x1\x23\xA\xFFFF\x1\x22\x2\xFFFF"+
				"\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x29\x46\xFFFF\x1\x23\xD\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x2A\x54\xFFFF\x1\x24",
				"\x1\x25\x25\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x2D\xC\xFFFF\x1\x1C\x6\xFFFF\x1\x1",
				"\x1\x2F\x25\xFFFF\x1\x2E",
				"\x1\x2F\x25\xFFFF\x1\x2E",
				"\x1\x2C\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1B\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x2D\x2\xFFFF\x1\x1\x9\xFFFF\x1\x1C\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA192_eot = DFA.UnpackEncodedString(DFA192_eotS);
		private static readonly short[] DFA192_eof = DFA.UnpackEncodedString(DFA192_eofS);
		private static readonly char[] DFA192_min = DFA.UnpackEncodedStringToUnsignedChars(DFA192_minS);
		private static readonly char[] DFA192_max = DFA.UnpackEncodedStringToUnsignedChars(DFA192_maxS);
		private static readonly short[] DFA192_accept = DFA.UnpackEncodedString(DFA192_acceptS);
		private static readonly short[] DFA192_special = DFA.UnpackEncodedString(DFA192_specialS);
		private static readonly short[][] DFA192_transition;

		static DFA192()
		{
			int numStates = DFA192_transitionS.Length;
			DFA192_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA192_transition[i] = DFA.UnpackEncodedString(DFA192_transitionS[i]);
			}
		}

		public DFA192( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}

		public override string Description { get { return "376:48: ( func_type ( WS )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA196 : DFA
	{
		private const string DFA196_eotS =
			"\x4\xFFFF";
		private const string DFA196_eofS =
			"\x4\xFFFF";
		private const string DFA196_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA196_maxS =
			"\x2\x73\x2\xFFFF";
		private const string DFA196_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA196_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA196_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x3\x15\xFFFF\x1\x2",
				"\x1\x1\x7\xFFFF\x1\x3\x15\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA196_eot = DFA.UnpackEncodedString(DFA196_eotS);
		private static readonly short[] DFA196_eof = DFA.UnpackEncodedString(DFA196_eofS);
		private static readonly char[] DFA196_min = DFA.UnpackEncodedStringToUnsignedChars(DFA196_minS);
		private static readonly char[] DFA196_max = DFA.UnpackEncodedStringToUnsignedChars(DFA196_maxS);
		private static readonly short[] DFA196_accept = DFA.UnpackEncodedString(DFA196_acceptS);
		private static readonly short[] DFA196_special = DFA.UnpackEncodedString(DFA196_specialS);
		private static readonly short[][] DFA196_transition;

		static DFA196()
		{
			int numStates = DFA196_transitionS.Length;
			DFA196_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA196_transition[i] = DFA.UnpackEncodedString(DFA196_transitionS[i]);
			}
		}

		public DFA196( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 196;
			this.eot = DFA196_eot;
			this.eof = DFA196_eof;
			this.min = DFA196_min;
			this.max = DFA196_max;
			this.accept = DFA196_accept;
			this.special = DFA196_special;
			this.transition = DFA196_transition;
		}

		public override string Description { get { return "376:86: ( ( WS )* generic_parameter_ident )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA199 : DFA
	{
		private const string DFA199_eotS =
			"\x4\xFFFF";
		private const string DFA199_eofS =
			"\x4\xFFFF";
		private const string DFA199_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA199_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA199_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA199_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA199_transitionS =
			{
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA199_eot = DFA.UnpackEncodedString(DFA199_eotS);
		private static readonly short[] DFA199_eof = DFA.UnpackEncodedString(DFA199_eofS);
		private static readonly char[] DFA199_min = DFA.UnpackEncodedStringToUnsignedChars(DFA199_minS);
		private static readonly char[] DFA199_max = DFA.UnpackEncodedStringToUnsignedChars(DFA199_maxS);
		private static readonly short[] DFA199_accept = DFA.UnpackEncodedString(DFA199_acceptS);
		private static readonly short[] DFA199_special = DFA.UnpackEncodedString(DFA199_specialS);
		private static readonly short[][] DFA199_transition;

		static DFA199()
		{
			int numStates = DFA199_transitionS.Length;
			DFA199_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA199_transition[i] = DFA.UnpackEncodedString(DFA199_transitionS[i]);
			}
		}

		public DFA199( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 199;
			this.eot = DFA199_eot;
			this.eof = DFA199_eof;
			this.min = DFA199_min;
			this.max = DFA199_max;
			this.accept = DFA199_accept;
			this.special = DFA199_special;
			this.transition = DFA199_transition;
		}

		public override string Description { get { return "376:125: ( ( WS )* func_args )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA212 : DFA
	{
		private const string DFA212_eotS =
			"\x6\xFFFF";
		private const string DFA212_eofS =
			"\x2\xFFFF\x1\x5\x3\xFFFF";
		private const string DFA212_minS =
			"\x2\x38\x1\x8\x3\xFFFF";
		private const string DFA212_maxS =
			"\x2\x79\x1\xBA\x3\xFFFF";
		private const string DFA212_acceptS =
			"\x3\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA212_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA212_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x23\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x23\xFFFF\x1\x3",
				"\x1\x5\x26\xFFFF\x1\x5\x1\x4\x7\xFFFF\x1\x2\x24\xFFFF\x1\x5\x26\xFFFF"+
				"\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x2\x5\x3\xFFFF\x2\x5\x3\xFFFF\x1\x5\x4"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x3\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1"+
				"\x5\x3\xFFFF\x1\x5\x2\xFFFF\x2\x5\x7\xFFFF\x1\x5",
				"",
				"",
				""
			};

		private static readonly short[] DFA212_eot = DFA.UnpackEncodedString(DFA212_eotS);
		private static readonly short[] DFA212_eof = DFA.UnpackEncodedString(DFA212_eofS);
		private static readonly char[] DFA212_min = DFA.UnpackEncodedStringToUnsignedChars(DFA212_minS);
		private static readonly char[] DFA212_max = DFA.UnpackEncodedStringToUnsignedChars(DFA212_maxS);
		private static readonly short[] DFA212_accept = DFA.UnpackEncodedString(DFA212_acceptS);
		private static readonly short[] DFA212_special = DFA.UnpackEncodedString(DFA212_specialS);
		private static readonly short[][] DFA212_transition;

		static DFA212()
		{
			int numStates = DFA212_transitionS.Length;
			DFA212_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA212_transition[i] = DFA.UnpackEncodedString(DFA212_transitionS[i]);
			}
		}

		public DFA212( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 212;
			this.eot = DFA212_eot;
			this.eof = DFA212_eof;
			this.min = DFA212_min;
			this.max = DFA212_max;
			this.accept = DFA212_accept;
			this.special = DFA212_special;
			this.transition = DFA212_transition;
		}

		public override string Description { get { return "376:150: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | ( WS )* '=' ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA211 : DFA
	{
		private const string DFA211_eotS =
			"\x4\xFFFF";
		private const string DFA211_eofS =
			"\x4\xFFFF";
		private const string DFA211_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA211_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA211_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA211_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA211_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA211_eot = DFA.UnpackEncodedString(DFA211_eotS);
		private static readonly short[] DFA211_eof = DFA.UnpackEncodedString(DFA211_eofS);
		private static readonly char[] DFA211_min = DFA.UnpackEncodedStringToUnsignedChars(DFA211_minS);
		private static readonly char[] DFA211_max = DFA.UnpackEncodedStringToUnsignedChars(DFA211_maxS);
		private static readonly short[] DFA211_accept = DFA.UnpackEncodedString(DFA211_acceptS);
		private static readonly short[] DFA211_special = DFA.UnpackEncodedString(DFA211_specialS);
		private static readonly short[][] DFA211_transition;

		static DFA211()
		{
			int numStates = DFA211_transitionS.Length;
			DFA211_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA211_transition[i] = DFA.UnpackEncodedString(DFA211_transitionS[i]);
			}
		}

		public DFA211( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 211;
			this.eot = DFA211_eot;
			this.eof = DFA211_eof;
			this.min = DFA211_min;
			this.max = DFA211_max;
			this.accept = DFA211_accept;
			this.special = DFA211_special;
			this.transition = DFA211_transition;
		}

		public override string Description { get { return "377:88: ( ( WS )* where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA237 : DFA
	{
		private const string DFA237_eotS =
			"\x8\xFFFF";
		private const string DFA237_eofS =
			"\x8\xFFFF";
		private const string DFA237_minS =
			"\x1\x8\x1\x38\x6\xFFFF";
		private const string DFA237_maxS =
			"\x2\xB5\x6\xFFFF";
		private const string DFA237_acceptS =
			"\x2\xFFFF\x1\x6\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5";
		private const string DFA237_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA237_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x2\x22\xFFFF\x1"+
				"\x7\x1\x3\x1\xFFFF\x1\x2\x16\xFFFF\x1\x4\x1\x6\x4\xFFFF\x1\x5",
				"\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x2\x22\xFFFF\x1\x7\x1\x3\x1\xFFFF"+
				"\x1\x2\x16\xFFFF\x1\x4\x1\x6\x4\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA237_eot = DFA.UnpackEncodedString(DFA237_eotS);
		private static readonly short[] DFA237_eof = DFA.UnpackEncodedString(DFA237_eofS);
		private static readonly char[] DFA237_min = DFA.UnpackEncodedStringToUnsignedChars(DFA237_minS);
		private static readonly char[] DFA237_max = DFA.UnpackEncodedStringToUnsignedChars(DFA237_maxS);
		private static readonly short[] DFA237_accept = DFA.UnpackEncodedString(DFA237_acceptS);
		private static readonly short[] DFA237_special = DFA.UnpackEncodedString(DFA237_specialS);
		private static readonly short[][] DFA237_transition;

		static DFA237()
		{
			int numStates = DFA237_transitionS.Length;
			DFA237_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA237_transition[i] = DFA.UnpackEncodedString(DFA237_transitionS[i]);
			}
		}

		public DFA237( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 237;
			this.eot = DFA237_eot;
			this.eof = DFA237_eof;
			this.min = DFA237_min;
			this.max = DFA237_max;
			this.accept = DFA237_accept;
			this.special = DFA237_special;
			this.transition = DFA237_transition;
		}

		public override string Description { get { return "()* loopback of 412:29: ( ( WS )* 'if' ( WS )* expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'unless' ( WS )* expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'while' ( WS )* expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'until' ( WS )* expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | ( WS )* 'for' ( WS )* for_item ( ( WS )* ',' ( WS )* for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA236 : DFA
	{
		private const string DFA236_eotS =
			"\x4\xFFFF";
		private const string DFA236_eofS =
			"\x4\xFFFF";
		private const string DFA236_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA236_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA236_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA236_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA236_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x2"+
				"\x22\xFFFF\x2\x2\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x2\x22\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA236_eot = DFA.UnpackEncodedString(DFA236_eotS);
		private static readonly short[] DFA236_eof = DFA.UnpackEncodedString(DFA236_eofS);
		private static readonly char[] DFA236_min = DFA.UnpackEncodedStringToUnsignedChars(DFA236_minS);
		private static readonly char[] DFA236_max = DFA.UnpackEncodedStringToUnsignedChars(DFA236_maxS);
		private static readonly short[] DFA236_accept = DFA.UnpackEncodedString(DFA236_acceptS);
		private static readonly short[] DFA236_special = DFA.UnpackEncodedString(DFA236_specialS);
		private static readonly short[][] DFA236_transition;

		static DFA236()
		{
			int numStates = DFA236_transitionS.Length;
			DFA236_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA236_transition[i] = DFA.UnpackEncodedString(DFA236_transitionS[i]);
			}
		}

		public DFA236( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 236;
			this.eot = DFA236_eot;
			this.eof = DFA236_eof;
			this.min = DFA236_min;
			this.max = DFA236_max;
			this.accept = DFA236_accept;
			this.special = DFA236_special;
			this.transition = DFA236_transition;
		}

		public override string Description { get { return "()* loopback of 416:36: ( ( WS )* ',' ( WS )* for_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA238 : DFA
	{
		private const string DFA238_eotS =
			"\xB\xFFFF";
		private const string DFA238_eofS =
			"\xB\xFFFF";
		private const string DFA238_minS =
			"\x1\x2F\x1\x8\x4\xFFFF\x1\x38\x1\x2F\x1\xFFFF\x1\x2F\x1\x8";
		private const string DFA238_maxS =
			"\x1\xBA\x1\xB7\x4\xFFFF\x1\xB7\x1\x55\x1\xFFFF\x1\x55\x1\xB7";
		private const string DFA238_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x2\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA238_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA238_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x2\x9\xFFFF\x1\x4\x2\xFFFF\x1\x3\x8\xFFFF\x1\x5",
				"\x1\x5\x2F\xFFFF\x1\x5\x1C\xFFFF\x1\x6\x3\xFFFF\x1\x5\x2\xFFFF\x2\x5"+
				"\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\x8\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8\x2\x5\x1\xFFFF\x2\x5\x2"+
				"\xFFFF\x1\x5\x5\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1"+
				"\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1\x5\x16\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x5\x1C\xFFFF\x1\x6\x3\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x8\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x16\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"\x1\xA\x25\xFFFF\x1\x9",
				"",
				"\x1\xA\x25\xFFFF\x1\x9",
				"\x1\x5\x2F\xFFFF\x1\x5\x1C\xFFFF\x1\x6\x3\xFFFF\x1\x5\x2\xFFFF\x2\x5"+
				"\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\x8\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8\x2\x5\x1\xFFFF\x2\x5\x2"+
				"\xFFFF\x1\x5\x5\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1"+
				"\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1\x5\x16\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5"
			};

		private static readonly short[] DFA238_eot = DFA.UnpackEncodedString(DFA238_eotS);
		private static readonly short[] DFA238_eof = DFA.UnpackEncodedString(DFA238_eofS);
		private static readonly char[] DFA238_min = DFA.UnpackEncodedStringToUnsignedChars(DFA238_minS);
		private static readonly char[] DFA238_max = DFA.UnpackEncodedStringToUnsignedChars(DFA238_maxS);
		private static readonly short[] DFA238_accept = DFA.UnpackEncodedString(DFA238_acceptS);
		private static readonly short[] DFA238_special = DFA.UnpackEncodedString(DFA238_specialS);
		private static readonly short[][] DFA238_transition;

		static DFA238()
		{
			int numStates = DFA238_transitionS.Length;
			DFA238_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA238_transition[i] = DFA.UnpackEncodedString(DFA238_transitionS[i]);
			}
		}

		public DFA238( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 238;
			this.eot = DFA238_eot;
			this.eof = DFA238_eof;
			this.min = DFA238_min;
			this.max = DFA238_max;
			this.accept = DFA238_accept;
			this.special = DFA238_special;
			this.transition = DFA238_transition;
		}

		public override string Description { get { return "420:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA247 : DFA
	{
		private const string DFA247_eotS =
			"\x4\xFFFF";
		private const string DFA247_eofS =
			"\x4\xFFFF";
		private const string DFA247_minS =
			"\x1\x8\x1\x2F\x2\xFFFF";
		private const string DFA247_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA247_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA247_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA247_transitionS =
			{
				"\x1\x2\x26\xFFFF\x1\x3\x8\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x2"+
				"\x22\xFFFF\x2\x2\x1\xFFFF\x1\x2\x6\xFFFF\x1\x3\xF\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2",
				"\x1\x3\x8\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x2\x22\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x6\xFFFF\x1\x3\xF\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA247_eot = DFA.UnpackEncodedString(DFA247_eotS);
		private static readonly short[] DFA247_eof = DFA.UnpackEncodedString(DFA247_eofS);
		private static readonly char[] DFA247_min = DFA.UnpackEncodedStringToUnsignedChars(DFA247_minS);
		private static readonly char[] DFA247_max = DFA.UnpackEncodedStringToUnsignedChars(DFA247_maxS);
		private static readonly short[] DFA247_accept = DFA.UnpackEncodedString(DFA247_acceptS);
		private static readonly short[] DFA247_special = DFA.UnpackEncodedString(DFA247_specialS);
		private static readonly short[][] DFA247_transition;

		static DFA247()
		{
			int numStates = DFA247_transitionS.Length;
			DFA247_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA247_transition[i] = DFA.UnpackEncodedString(DFA247_transitionS[i]);
			}
		}

		public DFA247( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 247;
			this.eot = DFA247_eot;
			this.eof = DFA247_eof;
			this.min = DFA247_min;
			this.max = DFA247_max;
			this.accept = DFA247_accept;
			this.special = DFA247_special;
			this.transition = DFA247_transition;
		}

		public override string Description { get { return "()* loopback of 439:12: ( ( WS )* stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA249 : DFA
	{
		private const string DFA249_eotS =
			"\x4\xFFFF";
		private const string DFA249_eofS =
			"\x4\xFFFF";
		private const string DFA249_minS =
			"\x1\x8\x1\x2F\x2\xFFFF";
		private const string DFA249_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA249_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA249_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA249_transitionS =
			{
				"\x1\x3\x26\xFFFF\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF"+
				"\x1\x1\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\xB\xFFFF\x1\x3\x10\xFFFF\x2\x2\x10\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\xD\xFFFF\x2"+
				"\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\xB\xFFFF\x1\x3\x10\xFFFF\x2\x2\x10\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\xD\xFFFF\x2\x3\x4\xFFFF\x1"+
				"\x3\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA249_eot = DFA.UnpackEncodedString(DFA249_eotS);
		private static readonly short[] DFA249_eof = DFA.UnpackEncodedString(DFA249_eofS);
		private static readonly char[] DFA249_min = DFA.UnpackEncodedStringToUnsignedChars(DFA249_minS);
		private static readonly char[] DFA249_max = DFA.UnpackEncodedStringToUnsignedChars(DFA249_maxS);
		private static readonly short[] DFA249_accept = DFA.UnpackEncodedString(DFA249_acceptS);
		private static readonly short[] DFA249_special = DFA.UnpackEncodedString(DFA249_specialS);
		private static readonly short[][] DFA249_transition;

		static DFA249()
		{
			int numStates = DFA249_transitionS.Length;
			DFA249_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA249_transition[i] = DFA.UnpackEncodedString(DFA249_transitionS[i]);
			}
		}

		public DFA249( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 249;
			this.eot = DFA249_eot;
			this.eof = DFA249_eof;
			this.min = DFA249_min;
			this.max = DFA249_max;
			this.accept = DFA249_accept;
			this.special = DFA249_special;
			this.transition = DFA249_transition;
		}

		public override string Description { get { return "443:13: ( ( WS )* expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA252 : DFA
	{
		private const string DFA252_eotS =
			"\x4\xFFFF";
		private const string DFA252_eofS =
			"\x4\xFFFF";
		private const string DFA252_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA252_maxS =
			"\x2\x98\x2\xFFFF";
		private const string DFA252_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA252_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA252_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x25\xFFFF\x1"+
				"\x2",
				"\x1\x2\x1C\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x25\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA252_eot = DFA.UnpackEncodedString(DFA252_eotS);
		private static readonly short[] DFA252_eof = DFA.UnpackEncodedString(DFA252_eofS);
		private static readonly char[] DFA252_min = DFA.UnpackEncodedStringToUnsignedChars(DFA252_minS);
		private static readonly char[] DFA252_max = DFA.UnpackEncodedStringToUnsignedChars(DFA252_maxS);
		private static readonly short[] DFA252_accept = DFA.UnpackEncodedString(DFA252_acceptS);
		private static readonly short[] DFA252_special = DFA.UnpackEncodedString(DFA252_specialS);
		private static readonly short[][] DFA252_transition;

		static DFA252()
		{
			int numStates = DFA252_transitionS.Length;
			DFA252_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA252_transition[i] = DFA.UnpackEncodedString(DFA252_transitionS[i]);
			}
		}

		public DFA252( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 252;
			this.eot = DFA252_eot;
			this.eof = DFA252_eof;
			this.min = DFA252_min;
			this.max = DFA252_max;
			this.accept = DFA252_accept;
			this.special = DFA252_special;
			this.transition = DFA252_transition;
		}

		public override string Description { get { return "()* loopback of 447:16: ( ( WS )* ';' ( WS )* stmt_simple )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA261 : DFA
	{
		private const string DFA261_eotS =
			"\x4\xFFFF";
		private const string DFA261_eofS =
			"\x4\xFFFF";
		private const string DFA261_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA261_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA261_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA261_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA261_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA261_eot = DFA.UnpackEncodedString(DFA261_eotS);
		private static readonly short[] DFA261_eof = DFA.UnpackEncodedString(DFA261_eofS);
		private static readonly char[] DFA261_min = DFA.UnpackEncodedStringToUnsignedChars(DFA261_minS);
		private static readonly char[] DFA261_max = DFA.UnpackEncodedStringToUnsignedChars(DFA261_maxS);
		private static readonly short[] DFA261_accept = DFA.UnpackEncodedString(DFA261_acceptS);
		private static readonly short[] DFA261_special = DFA.UnpackEncodedString(DFA261_specialS);
		private static readonly short[][] DFA261_transition;

		static DFA261()
		{
			int numStates = DFA261_transitionS.Length;
			DFA261_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA261_transition[i] = DFA.UnpackEncodedString(DFA261_transitionS[i]);
			}
		}

		public DFA261( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 261;
			this.eot = DFA261_eot;
			this.eof = DFA261_eof;
			this.min = DFA261_min;
			this.max = DFA261_max;
			this.accept = DFA261_accept;
			this.special = DFA261_special;
			this.transition = DFA261_transition;
		}

		public override string Description { get { return "451:18: ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA258 : DFA
	{
		private const string DFA258_eotS =
			"\x4\xFFFF";
		private const string DFA258_eofS =
			"\x4\xFFFF";
		private const string DFA258_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA258_maxS =
			"\x1\x98\x1\xBA\x2\xFFFF";
		private const string DFA258_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA258_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA258_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x3B\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1C\xFFFF\x2\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x4\xFFFF\x5\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA258_eot = DFA.UnpackEncodedString(DFA258_eotS);
		private static readonly short[] DFA258_eof = DFA.UnpackEncodedString(DFA258_eofS);
		private static readonly char[] DFA258_min = DFA.UnpackEncodedStringToUnsignedChars(DFA258_minS);
		private static readonly char[] DFA258_max = DFA.UnpackEncodedStringToUnsignedChars(DFA258_maxS);
		private static readonly short[] DFA258_accept = DFA.UnpackEncodedString(DFA258_acceptS);
		private static readonly short[] DFA258_special = DFA.UnpackEncodedString(DFA258_specialS);
		private static readonly short[][] DFA258_transition;

		static DFA258()
		{
			int numStates = DFA258_transitionS.Length;
			DFA258_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA258_transition[i] = DFA.UnpackEncodedString(DFA258_transitionS[i]);
			}
		}

		public DFA258( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 258;
			this.eot = DFA258_eot;
			this.eof = DFA258_eof;
			this.min = DFA258_min;
			this.max = DFA258_max;
			this.accept = DFA258_accept;
			this.special = DFA258_special;
			this.transition = DFA258_transition;
		}

		public override string Description { get { return "451:44: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA269 : DFA
	{
		private const string DFA269_eotS =
			"\x4\xFFFF";
		private const string DFA269_eofS =
			"\x4\xFFFF";
		private const string DFA269_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA269_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA269_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA269_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA269_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA269_eot = DFA.UnpackEncodedString(DFA269_eotS);
		private static readonly short[] DFA269_eof = DFA.UnpackEncodedString(DFA269_eofS);
		private static readonly char[] DFA269_min = DFA.UnpackEncodedStringToUnsignedChars(DFA269_minS);
		private static readonly char[] DFA269_max = DFA.UnpackEncodedStringToUnsignedChars(DFA269_maxS);
		private static readonly short[] DFA269_accept = DFA.UnpackEncodedString(DFA269_acceptS);
		private static readonly short[] DFA269_special = DFA.UnpackEncodedString(DFA269_specialS);
		private static readonly short[][] DFA269_transition;

		static DFA269()
		{
			int numStates = DFA269_transitionS.Length;
			DFA269_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA269_transition[i] = DFA.UnpackEncodedString(DFA269_transitionS[i]);
			}
		}

		public DFA269( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 269;
			this.eot = DFA269_eot;
			this.eof = DFA269_eof;
			this.min = DFA269_min;
			this.max = DFA269_max;
			this.accept = DFA269_accept;
			this.special = DFA269_special;
			this.transition = DFA269_transition;
		}

		public override string Description { get { return "454:22: ( ( WS )* ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | ( WS )* 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA267 : DFA
	{
		private const string DFA267_eotS =
			"\x4\xFFFF";
		private const string DFA267_eofS =
			"\x4\xFFFF";
		private const string DFA267_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA267_maxS =
			"\x1\x98\x1\xBA\x2\xFFFF";
		private const string DFA267_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA267_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA267_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x3B\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1C\xFFFF\x2\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x4\xFFFF\x5\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA267_eot = DFA.UnpackEncodedString(DFA267_eotS);
		private static readonly short[] DFA267_eof = DFA.UnpackEncodedString(DFA267_eofS);
		private static readonly char[] DFA267_min = DFA.UnpackEncodedStringToUnsignedChars(DFA267_minS);
		private static readonly char[] DFA267_max = DFA.UnpackEncodedStringToUnsignedChars(DFA267_maxS);
		private static readonly short[] DFA267_accept = DFA.UnpackEncodedString(DFA267_acceptS);
		private static readonly short[] DFA267_special = DFA.UnpackEncodedString(DFA267_specialS);
		private static readonly short[][] DFA267_transition;

		static DFA267()
		{
			int numStates = DFA267_transitionS.Length;
			DFA267_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA267_transition[i] = DFA.UnpackEncodedString(DFA267_transitionS[i]);
			}
		}

		public DFA267( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 267;
			this.eot = DFA267_eot;
			this.eof = DFA267_eof;
			this.min = DFA267_min;
			this.max = DFA267_max;
			this.accept = DFA267_accept;
			this.special = DFA267_special;
			this.transition = DFA267_transition;
		}

		public override string Description { get { return "454:47: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA276 : DFA
	{
		private const string DFA276_eotS =
			"\x4\xFFFF";
		private const string DFA276_eofS =
			"\x4\xFFFF";
		private const string DFA276_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA276_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA276_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA276_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA276_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA276_eot = DFA.UnpackEncodedString(DFA276_eotS);
		private static readonly short[] DFA276_eof = DFA.UnpackEncodedString(DFA276_eofS);
		private static readonly char[] DFA276_min = DFA.UnpackEncodedStringToUnsignedChars(DFA276_minS);
		private static readonly char[] DFA276_max = DFA.UnpackEncodedStringToUnsignedChars(DFA276_maxS);
		private static readonly short[] DFA276_accept = DFA.UnpackEncodedString(DFA276_acceptS);
		private static readonly short[] DFA276_special = DFA.UnpackEncodedString(DFA276_specialS);
		private static readonly short[][] DFA276_transition;

		static DFA276()
		{
			int numStates = DFA276_transitionS.Length;
			DFA276_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA276_transition[i] = DFA.UnpackEncodedString(DFA276_transitionS[i]);
			}
		}

		public DFA276( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 276;
			this.eot = DFA276_eot;
			this.eof = DFA276_eof;
			this.min = DFA276_min;
			this.max = DFA276_max;
			this.accept = DFA276_accept;
			this.special = DFA276_special;
			this.transition = DFA276_transition;
		}

		public override string Description { get { return "460:21: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA281 : DFA
	{
		private const string DFA281_eotS =
			"\x4\xFFFF";
		private const string DFA281_eofS =
			"\x4\xFFFF";
		private const string DFA281_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA281_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA281_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA281_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA281_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA281_eot = DFA.UnpackEncodedString(DFA281_eotS);
		private static readonly short[] DFA281_eof = DFA.UnpackEncodedString(DFA281_eofS);
		private static readonly char[] DFA281_min = DFA.UnpackEncodedStringToUnsignedChars(DFA281_minS);
		private static readonly char[] DFA281_max = DFA.UnpackEncodedStringToUnsignedChars(DFA281_maxS);
		private static readonly short[] DFA281_accept = DFA.UnpackEncodedString(DFA281_acceptS);
		private static readonly short[] DFA281_special = DFA.UnpackEncodedString(DFA281_specialS);
		private static readonly short[][] DFA281_transition;

		static DFA281()
		{
			int numStates = DFA281_transitionS.Length;
			DFA281_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA281_transition[i] = DFA.UnpackEncodedString(DFA281_transitionS[i]);
			}
		}

		public DFA281( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 281;
			this.eot = DFA281_eot;
			this.eof = DFA281_eof;
			this.min = DFA281_min;
			this.max = DFA281_max;
			this.accept = DFA281_accept;
			this.special = DFA281_special;
			this.transition = DFA281_transition;
		}

		public override string Description { get { return "463:17: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA283 : DFA
	{
		private const string DFA283_eotS =
			"\x4\xFFFF";
		private const string DFA283_eofS =
			"\x4\xFFFF";
		private const string DFA283_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA283_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA283_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA283_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA283_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA283_eot = DFA.UnpackEncodedString(DFA283_eotS);
		private static readonly short[] DFA283_eof = DFA.UnpackEncodedString(DFA283_eofS);
		private static readonly char[] DFA283_min = DFA.UnpackEncodedStringToUnsignedChars(DFA283_minS);
		private static readonly char[] DFA283_max = DFA.UnpackEncodedStringToUnsignedChars(DFA283_maxS);
		private static readonly short[] DFA283_accept = DFA.UnpackEncodedString(DFA283_acceptS);
		private static readonly short[] DFA283_special = DFA.UnpackEncodedString(DFA283_specialS);
		private static readonly short[][] DFA283_transition;

		static DFA283()
		{
			int numStates = DFA283_transitionS.Length;
			DFA283_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA283_transition[i] = DFA.UnpackEncodedString(DFA283_transitionS[i]);
			}
		}

		public DFA283( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 283;
			this.eot = DFA283_eot;
			this.eof = DFA283_eof;
			this.min = DFA283_min;
			this.max = DFA283_max;
			this.accept = DFA283_accept;
			this.special = DFA283_special;
			this.transition = DFA283_transition;
		}

		public override string Description { get { return "466:11: ( ( WS )* expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA304 : DFA
	{
		private const string DFA304_eotS =
			"\x6\xFFFF";
		private const string DFA304_eofS =
			"\x6\xFFFF";
		private const string DFA304_minS =
			"\x1\x8\x1\x38\x4\xFFFF";
		private const string DFA304_maxS =
			"\x2\xB5\x4\xFFFF";
		private const string DFA304_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4";
		private const string DFA304_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA304_transitionS =
			{
				"\x1\x5\x2F\xFFFF\x1\x5\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x5\xD\xFFFF\x1\x5"+
				"\x12\xFFFF\x1\x5\xA\xFFFF\x1\x4\x4\xFFFF\x2\x5\x1\xFFFF\x1\x5\x12\xFFFF"+
				"\x1\x3\x1\x2\x2\xFFFF\x2\x5\x4\xFFFF\x1\x5",
				"\x1\x5\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x5\xD\xFFFF\x1\x5\x12\xFFFF\x1\x5"+
				"\xA\xFFFF\x1\x4\x4\xFFFF\x2\x5\x1\xFFFF\x1\x5\x12\xFFFF\x1\x3\x1\x2"+
				"\x2\xFFFF\x2\x5\x4\xFFFF\x1\x5",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA304_eot = DFA.UnpackEncodedString(DFA304_eotS);
		private static readonly short[] DFA304_eof = DFA.UnpackEncodedString(DFA304_eofS);
		private static readonly char[] DFA304_min = DFA.UnpackEncodedStringToUnsignedChars(DFA304_minS);
		private static readonly char[] DFA304_max = DFA.UnpackEncodedStringToUnsignedChars(DFA304_maxS);
		private static readonly short[] DFA304_accept = DFA.UnpackEncodedString(DFA304_acceptS);
		private static readonly short[] DFA304_special = DFA.UnpackEncodedString(DFA304_specialS);
		private static readonly short[][] DFA304_transition;

		static DFA304()
		{
			int numStates = DFA304_transitionS.Length;
			DFA304_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA304_transition[i] = DFA.UnpackEncodedString(DFA304_transitionS[i]);
			}
		}

		public DFA304( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 304;
			this.eot = DFA304_eot;
			this.eof = DFA304_eof;
			this.min = DFA304_min;
			this.max = DFA304_max;
			this.accept = DFA304_accept;
			this.special = DFA304_special;
			this.transition = DFA304_transition;
		}

		public override string Description { get { return "470:30: ( ( WS )* 'to' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | ( WS )* 'til' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | ( WS )* 'downto' ( WS )* b= expr ( ( WS )* 'by' ( WS )* c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA293 : DFA
	{
		private const string DFA293_eotS =
			"\x4\xFFFF";
		private const string DFA293_eofS =
			"\x4\xFFFF";
		private const string DFA293_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA293_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA293_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA293_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA293_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3"+
				"\x12\xFFFF\x1\x3\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3\x12\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA293_eot = DFA.UnpackEncodedString(DFA293_eotS);
		private static readonly short[] DFA293_eof = DFA.UnpackEncodedString(DFA293_eofS);
		private static readonly char[] DFA293_min = DFA.UnpackEncodedStringToUnsignedChars(DFA293_minS);
		private static readonly char[] DFA293_max = DFA.UnpackEncodedStringToUnsignedChars(DFA293_maxS);
		private static readonly short[] DFA293_accept = DFA.UnpackEncodedString(DFA293_acceptS);
		private static readonly short[] DFA293_special = DFA.UnpackEncodedString(DFA293_specialS);
		private static readonly short[][] DFA293_transition;

		static DFA293()
		{
			int numStates = DFA293_transitionS.Length;
			DFA293_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA293_transition[i] = DFA.UnpackEncodedString(DFA293_transitionS[i]);
			}
		}

		public DFA293( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 293;
			this.eot = DFA293_eot;
			this.eof = DFA293_eof;
			this.min = DFA293_min;
			this.max = DFA293_max;
			this.accept = DFA293_accept;
			this.special = DFA293_special;
			this.transition = DFA293_transition;
		}

		public override string Description { get { return "470:52: ( ( WS )* 'by' ( WS )* c= expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA298 : DFA
	{
		private const string DFA298_eotS =
			"\x4\xFFFF";
		private const string DFA298_eofS =
			"\x4\xFFFF";
		private const string DFA298_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA298_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA298_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA298_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA298_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3"+
				"\x12\xFFFF\x1\x3\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3\x12\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA298_eot = DFA.UnpackEncodedString(DFA298_eotS);
		private static readonly short[] DFA298_eof = DFA.UnpackEncodedString(DFA298_eofS);
		private static readonly char[] DFA298_min = DFA.UnpackEncodedStringToUnsignedChars(DFA298_minS);
		private static readonly char[] DFA298_max = DFA.UnpackEncodedStringToUnsignedChars(DFA298_maxS);
		private static readonly short[] DFA298_accept = DFA.UnpackEncodedString(DFA298_acceptS);
		private static readonly short[] DFA298_special = DFA.UnpackEncodedString(DFA298_specialS);
		private static readonly short[][] DFA298_transition;

		static DFA298()
		{
			int numStates = DFA298_transitionS.Length;
			DFA298_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA298_transition[i] = DFA.UnpackEncodedString(DFA298_transitionS[i]);
			}
		}

		public DFA298( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 298;
			this.eot = DFA298_eot;
			this.eof = DFA298_eof;
			this.min = DFA298_min;
			this.max = DFA298_max;
			this.accept = DFA298_accept;
			this.special = DFA298_special;
			this.transition = DFA298_transition;
		}

		public override string Description { get { return "471:38: ( ( WS )* 'by' ( WS )* c= expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA303 : DFA
	{
		private const string DFA303_eotS =
			"\x4\xFFFF";
		private const string DFA303_eofS =
			"\x4\xFFFF";
		private const string DFA303_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA303_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA303_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA303_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA303_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3"+
				"\x12\xFFFF\x1\x3\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x3\x12\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x2\xA\xFFFF\x2\x3\x1\xFFFF\x1\x3\x16\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA303_eot = DFA.UnpackEncodedString(DFA303_eotS);
		private static readonly short[] DFA303_eof = DFA.UnpackEncodedString(DFA303_eofS);
		private static readonly char[] DFA303_min = DFA.UnpackEncodedStringToUnsignedChars(DFA303_minS);
		private static readonly char[] DFA303_max = DFA.UnpackEncodedStringToUnsignedChars(DFA303_maxS);
		private static readonly short[] DFA303_accept = DFA.UnpackEncodedString(DFA303_acceptS);
		private static readonly short[] DFA303_special = DFA.UnpackEncodedString(DFA303_specialS);
		private static readonly short[][] DFA303_transition;

		static DFA303()
		{
			int numStates = DFA303_transitionS.Length;
			DFA303_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA303_transition[i] = DFA.UnpackEncodedString(DFA303_transitionS[i]);
			}
		}

		public DFA303( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 303;
			this.eot = DFA303_eot;
			this.eof = DFA303_eof;
			this.min = DFA303_min;
			this.max = DFA303_max;
			this.accept = DFA303_accept;
			this.special = DFA303_special;
			this.transition = DFA303_transition;
		}

		public override string Description { get { return "472:41: ( ( WS )* 'by' ( WS )* c= expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA307 : DFA
	{
		private const string DFA307_eotS =
			"\x9\xFFFF";
		private const string DFA307_eofS =
			"\x9\xFFFF";
		private const string DFA307_minS =
			"\x1\x2F\x1\x8\x1\xFFFF\x1\x38\x1\x2F\x2\xFFFF\x1\x2F\x1\x8";
		private const string DFA307_maxS =
			"\x1\xBA\x1\xB9\x1\xFFFF\x1\xB9\x1\x55\x2\xFFFF\x1\x55\x1\xB9";
		private const string DFA307_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\x3\x2\xFFFF";
		private const string DFA307_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA307_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF\x1\x2",
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x3\x1\xFFFF\x7\x2\x1\xFFFF\x8\x2"+
				"\x1\xFFFF\x7\x2\x1\xFFFF\x1\x4\x3\x2\x1\x5\x6\x2\x1\xFFFF\x1\x6\x5\x2"+
				"\x1\xFFFF\x7\x2\xB\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xC\xFFFF"+
				"\x2\x2\x4\xFFFF\x5\x2",
				"",
				"\x1\x2\x1C\xFFFF\x1\x3\x1\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x4\x3\x2\x1\x5\x6\x2\x1\xFFFF\x1\x6\x5\x2\x1\xFFFF\x7\x2"+
				"\xB\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2",
				"\x1\x8\x25\xFFFF\x1\x7",
				"",
				"",
				"\x1\x8\x25\xFFFF\x1\x7",
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x3\x1\xFFFF\x7\x2\x1\xFFFF\x8\x2"+
				"\x1\xFFFF\x7\x2\x1\xFFFF\x1\x4\x3\x2\x1\x5\x6\x2\x1\xFFFF\x1\x6\x5\x2"+
				"\x1\xFFFF\x7\x2\xB\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xC\xFFFF"+
				"\x2\x2\x4\xFFFF\x5\x2"
			};

		private static readonly short[] DFA307_eot = DFA.UnpackEncodedString(DFA307_eotS);
		private static readonly short[] DFA307_eof = DFA.UnpackEncodedString(DFA307_eofS);
		private static readonly char[] DFA307_min = DFA.UnpackEncodedStringToUnsignedChars(DFA307_minS);
		private static readonly char[] DFA307_max = DFA.UnpackEncodedStringToUnsignedChars(DFA307_maxS);
		private static readonly short[] DFA307_accept = DFA.UnpackEncodedString(DFA307_acceptS);
		private static readonly short[] DFA307_special = DFA.UnpackEncodedString(DFA307_specialS);
		private static readonly short[][] DFA307_transition;

		static DFA307()
		{
			int numStates = DFA307_transitionS.Length;
			DFA307_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA307_transition[i] = DFA.UnpackEncodedString(DFA307_transitionS[i]);
			}
		}

		public DFA307( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 307;
			this.eot = DFA307_eot;
			this.eof = DFA307_eof;
			this.min = DFA307_min;
			this.max = DFA307_max;
			this.accept = DFA307_accept;
			this.special = DFA307_special;
			this.transition = DFA307_transition;
		}

		public override string Description { get { return "485:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA312 : DFA
	{
		private const string DFA312_eotS =
			"\x4\xFFFF";
		private const string DFA312_eofS =
			"\x4\xFFFF";
		private const string DFA312_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA312_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA312_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA312_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA312_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA312_eot = DFA.UnpackEncodedString(DFA312_eotS);
		private static readonly short[] DFA312_eof = DFA.UnpackEncodedString(DFA312_eofS);
		private static readonly char[] DFA312_min = DFA.UnpackEncodedStringToUnsignedChars(DFA312_minS);
		private static readonly char[] DFA312_max = DFA.UnpackEncodedStringToUnsignedChars(DFA312_maxS);
		private static readonly short[] DFA312_accept = DFA.UnpackEncodedString(DFA312_acceptS);
		private static readonly short[] DFA312_special = DFA.UnpackEncodedString(DFA312_specialS);
		private static readonly short[][] DFA312_transition;

		static DFA312()
		{
			int numStates = DFA312_transitionS.Length;
			DFA312_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA312_transition[i] = DFA.UnpackEncodedString(DFA312_transitionS[i]);
			}
		}

		public DFA312( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 312;
			this.eot = DFA312_eot;
			this.eof = DFA312_eof;
			this.min = DFA312_min;
			this.max = DFA312_max;
			this.accept = DFA312_accept;
			this.special = DFA312_special;
			this.transition = DFA312_transition;
		}

		public override string Description { get { return "()* loopback of 492:35: ( ( WS )* ',' ( WS )* for_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA324 : DFA
	{
		private const string DFA324_eotS =
			"\x4\xFFFF";
		private const string DFA324_eofS =
			"\x4\xFFFF";
		private const string DFA324_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA324_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA324_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA324_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA324_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\x44\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\x44\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA324_eot = DFA.UnpackEncodedString(DFA324_eotS);
		private static readonly short[] DFA324_eof = DFA.UnpackEncodedString(DFA324_eofS);
		private static readonly char[] DFA324_min = DFA.UnpackEncodedStringToUnsignedChars(DFA324_minS);
		private static readonly char[] DFA324_max = DFA.UnpackEncodedStringToUnsignedChars(DFA324_maxS);
		private static readonly short[] DFA324_accept = DFA.UnpackEncodedString(DFA324_acceptS);
		private static readonly short[] DFA324_special = DFA.UnpackEncodedString(DFA324_specialS);
		private static readonly short[][] DFA324_transition;

		static DFA324()
		{
			int numStates = DFA324_transitionS.Length;
			DFA324_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA324_transition[i] = DFA.UnpackEncodedString(DFA324_transitionS[i]);
			}
		}

		public DFA324( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 324;
			this.eot = DFA324_eot;
			this.eof = DFA324_eof;
			this.min = DFA324_min;
			this.max = DFA324_max;
			this.accept = DFA324_accept;
			this.special = DFA324_special;
			this.transition = DFA324_transition;
		}

		public override string Description { get { return "()* loopback of 502:20: ( ( WS )* ',' ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA329 : DFA
	{
		private const string DFA329_eotS =
			"\x4\xFFFF";
		private const string DFA329_eofS =
			"\x4\xFFFF";
		private const string DFA329_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA329_maxS =
			"\x2\xA9\x2\xFFFF";
		private const string DFA329_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA329_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA329_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x53\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA329_eot = DFA.UnpackEncodedString(DFA329_eotS);
		private static readonly short[] DFA329_eof = DFA.UnpackEncodedString(DFA329_eofS);
		private static readonly char[] DFA329_min = DFA.UnpackEncodedStringToUnsignedChars(DFA329_minS);
		private static readonly char[] DFA329_max = DFA.UnpackEncodedStringToUnsignedChars(DFA329_maxS);
		private static readonly short[] DFA329_accept = DFA.UnpackEncodedString(DFA329_acceptS);
		private static readonly short[] DFA329_special = DFA.UnpackEncodedString(DFA329_specialS);
		private static readonly short[][] DFA329_transition;

		static DFA329()
		{
			int numStates = DFA329_transitionS.Length;
			DFA329_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA329_transition[i] = DFA.UnpackEncodedString(DFA329_transitionS[i]);
			}
		}

		public DFA329( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 329;
			this.eot = DFA329_eot;
			this.eof = DFA329_eof;
			this.min = DFA329_min;
			this.max = DFA329_max;
			this.accept = DFA329_accept;
			this.special = DFA329_special;
			this.transition = DFA329_transition;
		}

		public override string Description { get { return "502:40: ( ( WS )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | ( WS )* 'then' ( WS )* inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA331 : DFA
	{
		private const string DFA331_eotS =
			"\x4\xFFFF";
		private const string DFA331_eofS =
			"\x4\xFFFF";
		private const string DFA331_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA331_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA331_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA331_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA331_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA331_eot = DFA.UnpackEncodedString(DFA331_eotS);
		private static readonly short[] DFA331_eof = DFA.UnpackEncodedString(DFA331_eofS);
		private static readonly char[] DFA331_min = DFA.UnpackEncodedStringToUnsignedChars(DFA331_minS);
		private static readonly char[] DFA331_max = DFA.UnpackEncodedStringToUnsignedChars(DFA331_maxS);
		private static readonly short[] DFA331_accept = DFA.UnpackEncodedString(DFA331_acceptS);
		private static readonly short[] DFA331_special = DFA.UnpackEncodedString(DFA331_specialS);
		private static readonly short[][] DFA331_transition;

		static DFA331()
		{
			int numStates = DFA331_transitionS.Length;
			DFA331_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA331_transition[i] = DFA.UnpackEncodedString(DFA331_transitionS[i]);
			}
		}

		public DFA331( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 331;
			this.eot = DFA331_eot;
			this.eof = DFA331_eof;
			this.min = DFA331_min;
			this.max = DFA331_max;
			this.accept = DFA331_accept;
			this.special = DFA331_special;
			this.transition = DFA331_transition;
		}

		public override string Description { get { return "508:13: ( ( WS )* expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA343 : DFA
	{
		private const string DFA343_eotS =
			"\x4\xFFFF";
		private const string DFA343_eofS =
			"\x4\xFFFF";
		private const string DFA343_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA343_maxS =
			"\x2\x71\x2\xFFFF";
		private const string DFA343_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA343_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA343_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\xA\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\xA\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA343_eot = DFA.UnpackEncodedString(DFA343_eotS);
		private static readonly short[] DFA343_eof = DFA.UnpackEncodedString(DFA343_eofS);
		private static readonly char[] DFA343_min = DFA.UnpackEncodedStringToUnsignedChars(DFA343_minS);
		private static readonly char[] DFA343_max = DFA.UnpackEncodedStringToUnsignedChars(DFA343_maxS);
		private static readonly short[] DFA343_accept = DFA.UnpackEncodedString(DFA343_acceptS);
		private static readonly short[] DFA343_special = DFA.UnpackEncodedString(DFA343_specialS);
		private static readonly short[][] DFA343_transition;

		static DFA343()
		{
			int numStates = DFA343_transitionS.Length;
			DFA343_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA343_transition[i] = DFA.UnpackEncodedString(DFA343_transitionS[i]);
			}
		}

		public DFA343( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 343;
			this.eot = DFA343_eot;
			this.eof = DFA343_eof;
			this.min = DFA343_min;
			this.max = DFA343_max;
			this.accept = DFA343_accept;
			this.special = DFA343_special;
			this.transition = DFA343_transition;
		}

		public override string Description { get { return "()* loopback of 512:10: ( ( WS )* ',' ( WS )* ident )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA356 : DFA
	{
		private const string DFA356_eotS =
			"\x4\xFFFF";
		private const string DFA356_eofS =
			"\x4\xFFFF";
		private const string DFA356_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA356_maxS =
			"\x2\x71\x2\xFFFF";
		private const string DFA356_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA356_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA356_transitionS =
			{
				"\x1\x1\x19\xFFFF\x1\x2\x1\xFFFF\x1\x3",
				"\x1\x1\x19\xFFFF\x1\x2\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA356_eot = DFA.UnpackEncodedString(DFA356_eotS);
		private static readonly short[] DFA356_eof = DFA.UnpackEncodedString(DFA356_eofS);
		private static readonly char[] DFA356_min = DFA.UnpackEncodedStringToUnsignedChars(DFA356_minS);
		private static readonly char[] DFA356_max = DFA.UnpackEncodedStringToUnsignedChars(DFA356_maxS);
		private static readonly short[] DFA356_accept = DFA.UnpackEncodedString(DFA356_acceptS);
		private static readonly short[] DFA356_special = DFA.UnpackEncodedString(DFA356_specialS);
		private static readonly short[][] DFA356_transition;

		static DFA356()
		{
			int numStates = DFA356_transitionS.Length;
			DFA356_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA356_transition[i] = DFA.UnpackEncodedString(DFA356_transitionS[i]);
			}
		}

		public DFA356( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 356;
			this.eot = DFA356_eot;
			this.eof = DFA356_eof;
			this.min = DFA356_min;
			this.max = DFA356_max;
			this.accept = DFA356_accept;
			this.special = DFA356_special;
			this.transition = DFA356_transition;
		}

		public override string Description { get { return "516:15: ( ( WS )* ':' ( WS )* type_name ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ( WS )* ':=' ( ( WS )* where_expr ( ( WS )* ',' ( WS )* where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA350 : DFA
	{
		private const string DFA350_eotS =
			"\x5\xFFFF";
		private const string DFA350_eofS =
			"\x5\xFFFF";
		private const string DFA350_minS =
			"\x1\x8\x1\x38\x3\xFFFF";
		private const string DFA350_maxS =
			"\x2\xB5\x3\xFFFF";
		private const string DFA350_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA350_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA350_transitionS =
			{
				"\x1\x4\x2F\xFFFF\x1\x4\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x3\x13\xFFFF\x1\x2"+
				"\x1\x4\x6\xFFFF\x1\x2\x1B\xFFFF\x2\x4\x1\xFFFF\x1\x4\x16\xFFFF\x2\x4"+
				"\x4\xFFFF\x1\x4",
				"\x1\x4\x1C\xFFFF\x1\x1\x7\xFFFF\x1\x3\x13\xFFFF\x1\x2\x1\x4\x6\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x4\x1\xFFFF\x1\x4\x16\xFFFF\x2\x4\x4\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA350_eot = DFA.UnpackEncodedString(DFA350_eotS);
		private static readonly short[] DFA350_eof = DFA.UnpackEncodedString(DFA350_eofS);
		private static readonly char[] DFA350_min = DFA.UnpackEncodedStringToUnsignedChars(DFA350_minS);
		private static readonly char[] DFA350_max = DFA.UnpackEncodedStringToUnsignedChars(DFA350_maxS);
		private static readonly short[] DFA350_accept = DFA.UnpackEncodedString(DFA350_acceptS);
		private static readonly short[] DFA350_special = DFA.UnpackEncodedString(DFA350_specialS);
		private static readonly short[][] DFA350_transition;

		static DFA350()
		{
			int numStates = DFA350_transitionS.Length;
			DFA350_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA350_transition[i] = DFA.UnpackEncodedString(DFA350_transitionS[i]);
			}
		}

		public DFA350( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 350;
			this.eot = DFA350_eot;
			this.eof = DFA350_eof;
			this.min = DFA350_min;
			this.max = DFA350_max;
			this.accept = DFA350_accept;
			this.special = DFA350_special;
			this.transition = DFA350_transition;
		}

		public override string Description { get { return "516:39: ( ( WS )* ( '=' | ':=' ) ( WS )* where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | ( WS )* bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA355 : DFA
	{
		private const string DFA355_eotS =
			"\x4\xFFFF";
		private const string DFA355_eofS =
			"\x4\xFFFF";
		private const string DFA355_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA355_maxS =
			"\x2\xB5\x2\xFFFF";
		private const string DFA355_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA355_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA355_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x2"+
				"\x22\xFFFF\x2\x2\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x3\xD\xFFFF\x1\x2\x22\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA355_eot = DFA.UnpackEncodedString(DFA355_eotS);
		private static readonly short[] DFA355_eof = DFA.UnpackEncodedString(DFA355_eofS);
		private static readonly char[] DFA355_min = DFA.UnpackEncodedStringToUnsignedChars(DFA355_minS);
		private static readonly char[] DFA355_max = DFA.UnpackEncodedStringToUnsignedChars(DFA355_maxS);
		private static readonly short[] DFA355_accept = DFA.UnpackEncodedString(DFA355_acceptS);
		private static readonly short[] DFA355_special = DFA.UnpackEncodedString(DFA355_specialS);
		private static readonly short[][] DFA355_transition;

		static DFA355()
		{
			int numStates = DFA355_transitionS.Length;
			DFA355_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA355_transition[i] = DFA.UnpackEncodedString(DFA355_transitionS[i]);
			}
		}

		public DFA355( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 355;
			this.eot = DFA355_eot;
			this.eof = DFA355_eof;
			this.min = DFA355_min;
			this.max = DFA355_max;
			this.accept = DFA355_accept;
			this.special = DFA355_special;
			this.transition = DFA355_transition;
		}

		public override string Description { get { return "()* loopback of 520:33: ( ( WS )* ',' ( WS )* where_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA365 : DFA
	{
		private const string DFA365_eotS =
			"\x7\xFFFF";
		private const string DFA365_eofS =
			"\x7\xFFFF";
		private const string DFA365_minS =
			"\x1\x8\x1\x38\x5\xFFFF";
		private const string DFA365_maxS =
			"\x2\xB7\x5\xFFFF";
		private const string DFA365_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5";
		private const string DFA365_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA365_transitionS =
			{
				"\x1\x6\x2F\xFFFF\x1\x6\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x6\x2\xFFFF\x1\x4\x1\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x5\x1\x2\x1\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x2\xD\xFFFF\x2\x6\x1\xFFFF\x1\x6\x16\xFFFF\x2\x6"+
				"\x4\xFFFF\x1\x6\x1\xFFFF\x1\x2",
				"\x1\x6\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x2\x3\xFFFF\x1\x6\x2\xFFFF"+
				"\x1\x4\x1\x2\x2\xFFFF\x1\x2\x5\xFFFF\x1\x5\x1\x2\x1\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x2\xD\xFFFF\x2\x6\x1\xFFFF\x1\x6\x16\xFFFF\x2\x6\x4\xFFFF\x1\x6"+
				"\x1\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA365_eot = DFA.UnpackEncodedString(DFA365_eotS);
		private static readonly short[] DFA365_eof = DFA.UnpackEncodedString(DFA365_eofS);
		private static readonly char[] DFA365_min = DFA.UnpackEncodedStringToUnsignedChars(DFA365_minS);
		private static readonly char[] DFA365_max = DFA.UnpackEncodedStringToUnsignedChars(DFA365_maxS);
		private static readonly short[] DFA365_accept = DFA.UnpackEncodedString(DFA365_acceptS);
		private static readonly short[] DFA365_special = DFA.UnpackEncodedString(DFA365_specialS);
		private static readonly short[][] DFA365_transition;

		static DFA365()
		{
			int numStates = DFA365_transitionS.Length;
			DFA365_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA365_transition[i] = DFA.UnpackEncodedString(DFA365_transitionS[i]);
			}
		}

		public DFA365( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 365;
			this.eot = DFA365_eot;
			this.eof = DFA365_eof;
			this.min = DFA365_min;
			this.max = DFA365_max;
			this.accept = DFA365_accept;
			this.special = DFA365_special;
			this.transition = DFA365_transition;
		}

		public override string Description { get { return "524:11: ( ( WS )* modify_expr_op ( WS )* where_expr -> ^( modify_expr_op lvalue where_expr ) | ( WS )* '?=' ( WS )* where_expr -> ^( '?=' lvalue where_expr ) | ( WS )* '<<' ( WS )* where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | ( WS )* '>>' ( WS )* where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA393 : DFA
	{
		private const string DFA393_eotS =
			"\xB\xFFFF";
		private const string DFA393_eofS =
			"\x2\xFFFF\x1\x4\x2\xFFFF\x1\x4\x5\xFFFF";
		private const string DFA393_minS =
			"\x1\x8\x1\x38\x1\x8\x2\xFFFF\x4\x8\x1\xFFFF\x1\x8";
		private const string DFA393_maxS =
			"\x2\xB5\x1\xBA\x2\xFFFF\x4\xBA\x1\xFFFF\x1\xBA";
		private const string DFA393_acceptS =
			"\x3\xFFFF\x1\x2\x1\x3\x4\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA393_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA393_transitionS =
			{
				"\x1\x4\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x4\xD\xFFFF\x1\x4"+
				"\x22\xFFFF\x2\x4\x1\xFFFF\x1\x4\x16\xFFFF\x2\x4\x3\xFFFF\x1\x3\x1\x4",
				"\x1\x5\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x4\xD\xFFFF\x1\x4\x22\xFFFF\x2\x4"+
				"\x1\xFFFF\x1\x4\x16\xFFFF\x2\x4\x3\xFFFF\x1\x3\x1\x4",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x6\x7\xFFFF\x1\x2\x1C\xFFFF\x2\x4\x4\xFFFF"+
				"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C"+
				"\xFFFF\x2\x4\x6\xFFFF\x1\x4\x1\xFFFF\x3\x4\x1\xFFFF\x8\x4\x2\xFFFF\x3"+
				"\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x3\x4\x1\xFFFF"+
				"\x1\x4\x2\xFFFF\x7\x4\x1\xFFFF\x2\x4\x3\xFFFF\x1\x4",
				"",
				"",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x7\x7\xFFFF\x1\x5\x1C\xFFFF\x2\x4\x4\xFFFF"+
				"\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C"+
				"\xFFFF\x2\x4\x6\xFFFF\x1\x4\x1\xFFFF\x3\x4\x1\xFFFF\x8\x4\x2\xFFFF\x3"+
				"\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x3\x4\x1\xFFFF"+
				"\x1\x4\x2\xFFFF\x7\x4\x1\xFFFF\x2\x4\x3\xFFFF\x1\x4",
				"\x1\x4\x26\xFFFF\x1\x4\x8\xFFFF\x1\x8\x1D\xFFFF\x1\x4\x4\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C\xFFFF"+
				"\x1\x4\xB\xFFFF\x1\x4\x4\xFFFF\x3\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x4\xFFFF\x5\x4\x2\xFFFF\x1"+
				"\x9\x1\x4\x4\xFFFF\x1\x4",
				"\x1\x4\x26\xFFFF\x1\x4\x8\xFFFF\x1\xA\x1D\xFFFF\x1\x4\x4\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C\xFFFF"+
				"\x1\x4\xB\xFFFF\x1\x4\x4\xFFFF\x3\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x4\xFFFF\x5\x4\x2\xFFFF\x1"+
				"\x9\x1\x4\x4\xFFFF\x1\x4",
				"\x1\x4\x26\xFFFF\x1\x4\x8\xFFFF\x1\x8\x1D\xFFFF\x1\x4\x4\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C\xFFFF"+
				"\x1\x4\xB\xFFFF\x1\x4\x4\xFFFF\x3\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x4\xFFFF\x5\x4\x2\xFFFF\x1"+
				"\x9\x1\x4\x4\xFFFF\x1\x4",
				"",
				"\x1\x4\x26\xFFFF\x1\x4\x8\xFFFF\x1\xA\x1D\xFFFF\x1\x4\x4\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x1C\xFFFF"+
				"\x1\x4\xB\xFFFF\x1\x4\x4\xFFFF\x3\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3"+
				"\xFFFF\x1\x4\x2\xFFFF\x1\x4\x3\xFFFF\x1\x4\x4\xFFFF\x5\x4\x2\xFFFF\x1"+
				"\x9\x1\x4\x4\xFFFF\x1\x4"
			};

		private static readonly short[] DFA393_eot = DFA.UnpackEncodedString(DFA393_eotS);
		private static readonly short[] DFA393_eof = DFA.UnpackEncodedString(DFA393_eofS);
		private static readonly char[] DFA393_min = DFA.UnpackEncodedStringToUnsignedChars(DFA393_minS);
		private static readonly char[] DFA393_max = DFA.UnpackEncodedStringToUnsignedChars(DFA393_maxS);
		private static readonly short[] DFA393_accept = DFA.UnpackEncodedString(DFA393_acceptS);
		private static readonly short[] DFA393_special = DFA.UnpackEncodedString(DFA393_specialS);
		private static readonly short[][] DFA393_transition;

		static DFA393()
		{
			int numStates = DFA393_transitionS.Length;
			DFA393_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA393_transition[i] = DFA.UnpackEncodedString(DFA393_transitionS[i]);
			}
		}

		public DFA393( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 393;
			this.eot = DFA393_eot;
			this.eof = DFA393_eof;
			this.min = DFA393_min;
			this.max = DFA393_max;
			this.accept = DFA393_accept;
			this.special = DFA393_special;
			this.transition = DFA393_transition;
		}

		public override string Description { get { return "536:19: ( ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* 'where' ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA385 : DFA
	{
		private const string DFA385_eotS =
			"\x4\xFFFF";
		private const string DFA385_eofS =
			"\x4\xFFFF";
		private const string DFA385_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA385_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA385_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA385_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA385_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF\x1\x2"+
				"\xB\xFFFF\x1\x2\x4\xFFFF\x3\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x5\x2\x3\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF\x1\x2"+
				"\xB\xFFFF\x1\x2\x4\xFFFF\x3\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x5\x2\x3\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA385_eot = DFA.UnpackEncodedString(DFA385_eotS);
		private static readonly short[] DFA385_eof = DFA.UnpackEncodedString(DFA385_eofS);
		private static readonly char[] DFA385_min = DFA.UnpackEncodedStringToUnsignedChars(DFA385_minS);
		private static readonly char[] DFA385_max = DFA.UnpackEncodedStringToUnsignedChars(DFA385_maxS);
		private static readonly short[] DFA385_accept = DFA.UnpackEncodedString(DFA385_acceptS);
		private static readonly short[] DFA385_special = DFA.UnpackEncodedString(DFA385_specialS);
		private static readonly short[][] DFA385_transition;

		static DFA385()
		{
			int numStates = DFA385_transitionS.Length;
			DFA385_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA385_transition[i] = DFA.UnpackEncodedString(DFA385_transitionS[i]);
			}
		}

		public DFA385( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 385;
			this.eot = DFA385_eot;
			this.eof = DFA385_eof;
			this.min = DFA385_min;
			this.max = DFA385_max;
			this.accept = DFA385_accept;
			this.special = DFA385_special;
			this.transition = DFA385_transition;
		}

		public override string Description { get { return "536:58: ( ( WS )* where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA377 : DFA
	{
		private const string DFA377_eotS =
			"\x4\xFFFF";
		private const string DFA377_eofS =
			"\x4\xFFFF";
		private const string DFA377_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA377_maxS =
			"\x2\x38\x2\xFFFF";
		private const string DFA377_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA377_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA377_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x1",
				"\x1\x2\x27\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA377_eot = DFA.UnpackEncodedString(DFA377_eotS);
		private static readonly short[] DFA377_eof = DFA.UnpackEncodedString(DFA377_eofS);
		private static readonly char[] DFA377_min = DFA.UnpackEncodedStringToUnsignedChars(DFA377_minS);
		private static readonly char[] DFA377_max = DFA.UnpackEncodedStringToUnsignedChars(DFA377_maxS);
		private static readonly short[] DFA377_accept = DFA.UnpackEncodedString(DFA377_acceptS);
		private static readonly short[] DFA377_special = DFA.UnpackEncodedString(DFA377_specialS);
		private static readonly short[][] DFA377_transition;

		static DFA377()
		{
			int numStates = DFA377_transitionS.Length;
			DFA377_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA377_transition[i] = DFA.UnpackEncodedString(DFA377_transitionS[i]);
			}
		}

		public DFA377( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 377;
			this.eot = DFA377_eot;
			this.eof = DFA377_eof;
			this.min = DFA377_min;
			this.max = DFA377_max;
			this.accept = DFA377_accept;
			this.special = DFA377_special;
			this.transition = DFA377_transition;
		}

		public override string Description { get { return "536:75: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA415 : DFA
	{
		private const string DFA415_eotS =
			"\x4\xFFFF";
		private const string DFA415_eofS =
			"\x4\xFFFF";
		private const string DFA415_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA415_maxS =
			"\x2\x98\x2\xFFFF";
		private const string DFA415_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA415_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA415_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x42\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x42\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA415_eot = DFA.UnpackEncodedString(DFA415_eotS);
		private static readonly short[] DFA415_eof = DFA.UnpackEncodedString(DFA415_eofS);
		private static readonly char[] DFA415_min = DFA.UnpackEncodedStringToUnsignedChars(DFA415_minS);
		private static readonly char[] DFA415_max = DFA.UnpackEncodedStringToUnsignedChars(DFA415_maxS);
		private static readonly short[] DFA415_accept = DFA.UnpackEncodedString(DFA415_acceptS);
		private static readonly short[] DFA415_special = DFA.UnpackEncodedString(DFA415_specialS);
		private static readonly short[][] DFA415_transition;

		static DFA415()
		{
			int numStates = DFA415_transitionS.Length;
			DFA415_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA415_transition[i] = DFA.UnpackEncodedString(DFA415_transitionS[i]);
			}
		}

		public DFA415( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 415;
			this.eot = DFA415_eot;
			this.eof = DFA415_eof;
			this.min = DFA415_min;
			this.max = DFA415_max;
			this.accept = DFA415_accept;
			this.special = DFA415_special;
			this.transition = DFA415_transition;
		}

		public override string Description { get { return "547:25: ( ( WS )* 'in' ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( WS )* ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( WS )* ( NEWLINE )+ )+ ( WS )* 'in' ( WS )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA404 : DFA
	{
		private const string DFA404_eotS =
			"\x4\xFFFF";
		private const string DFA404_eofS =
			"\x4\xFFFF";
		private const string DFA404_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA404_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA404_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA404_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA404_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA404_eot = DFA.UnpackEncodedString(DFA404_eotS);
		private static readonly short[] DFA404_eof = DFA.UnpackEncodedString(DFA404_eofS);
		private static readonly char[] DFA404_min = DFA.UnpackEncodedStringToUnsignedChars(DFA404_minS);
		private static readonly char[] DFA404_max = DFA.UnpackEncodedStringToUnsignedChars(DFA404_maxS);
		private static readonly short[] DFA404_accept = DFA.UnpackEncodedString(DFA404_acceptS);
		private static readonly short[] DFA404_special = DFA.UnpackEncodedString(DFA404_specialS);
		private static readonly short[][] DFA404_transition;

		static DFA404()
		{
			int numStates = DFA404_transitionS.Length;
			DFA404_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA404_transition[i] = DFA.UnpackEncodedString(DFA404_transitionS[i]);
			}
		}

		public DFA404( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 404;
			this.eot = DFA404_eot;
			this.eof = DFA404_eof;
			this.min = DFA404_min;
			this.max = DFA404_max;
			this.accept = DFA404_accept;
			this.special = DFA404_special;
			this.transition = DFA404_transition;
		}

		public override string Description { get { return "547:36: ( ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( WS )* ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | ( WS )* expr -> ^( Expr_Where expr ( where_item )+ ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA420 : DFA
	{
		private const string DFA420_eotS =
			"\x4\xFFFF";
		private const string DFA420_eofS =
			"\x4\xFFFF";
		private const string DFA420_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA420_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA420_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA420_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA420_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3"+
				"\xFFFF\x1\x3\x14\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x3"+
				"\xFFFF\x1\x3\x14\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA420_eot = DFA.UnpackEncodedString(DFA420_eotS);
		private static readonly short[] DFA420_eof = DFA.UnpackEncodedString(DFA420_eofS);
		private static readonly char[] DFA420_min = DFA.UnpackEncodedStringToUnsignedChars(DFA420_minS);
		private static readonly char[] DFA420_max = DFA.UnpackEncodedStringToUnsignedChars(DFA420_maxS);
		private static readonly short[] DFA420_accept = DFA.UnpackEncodedString(DFA420_acceptS);
		private static readonly short[] DFA420_special = DFA.UnpackEncodedString(DFA420_specialS);
		private static readonly short[][] DFA420_transition;

		static DFA420()
		{
			int numStates = DFA420_transitionS.Length;
			DFA420_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA420_transition[i] = DFA.UnpackEncodedString(DFA420_transitionS[i]);
			}
		}

		public DFA420( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 420;
			this.eot = DFA420_eot;
			this.eof = DFA420_eof;
			this.min = DFA420_min;
			this.max = DFA420_max;
			this.accept = DFA420_accept;
			this.special = DFA420_special;
			this.transition = DFA420_transition;
		}

		public override string Description { get { return "561:12: ( ( WS )* expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA423 : DFA
	{
		private const string DFA423_eotS =
			"\x4\xFFFF";
		private const string DFA423_eofS =
			"\x4\xFFFF";
		private const string DFA423_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA423_maxS =
			"\x2\xA5\x2\xFFFF";
		private const string DFA423_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA423_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA423_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x4F\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x4F\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA423_eot = DFA.UnpackEncodedString(DFA423_eotS);
		private static readonly short[] DFA423_eof = DFA.UnpackEncodedString(DFA423_eofS);
		private static readonly char[] DFA423_min = DFA.UnpackEncodedStringToUnsignedChars(DFA423_minS);
		private static readonly char[] DFA423_max = DFA.UnpackEncodedStringToUnsignedChars(DFA423_maxS);
		private static readonly short[] DFA423_accept = DFA.UnpackEncodedString(DFA423_acceptS);
		private static readonly short[] DFA423_special = DFA.UnpackEncodedString(DFA423_specialS);
		private static readonly short[][] DFA423_transition;

		static DFA423()
		{
			int numStates = DFA423_transitionS.Length;
			DFA423_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA423_transition[i] = DFA.UnpackEncodedString(DFA423_transitionS[i]);
			}
		}

		public DFA423( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 423;
			this.eot = DFA423_eot;
			this.eof = DFA423_eof;
			this.min = DFA423_min;
			this.max = DFA423_max;
			this.accept = DFA423_accept;
			this.special = DFA423_special;
			this.transition = DFA423_transition;
		}

		public override string Description { get { return "561:24: ( ( WS )* 'returns' ( WS )* type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA435 : DFA
	{
		private const string DFA435_eotS =
			"\x4\xFFFF";
		private const string DFA435_eofS =
			"\x4\xFFFF";
		private const string DFA435_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA435_maxS =
			"\x2\xB8\x2\xFFFF";
		private const string DFA435_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA435_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA435_transitionS =
			{
				"\x1\x1\x22\xFFFF\x1\x2\x3F\xFFFF\x1\x3",
				"\x1\x1\x22\xFFFF\x1\x2\x3F\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA435_eot = DFA.UnpackEncodedString(DFA435_eotS);
		private static readonly short[] DFA435_eof = DFA.UnpackEncodedString(DFA435_eofS);
		private static readonly char[] DFA435_min = DFA.UnpackEncodedStringToUnsignedChars(DFA435_minS);
		private static readonly char[] DFA435_max = DFA.UnpackEncodedStringToUnsignedChars(DFA435_maxS);
		private static readonly short[] DFA435_accept = DFA.UnpackEncodedString(DFA435_acceptS);
		private static readonly short[] DFA435_special = DFA.UnpackEncodedString(DFA435_specialS);
		private static readonly short[][] DFA435_transition;

		static DFA435()
		{
			int numStates = DFA435_transitionS.Length;
			DFA435_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA435_transition[i] = DFA.UnpackEncodedString(DFA435_transitionS[i]);
			}
		}

		public DFA435( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 435;
			this.eot = DFA435_eot;
			this.eof = DFA435_eof;
			this.min = DFA435_min;
			this.max = DFA435_max;
			this.accept = DFA435_accept;
			this.special = DFA435_special;
			this.transition = DFA435_transition;
		}

		public override string Description { get { return "571:62: ( ( WS )* '<|' ( WS )* list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | ( WS )* '|>' ( WS )* list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA442 : DFA
	{
		private const string DFA442_eotS =
			"\x4\xFFFF";
		private const string DFA442_eofS =
			"\x4\xFFFF";
		private const string DFA442_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA442_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA442_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA442_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA442_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA442_eot = DFA.UnpackEncodedString(DFA442_eotS);
		private static readonly short[] DFA442_eof = DFA.UnpackEncodedString(DFA442_eofS);
		private static readonly char[] DFA442_min = DFA.UnpackEncodedStringToUnsignedChars(DFA442_minS);
		private static readonly char[] DFA442_max = DFA.UnpackEncodedStringToUnsignedChars(DFA442_maxS);
		private static readonly short[] DFA442_accept = DFA.UnpackEncodedString(DFA442_acceptS);
		private static readonly short[] DFA442_special = DFA.UnpackEncodedString(DFA442_specialS);
		private static readonly short[][] DFA442_transition;

		static DFA442()
		{
			int numStates = DFA442_transitionS.Length;
			DFA442_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA442_transition[i] = DFA.UnpackEncodedString(DFA442_transitionS[i]);
			}
		}

		public DFA442( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 442;
			this.eot = DFA442_eot;
			this.eof = DFA442_eof;
			this.min = DFA442_min;
			this.max = DFA442_max;
			this.accept = DFA442_accept;
			this.special = DFA442_special;
			this.transition = DFA442_transition;
		}

		public override string Description { get { return "()* loopback of 578:78: ( ( WS )* ',' ( WS )* for_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA451 : DFA
	{
		private const string DFA451_eotS =
			"\x8\xFFFF";
		private const string DFA451_eofS =
			"\x8\xFFFF";
		private const string DFA451_minS =
			"\x6\x8\x2\xFFFF";
		private const string DFA451_maxS =
			"\x6\xBA\x2\xFFFF";
		private const string DFA451_acceptS =
			"\x6\xFFFF\x1\x1\x1\x2";
		private const string DFA451_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA451_transitionS =
			{
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x6\x1\x4\x7\xFFFF\x1\x3\x1\x6\x4\xFFFF\x1\x6\x16"+
				"\xFFFF\x1\x1\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF"+
				"\x2\x6\x1\xFFFF\x1\x2\x2\x6\x1C\xFFFF\x2\x6\x1\x7\x1A\xFFFF\x2\x6\x18"+
				"\xFFFF\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA451_eot = DFA.UnpackEncodedString(DFA451_eotS);
		private static readonly short[] DFA451_eof = DFA.UnpackEncodedString(DFA451_eofS);
		private static readonly char[] DFA451_min = DFA.UnpackEncodedStringToUnsignedChars(DFA451_minS);
		private static readonly char[] DFA451_max = DFA.UnpackEncodedStringToUnsignedChars(DFA451_maxS);
		private static readonly short[] DFA451_accept = DFA.UnpackEncodedString(DFA451_acceptS);
		private static readonly short[] DFA451_special = DFA.UnpackEncodedString(DFA451_specialS);
		private static readonly short[][] DFA451_transition;

		static DFA451()
		{
			int numStates = DFA451_transitionS.Length;
			DFA451_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA451_transition[i] = DFA.UnpackEncodedString(DFA451_transitionS[i]);
			}
		}

		public DFA451( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 451;
			this.eot = DFA451_eot;
			this.eof = DFA451_eof;
			this.min = DFA451_min;
			this.max = DFA451_max;
			this.accept = DFA451_accept;
			this.special = DFA451_special;
			this.transition = DFA451_transition;
		}

		public override string Description { get { return "579:8: ( ( WS | ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA450 : DFA
	{
		private const string DFA450_eotS =
			"\x9\xFFFF";
		private const string DFA450_eofS =
			"\x9\xFFFF";
		private const string DFA450_minS =
			"\x6\x8\x1\xFFFF\x1\x8\x1\xFFFF";
		private const string DFA450_maxS =
			"\x2\x85\x4\xBA\x1\xFFFF\x1\xBA\x1\xFFFF";
		private const string DFA450_acceptS =
			"\x6\xFFFF\x1\x2\x1\xFFFF\x1\x1";
		private const string DFA450_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA450_transitionS =
			{
				"\x1\x5\x27\xFFFF\x1\x4\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x2"+
				"\x20\xFFFF\x1\x6",
				"\x1\x5\x27\xFFFF\x1\x4\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\xE\xFFFF\x1\x2"+
				"\x20\xFFFF\x1\x6",
				"\x1\x5\x26\xFFFF\x1\x8\x1\x4\x7\xFFFF\x1\x3\x1\x8\x4\xFFFF\x1\x8\x16"+
				"\xFFFF\x1\x7\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x2\x2\x8\x1C\xFFFF\x2\x8\x1\x6\x1A\xFFFF\x2\x8\x18"+
				"\xFFFF\x1\x8",
				"\x1\x5\x26\xFFFF\x1\x8\x1\x4\x7\xFFFF\x1\x3\x1\x8\x4\xFFFF\x1\x8\x16"+
				"\xFFFF\x1\x7\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x2\x2\x8\x1C\xFFFF\x2\x8\x1\x6\x1A\xFFFF\x2\x8\x18"+
				"\xFFFF\x1\x8",
				"\x1\x5\x26\xFFFF\x1\x8\x1\x4\x7\xFFFF\x1\x3\x1\x8\x4\xFFFF\x1\x8\x16"+
				"\xFFFF\x1\x7\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x2\x2\x8\x1C\xFFFF\x2\x8\x1\x6\x1A\xFFFF\x2\x8\x18"+
				"\xFFFF\x1\x8",
				"\x1\x5\x26\xFFFF\x1\x8\x1\x4\x7\xFFFF\x1\x3\x1\x8\x4\xFFFF\x1\x8\x16"+
				"\xFFFF\x1\x7\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x2\x2\x8\x1C\xFFFF\x2\x8\x1\x6\x1A\xFFFF\x2\x8\x18"+
				"\xFFFF\x1\x8",
				"",
				"\x1\x6\x26\xFFFF\x1\x8\x1\x6\x7\xFFFF\x1\x6\x1\x8\x4\xFFFF\x1\x8\x16"+
				"\xFFFF\x1\x7\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF\x1\x8\x1\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x6\x2\x8\x1C\xFFFF\x2\x8\x1\x6\x1A\xFFFF\x2\x8\x18"+
				"\xFFFF\x1\x8",
				""
			};

		private static readonly short[] DFA450_eot = DFA.UnpackEncodedString(DFA450_eotS);
		private static readonly short[] DFA450_eof = DFA.UnpackEncodedString(DFA450_eofS);
		private static readonly char[] DFA450_min = DFA.UnpackEncodedStringToUnsignedChars(DFA450_minS);
		private static readonly char[] DFA450_max = DFA.UnpackEncodedStringToUnsignedChars(DFA450_maxS);
		private static readonly short[] DFA450_accept = DFA.UnpackEncodedString(DFA450_acceptS);
		private static readonly short[] DFA450_special = DFA.UnpackEncodedString(DFA450_specialS);
		private static readonly short[][] DFA450_transition;

		static DFA450()
		{
			int numStates = DFA450_transitionS.Length;
			DFA450_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA450_transition[i] = DFA.UnpackEncodedString(DFA450_transitionS[i]);
			}
		}

		public DFA450( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 450;
			this.eot = DFA450_eot;
			this.eof = DFA450_eof;
			this.min = DFA450_min;
			this.max = DFA450_max;
			this.accept = DFA450_accept;
			this.special = DFA450_special;
			this.transition = DFA450_transition;
		}

		public override string Description { get { return "()* loopback of 579:59: ( ( WS )* ( ',' | NEWLINE | INDENT | DEDENT )+ ( WS )* feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA465 : DFA
	{
		private const string DFA465_eotS =
			"\x11\xFFFF";
		private const string DFA465_eofS =
			"\x11\xFFFF";
		private const string DFA465_minS =
			"\x2\x2F\x1\xFFFF\x1\x2F\x1\x55\x1\xFFFF\x1\x55\x3\x2F\x1\x55\x1\x2F\x2"+
			"\x55\x2\x2F\x1\x55";
		private const string DFA465_maxS =
			"\x2\xBA\x1\xFFFF\x1\xBA\x1\xB9\x1\xFFFF\x1\xB9\x1\x55\x1\xBA\x1\x55\x1"+
			"\xB9\x1\xBA\x2\xB9\x2\x55\x1\xB9";
		private const string DFA465_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\xB\xFFFF";
		private const string DFA465_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA465_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1C\xFFFF\x2\x2\x18\xFFFF\x1\x2",
				"\x1\x4\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x3\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\x5\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x9\xFFFF\x1\x2\xC\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\xF\xFFFF\x1\x2",
				"",
				"\x1\x4\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x3\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\x5\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x9\xFFFF\x1\x2\xC\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x4\xFFFF\x2\x2\x2\xFFFF\x1\x2\xF\xFFFF\x1\x2",
				"\x1\x6\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\x7\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2",
				"",
				"\x1\x6\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\x7\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2",
				"\x1\xA\x25\xFFFF\x1\x9",
				"\x1\xC\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\xB\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"\x1\xA\x25\xFFFF\x1\x9",
				"\x1\x6\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\x7\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2",
				"\x1\xC\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\xB\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"\x1\xD\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\xE\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2",
				"\x1\xD\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\xE\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2",
				"\x1\x10\x25\xFFFF\x1\xF",
				"\x1\x10\x25\xFFFF\x1\xF",
				"\x1\xD\x1\xFFFF\xD\x2\x1\x8\x2\x2\x1\xFFFF\x7\x2\x1\x5\x1\xE\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF"+
				"\x4\x2\xF\xFFFF\x2\x2\x7\xFFFF\x1\x2\x13\xFFFF\x4\x2"
			};

		private static readonly short[] DFA465_eot = DFA.UnpackEncodedString(DFA465_eotS);
		private static readonly short[] DFA465_eof = DFA.UnpackEncodedString(DFA465_eofS);
		private static readonly char[] DFA465_min = DFA.UnpackEncodedStringToUnsignedChars(DFA465_minS);
		private static readonly char[] DFA465_max = DFA.UnpackEncodedStringToUnsignedChars(DFA465_maxS);
		private static readonly short[] DFA465_accept = DFA.UnpackEncodedString(DFA465_acceptS);
		private static readonly short[] DFA465_special = DFA.UnpackEncodedString(DFA465_specialS);
		private static readonly short[][] DFA465_transition;

		static DFA465()
		{
			int numStates = DFA465_transitionS.Length;
			DFA465_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA465_transition[i] = DFA.UnpackEncodedString(DFA465_transitionS[i]);
			}
		}

		public DFA465( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 465;
			this.eot = DFA465_eot;
			this.eof = DFA465_eof;
			this.min = DFA465_min;
			this.max = DFA465_max;
			this.accept = DFA465_accept;
			this.special = DFA465_special;
			this.transition = DFA465_transition;
		}

		public override string Description { get { return "593:1: lambda_expr : ( '(' ( ( WS )* func_args )? ( WS )* ')' ( ( WS )* lambda_type )? ( WS )* lambda_expr_op ( WS )* lambda_value -> ^( Expr_Lambda lambda_expr_op ( func_args )? ( lambda_type )? lambda_value ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA459 : DFA
	{
		private const string DFA459_eotS =
			"\x4\xFFFF";
		private const string DFA459_eofS =
			"\x4\xFFFF";
		private const string DFA459_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA459_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA459_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA459_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA459_transitionS =
			{
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA459_eot = DFA.UnpackEncodedString(DFA459_eotS);
		private static readonly short[] DFA459_eof = DFA.UnpackEncodedString(DFA459_eofS);
		private static readonly char[] DFA459_min = DFA.UnpackEncodedStringToUnsignedChars(DFA459_minS);
		private static readonly char[] DFA459_max = DFA.UnpackEncodedStringToUnsignedChars(DFA459_maxS);
		private static readonly short[] DFA459_accept = DFA.UnpackEncodedString(DFA459_acceptS);
		private static readonly short[] DFA459_special = DFA.UnpackEncodedString(DFA459_specialS);
		private static readonly short[][] DFA459_transition;

		static DFA459()
		{
			int numStates = DFA459_transitionS.Length;
			DFA459_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA459_transition[i] = DFA.UnpackEncodedString(DFA459_transitionS[i]);
			}
		}

		public DFA459( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 459;
			this.eot = DFA459_eot;
			this.eof = DFA459_eof;
			this.min = DFA459_min;
			this.max = DFA459_max;
			this.accept = DFA459_accept;
			this.special = DFA459_special;
			this.transition = DFA459_transition;
		}

		public override string Description { get { return "594:8: ( ( WS )* func_args )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA462 : DFA
	{
		private const string DFA462_eotS =
			"\x4\xFFFF";
		private const string DFA462_eofS =
			"\x4\xFFFF";
		private const string DFA462_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA462_maxS =
			"\x2\x7C\x2\xFFFF";
		private const string DFA462_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA462_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA462_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x9\xFFFF\x1\x3\x1\xFFFF\x1\x3\x11\xFFFF\x2\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x9\xFFFF\x1\x3\x1\xFFFF\x1\x3\x11\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA462_eot = DFA.UnpackEncodedString(DFA462_eotS);
		private static readonly short[] DFA462_eof = DFA.UnpackEncodedString(DFA462_eofS);
		private static readonly char[] DFA462_min = DFA.UnpackEncodedStringToUnsignedChars(DFA462_minS);
		private static readonly char[] DFA462_max = DFA.UnpackEncodedStringToUnsignedChars(DFA462_maxS);
		private static readonly short[] DFA462_accept = DFA.UnpackEncodedString(DFA462_acceptS);
		private static readonly short[] DFA462_special = DFA.UnpackEncodedString(DFA462_specialS);
		private static readonly short[][] DFA462_transition;

		static DFA462()
		{
			int numStates = DFA462_transitionS.Length;
			DFA462_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA462_transition[i] = DFA.UnpackEncodedString(DFA462_transitionS[i]);
			}
		}

		public DFA462( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 462;
			this.eot = DFA462_eot;
			this.eof = DFA462_eof;
			this.min = DFA462_min;
			this.max = DFA462_max;
			this.accept = DFA462_accept;
			this.special = DFA462_special;
			this.transition = DFA462_transition;
		}

		public override string Description { get { return "594:33: ( ( WS )* lambda_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA471 : DFA
	{
		private const string DFA471_eotS =
			"\x5\xFFFF";
		private const string DFA471_eofS =
			"\x5\xFFFF";
		private const string DFA471_minS =
			"\x2\x8\x3\xFFFF";
		private const string DFA471_maxS =
			"\x2\xB8\x3\xFFFF";
		private const string DFA471_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3";
		private const string DFA471_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA471_transitionS =
			{
				"\x1\x4\x27\xFFFF\x1\x4\x7\xFFFF\x1\x4\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\x4\x3"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\x4\x3\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x4\x1\x3\x2\xFFFF\x1\x4\x3\xFFFF\x1\x2\x4\xFFFF\x1\x4\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x4\x4\xFFFF\x2\x4\x1\xFFFF\x1\x4\xC\xFFFF"+
				"\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x3\xFFFF\x2\x4\x1"+
				"\xFFFF\x1\x2\x1\x4",
				"\x1\x4\x27\xFFFF\x1\x4\x7\xFFFF\x1\x4\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\x4\x3"+
				"\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\x4\x3\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x4\x1\x3\x2\xFFFF\x1\x4\x3\xFFFF\x1\x2\x4\xFFFF\x1\x4\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x4\x5\xFFFF\x1\x4\x4\xFFFF\x2\x4\x1\xFFFF\x1\x4\xC\xFFFF"+
				"\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF\x2\x4\x2\xFFFF\x2\x4\x3\xFFFF\x2\x4\x1"+
				"\xFFFF\x1\x2\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA471_eot = DFA.UnpackEncodedString(DFA471_eotS);
		private static readonly short[] DFA471_eof = DFA.UnpackEncodedString(DFA471_eofS);
		private static readonly char[] DFA471_min = DFA.UnpackEncodedStringToUnsignedChars(DFA471_minS);
		private static readonly char[] DFA471_max = DFA.UnpackEncodedStringToUnsignedChars(DFA471_maxS);
		private static readonly short[] DFA471_accept = DFA.UnpackEncodedString(DFA471_acceptS);
		private static readonly short[] DFA471_special = DFA.UnpackEncodedString(DFA471_specialS);
		private static readonly short[][] DFA471_transition;

		static DFA471()
		{
			int numStates = DFA471_transitionS.Length;
			DFA471_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA471_transition[i] = DFA.UnpackEncodedString(DFA471_transitionS[i]);
			}
		}

		public DFA471( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 471;
			this.eot = DFA471_eot;
			this.eof = DFA471_eof;
			this.min = DFA471_min;
			this.max = DFA471_max;
			this.accept = DFA471_accept;
			this.special = DFA471_special;
			this.transition = DFA471_transition;
		}

		public override string Description { get { return "600:14: ( ( WS )* ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ ( WS )* cond_expr | ( ( WS )* '=' ^ ( WS )* cond_expr )+ )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA470 : DFA
	{
		private const string DFA470_eotS =
			"\x4\xFFFF";
		private const string DFA470_eofS =
			"\x4\xFFFF";
		private const string DFA470_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA470_maxS =
			"\x2\xB8\x2\xFFFF";
		private const string DFA470_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA470_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA470_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2"+
				"\x5\xFFFF\x1\x2\xD\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x2\x8"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA470_eot = DFA.UnpackEncodedString(DFA470_eotS);
		private static readonly short[] DFA470_eof = DFA.UnpackEncodedString(DFA470_eofS);
		private static readonly char[] DFA470_min = DFA.UnpackEncodedStringToUnsignedChars(DFA470_minS);
		private static readonly char[] DFA470_max = DFA.UnpackEncodedStringToUnsignedChars(DFA470_maxS);
		private static readonly short[] DFA470_accept = DFA.UnpackEncodedString(DFA470_acceptS);
		private static readonly short[] DFA470_special = DFA.UnpackEncodedString(DFA470_specialS);
		private static readonly short[][] DFA470_transition;

		static DFA470()
		{
			int numStates = DFA470_transitionS.Length;
			DFA470_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA470_transition[i] = DFA.UnpackEncodedString(DFA470_transitionS[i]);
			}
		}

		public DFA470( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 470;
			this.eot = DFA470_eot;
			this.eof = DFA470_eof;
			this.min = DFA470_min;
			this.max = DFA470_max;
			this.accept = DFA470_accept;
			this.special = DFA470_special;
			this.transition = DFA470_transition;
		}

		public override string Description { get { return "()+ loopback of 601:7: ( ( WS )* '=' ^ ( WS )* cond_expr )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA478 : DFA
	{
		private const string DFA478_eotS =
			"\x4\xFFFF";
		private const string DFA478_eofS =
			"\x4\xFFFF";
		private const string DFA478_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA478_maxS =
			"\x2\xB8\x2\xFFFF";
		private const string DFA478_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA478_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA478_transitionS =
			{
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\x2\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2"+
				"\x3",
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\x2\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA478_eot = DFA.UnpackEncodedString(DFA478_eotS);
		private static readonly short[] DFA478_eof = DFA.UnpackEncodedString(DFA478_eofS);
		private static readonly char[] DFA478_min = DFA.UnpackEncodedStringToUnsignedChars(DFA478_minS);
		private static readonly char[] DFA478_max = DFA.UnpackEncodedStringToUnsignedChars(DFA478_maxS);
		private static readonly short[] DFA478_accept = DFA.UnpackEncodedString(DFA478_acceptS);
		private static readonly short[] DFA478_special = DFA.UnpackEncodedString(DFA478_specialS);
		private static readonly short[][] DFA478_transition;

		static DFA478()
		{
			int numStates = DFA478_transitionS.Length;
			DFA478_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA478_transition[i] = DFA.UnpackEncodedString(DFA478_transitionS[i]);
			}
		}

		public DFA478( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 478;
			this.eot = DFA478_eot;
			this.eof = DFA478_eof;
			this.min = DFA478_min;
			this.max = DFA478_max;
			this.accept = DFA478_accept;
			this.special = DFA478_special;
			this.transition = DFA478_transition;
		}

		public override string Description { get { return "607:22: ( ( WS )* '?' ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA477 : DFA
	{
		private const string DFA477_eotS =
			"\x4\xFFFF";
		private const string DFA477_eofS =
			"\x4\xFFFF";
		private const string DFA477_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA477_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA477_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA477_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA477_transitionS =
			{
				"\x1\x3\x26\xFFFF\x1\x2\x1\x3\x7\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16"+
				"\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\x3\x1"+
				"\x2\x1\x3\x2\x2\x2\x3\x2\x2\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4"+
				"\xFFFF\x2\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x2\x3\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x2",
				"\x1\x3\x26\xFFFF\x1\x2\x1\x3\x7\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16"+
				"\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\x3\x1"+
				"\x2\x1\x3\x2\x2\x2\x3\x2\x2\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4"+
				"\xFFFF\x2\x3\x1\xFFFF\x1\x3\x7\xFFFF\x2\x2\x3\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA477_eot = DFA.UnpackEncodedString(DFA477_eotS);
		private static readonly short[] DFA477_eof = DFA.UnpackEncodedString(DFA477_eofS);
		private static readonly char[] DFA477_min = DFA.UnpackEncodedStringToUnsignedChars(DFA477_minS);
		private static readonly char[] DFA477_max = DFA.UnpackEncodedStringToUnsignedChars(DFA477_maxS);
		private static readonly short[] DFA477_accept = DFA.UnpackEncodedString(DFA477_acceptS);
		private static readonly short[] DFA477_special = DFA.UnpackEncodedString(DFA477_specialS);
		private static readonly short[][] DFA477_transition;

		static DFA477()
		{
			int numStates = DFA477_transitionS.Length;
			DFA477_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA477_transition[i] = DFA.UnpackEncodedString(DFA477_transitionS[i]);
			}
		}

		public DFA477( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 477;
			this.eot = DFA477_eot;
			this.eof = DFA477_eof;
			this.min = DFA477_min;
			this.max = DFA477_max;
			this.accept = DFA477_accept;
			this.special = DFA477_special;
			this.transition = DFA477_transition;
		}

		public override string Description { get { return "607:31: ( ( WS )* a= cond_expr_item ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA476 : DFA
	{
		private const string DFA476_eotS =
			"\x4\xFFFF";
		private const string DFA476_eofS =
			"\x4\xFFFF";
		private const string DFA476_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA476_maxS =
			"\x2\xB8\x2\xFFFF";
		private const string DFA476_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA476_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA476_transitionS =
			{
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x1\x2\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2"+
				"\x3",
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x1\x2\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA476_eot = DFA.UnpackEncodedString(DFA476_eotS);
		private static readonly short[] DFA476_eof = DFA.UnpackEncodedString(DFA476_eofS);
		private static readonly char[] DFA476_min = DFA.UnpackEncodedStringToUnsignedChars(DFA476_minS);
		private static readonly char[] DFA476_max = DFA.UnpackEncodedStringToUnsignedChars(DFA476_maxS);
		private static readonly short[] DFA476_accept = DFA.UnpackEncodedString(DFA476_acceptS);
		private static readonly short[] DFA476_special = DFA.UnpackEncodedString(DFA476_specialS);
		private static readonly short[][] DFA476_transition;

		static DFA476()
		{
			int numStates = DFA476_transitionS.Length;
			DFA476_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA476_transition[i] = DFA.UnpackEncodedString(DFA476_transitionS[i]);
			}
		}

		public DFA476( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 476;
			this.eot = DFA476_eot;
			this.eof = DFA476_eof;
			this.min = DFA476_min;
			this.max = DFA476_max;
			this.accept = DFA476_accept;
			this.special = DFA476_special;
			this.transition = DFA476_transition;
		}

		public override string Description { get { return "607:54: ( ( WS )* ':' ( WS )* b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA481 : DFA
	{
		private const string DFA481_eotS =
			"\x4\xFFFF";
		private const string DFA481_eofS =
			"\x4\xFFFF";
		private const string DFA481_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA481_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA481_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA481_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA481_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1"+
				"\xFFFF\x2\x2\x1\x3",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1"+
				"\xFFFF\x2\x2\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA481_eot = DFA.UnpackEncodedString(DFA481_eotS);
		private static readonly short[] DFA481_eof = DFA.UnpackEncodedString(DFA481_eofS);
		private static readonly char[] DFA481_min = DFA.UnpackEncodedStringToUnsignedChars(DFA481_minS);
		private static readonly char[] DFA481_max = DFA.UnpackEncodedStringToUnsignedChars(DFA481_maxS);
		private static readonly short[] DFA481_accept = DFA.UnpackEncodedString(DFA481_acceptS);
		private static readonly short[] DFA481_special = DFA.UnpackEncodedString(DFA481_specialS);
		private static readonly short[][] DFA481_transition;

		static DFA481()
		{
			int numStates = DFA481_transitionS.Length;
			DFA481_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA481_transition[i] = DFA.UnpackEncodedString(DFA481_transitionS[i]);
			}
		}

		public DFA481( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 481;
			this.eot = DFA481_eot;
			this.eof = DFA481_eof;
			this.min = DFA481_min;
			this.max = DFA481_max;
			this.accept = DFA481_accept;
			this.special = DFA481_special;
			this.transition = DFA481_transition;
		}

		public override string Description { get { return "()* loopback of 617:23: ( ( WS )* op= or_op ( WS )* b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA484 : DFA
	{
		private const string DFA484_eotS =
			"\x4\xFFFF";
		private const string DFA484_eofS =
			"\x4\xFFFF";
		private const string DFA484_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA484_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA484_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA484_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA484_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3"+
				"\xFFFF\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x3\x1\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2"+
				"\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3"+
				"\xFFFF\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x3\x1\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA484_eot = DFA.UnpackEncodedString(DFA484_eotS);
		private static readonly short[] DFA484_eof = DFA.UnpackEncodedString(DFA484_eofS);
		private static readonly char[] DFA484_min = DFA.UnpackEncodedStringToUnsignedChars(DFA484_minS);
		private static readonly char[] DFA484_max = DFA.UnpackEncodedStringToUnsignedChars(DFA484_maxS);
		private static readonly short[] DFA484_accept = DFA.UnpackEncodedString(DFA484_acceptS);
		private static readonly short[] DFA484_special = DFA.UnpackEncodedString(DFA484_specialS);
		private static readonly short[][] DFA484_transition;

		static DFA484()
		{
			int numStates = DFA484_transitionS.Length;
			DFA484_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA484_transition[i] = DFA.UnpackEncodedString(DFA484_transitionS[i]);
			}
		}

		public DFA484( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 484;
			this.eot = DFA484_eot;
			this.eof = DFA484_eof;
			this.min = DFA484_min;
			this.max = DFA484_max;
			this.accept = DFA484_accept;
			this.special = DFA484_special;
			this.transition = DFA484_transition;
		}

		public override string Description { get { return "()* loopback of 622:21: ( ( WS )* op= and_op ( WS )* b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA487 : DFA
	{
		private const string DFA487_eotS =
			"\x4\xFFFF";
		private const string DFA487_eofS =
			"\x4\xFFFF";
		private const string DFA487_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA487_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA487_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA487_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA487_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1"+
				"\x3\x3\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x2\x2\x1"+
				"\x3\x3\x2",
				"",
				""
			};

		private static readonly short[] DFA487_eot = DFA.UnpackEncodedString(DFA487_eotS);
		private static readonly short[] DFA487_eof = DFA.UnpackEncodedString(DFA487_eofS);
		private static readonly char[] DFA487_min = DFA.UnpackEncodedStringToUnsignedChars(DFA487_minS);
		private static readonly char[] DFA487_max = DFA.UnpackEncodedStringToUnsignedChars(DFA487_maxS);
		private static readonly short[] DFA487_accept = DFA.UnpackEncodedString(DFA487_acceptS);
		private static readonly short[] DFA487_special = DFA.UnpackEncodedString(DFA487_specialS);
		private static readonly short[][] DFA487_transition;

		static DFA487()
		{
			int numStates = DFA487_transitionS.Length;
			DFA487_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA487_transition[i] = DFA.UnpackEncodedString(DFA487_transitionS[i]);
			}
		}

		public DFA487( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 487;
			this.eot = DFA487_eot;
			this.eof = DFA487_eof;
			this.min = DFA487_min;
			this.max = DFA487_max;
			this.accept = DFA487_accept;
			this.special = DFA487_special;
			this.transition = DFA487_transition;
		}

		public override string Description { get { return "()* loopback of 626:22: ( ( WS )* '|' ( WS )* b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA490 : DFA
	{
		private const string DFA490_eotS =
			"\x4\xFFFF";
		private const string DFA490_eofS =
			"\x4\xFFFF";
		private const string DFA490_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA490_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA490_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA490_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA490_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2"+
				"\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2"+
				"\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				""
			};

		private static readonly short[] DFA490_eot = DFA.UnpackEncodedString(DFA490_eotS);
		private static readonly short[] DFA490_eof = DFA.UnpackEncodedString(DFA490_eofS);
		private static readonly char[] DFA490_min = DFA.UnpackEncodedStringToUnsignedChars(DFA490_minS);
		private static readonly char[] DFA490_max = DFA.UnpackEncodedStringToUnsignedChars(DFA490_maxS);
		private static readonly short[] DFA490_accept = DFA.UnpackEncodedString(DFA490_acceptS);
		private static readonly short[] DFA490_special = DFA.UnpackEncodedString(DFA490_specialS);
		private static readonly short[][] DFA490_transition;

		static DFA490()
		{
			int numStates = DFA490_transitionS.Length;
			DFA490_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA490_transition[i] = DFA.UnpackEncodedString(DFA490_transitionS[i]);
			}
		}

		public DFA490( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 490;
			this.eot = DFA490_eot;
			this.eof = DFA490_eof;
			this.min = DFA490_min;
			this.max = DFA490_max;
			this.accept = DFA490_accept;
			this.special = DFA490_special;
			this.transition = DFA490_transition;
		}

		public override string Description { get { return "()* loopback of 630:22: ( ( WS )* '^' ( WS )* b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA493 : DFA
	{
		private const string DFA493_eotS =
			"\x4\xFFFF";
		private const string DFA493_eofS =
			"\x4\xFFFF";
		private const string DFA493_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA493_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA493_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA493_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA493_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\x3\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x2\x2"+
				"\x1\x3\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1"+
				"\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x9\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				""
			};

		private static readonly short[] DFA493_eot = DFA.UnpackEncodedString(DFA493_eotS);
		private static readonly short[] DFA493_eof = DFA.UnpackEncodedString(DFA493_eofS);
		private static readonly char[] DFA493_min = DFA.UnpackEncodedStringToUnsignedChars(DFA493_minS);
		private static readonly char[] DFA493_max = DFA.UnpackEncodedStringToUnsignedChars(DFA493_maxS);
		private static readonly short[] DFA493_accept = DFA.UnpackEncodedString(DFA493_acceptS);
		private static readonly short[] DFA493_special = DFA.UnpackEncodedString(DFA493_specialS);
		private static readonly short[][] DFA493_transition;

		static DFA493()
		{
			int numStates = DFA493_transitionS.Length;
			DFA493_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA493_transition[i] = DFA.UnpackEncodedString(DFA493_transitionS[i]);
			}
		}

		public DFA493( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 493;
			this.eot = DFA493_eot;
			this.eof = DFA493_eof;
			this.min = DFA493_min;
			this.max = DFA493_max;
			this.accept = DFA493_accept;
			this.special = DFA493_special;
			this.transition = DFA493_transition;
		}

		public override string Description { get { return "()* loopback of 634:23: ( ( WS )* '&' ( WS )* b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA510 : DFA
	{
		private const string DFA510_eotS =
			"\xA\xFFFF";
		private const string DFA510_eofS =
			"\xA\xFFFF";
		private const string DFA510_minS =
			"\x2\x55\x8\xFFFF";
		private const string DFA510_maxS =
			"\x2\x9A\x8\xFFFF";
		private const string DFA510_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x1";
		private const string DFA510_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA510_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x5\x1F\xFFFF\x1\x2\x2\xFFFF\x1\x6\x2\xFFFF\x1\x3"+
				"\x1\x4\x1A\xFFFF\x1\x7\x1\x8",
				"\x1\x1\x1\xFFFF\x1\x5\x1B\xFFFF\x1\x9\x3\xFFFF\x1\x2\x2\xFFFF\x1\x6"+
				"\x2\xFFFF\x1\x3\x1\x4\x1A\xFFFF\x1\x7\x1\x8",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA510_eot = DFA.UnpackEncodedString(DFA510_eotS);
		private static readonly short[] DFA510_eof = DFA.UnpackEncodedString(DFA510_eofS);
		private static readonly char[] DFA510_min = DFA.UnpackEncodedStringToUnsignedChars(DFA510_minS);
		private static readonly char[] DFA510_max = DFA.UnpackEncodedStringToUnsignedChars(DFA510_maxS);
		private static readonly short[] DFA510_accept = DFA.UnpackEncodedString(DFA510_acceptS);
		private static readonly short[] DFA510_special = DFA.UnpackEncodedString(DFA510_specialS);
		private static readonly short[][] DFA510_transition;

		static DFA510()
		{
			int numStates = DFA510_transitionS.Length;
			DFA510_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA510_transition[i] = DFA.UnpackEncodedString(DFA510_transitionS[i]);
			}
		}

		public DFA510( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 510;
			this.eot = DFA510_eot;
			this.eof = DFA510_eof;
			this.min = DFA510_min;
			this.max = DFA510_max;
			this.accept = DFA510_accept;
			this.special = DFA510_special;
			this.transition = DFA510_transition;
		}

		public override string Description { get { return "637:1: chain_op : ( ( WS )+ '<' ( WS )* -> '<' | ( WS )* '<=' ( WS )* -> '<=' | ( WS )* '>' ( WS )* -> '>' | ( WS )* '>=' ( WS )* -> '>=' | ( WS )* '!=' ( WS )* -> '!=' | ( WS )* '==' ( WS )* -> '==' | ( WS )* 'is' ( WS )* -> 'is' | ( WS )* 'isnt' ( WS )* -> 'isnt' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA511 : DFA
	{
		private const string DFA511_eotS =
			"\x4\xFFFF";
		private const string DFA511_eofS =
			"\x4\xFFFF";
		private const string DFA511_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA511_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA511_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA511_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA511_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x3"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\x3\x2\x2\x1\x3"+
				"\x1\xFFFF\x1\x2\x2\x3\x1\xFFFF\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5"+
				"\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\x3\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x3"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1\x2\x1\x3\x2\x2"+
				"\x1\x3\x1\xFFFF\x1\x2\x2\x3\x1\xFFFF\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\x3\x7\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x6\x2",
				"",
				""
			};

		private static readonly short[] DFA511_eot = DFA.UnpackEncodedString(DFA511_eotS);
		private static readonly short[] DFA511_eof = DFA.UnpackEncodedString(DFA511_eofS);
		private static readonly char[] DFA511_min = DFA.UnpackEncodedStringToUnsignedChars(DFA511_minS);
		private static readonly char[] DFA511_max = DFA.UnpackEncodedStringToUnsignedChars(DFA511_maxS);
		private static readonly short[] DFA511_accept = DFA.UnpackEncodedString(DFA511_acceptS);
		private static readonly short[] DFA511_special = DFA.UnpackEncodedString(DFA511_specialS);
		private static readonly short[][] DFA511_transition;

		static DFA511()
		{
			int numStates = DFA511_transitionS.Length;
			DFA511_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA511_transition[i] = DFA.UnpackEncodedString(DFA511_transitionS[i]);
			}
		}

		public DFA511( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 511;
			this.eot = DFA511_eot;
			this.eof = DFA511_eof;
			this.min = DFA511_min;
			this.max = DFA511_max;
			this.accept = DFA511_accept;
			this.special = DFA511_special;
			this.transition = DFA511_transition;
		}

		public override string Description { get { return "()+ loopback of 648:13: ( chain_op shift_expr )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA513 : DFA
	{
		private const string DFA513_eotS =
			"\x4\xFFFF";
		private const string DFA513_eofS =
			"\x4\xFFFF";
		private const string DFA513_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA513_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA513_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA513_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA513_transitionS =
			{
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x2\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\x2\x2\x3\x1\x2"+
				"\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x2\x3\x3\xFFFF\x3\x3\x1\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\x2\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x6\x3",
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x2\xFFFF\x1\x3\x1\x2\x2\x3"+
				"\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x2\x3\x3\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\x2\x7\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x6\x3",
				"",
				""
			};

		private static readonly short[] DFA513_eot = DFA.UnpackEncodedString(DFA513_eotS);
		private static readonly short[] DFA513_eof = DFA.UnpackEncodedString(DFA513_eofS);
		private static readonly char[] DFA513_min = DFA.UnpackEncodedStringToUnsignedChars(DFA513_minS);
		private static readonly char[] DFA513_max = DFA.UnpackEncodedStringToUnsignedChars(DFA513_maxS);
		private static readonly short[] DFA513_accept = DFA.UnpackEncodedString(DFA513_acceptS);
		private static readonly short[] DFA513_special = DFA.UnpackEncodedString(DFA513_specialS);
		private static readonly short[][] DFA513_transition;

		static DFA513()
		{
			int numStates = DFA513_transitionS.Length;
			DFA513_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA513_transition[i] = DFA.UnpackEncodedString(DFA513_transitionS[i]);
			}
		}

		public DFA513( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 513;
			this.eot = DFA513_eot;
			this.eof = DFA513_eof;
			this.min = DFA513_min;
			this.max = DFA513_max;
			this.accept = DFA513_accept;
			this.special = DFA513_special;
			this.transition = DFA513_transition;
		}

		public override string Description { get { return "650:25: (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA512 : DFA
	{
		private const string DFA512_eotS =
			"\x4\xFFFF";
		private const string DFA512_eofS =
			"\x4\xFFFF";
		private const string DFA512_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA512_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA512_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA512_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA512_transitionS =
			{
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x2\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x1\x2\x2\x3\x1\x2"+
				"\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x2\x3\x3\xFFFF\x3\x3\x1\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\x2\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF\x6\x3",
				"\x1\x3\x27\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x5\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x2\xFFFF\x1\x3\x1\x2\x2\x3"+
				"\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x2\x3\x3\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x5\xFFFF\x1\x3\x4\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\x2\x7\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x3\xFFFF"+
				"\x6\x3",
				"",
				""
			};

		private static readonly short[] DFA512_eot = DFA.UnpackEncodedString(DFA512_eotS);
		private static readonly short[] DFA512_eof = DFA.UnpackEncodedString(DFA512_eofS);
		private static readonly char[] DFA512_min = DFA.UnpackEncodedStringToUnsignedChars(DFA512_minS);
		private static readonly char[] DFA512_max = DFA.UnpackEncodedStringToUnsignedChars(DFA512_maxS);
		private static readonly short[] DFA512_accept = DFA.UnpackEncodedString(DFA512_acceptS);
		private static readonly short[] DFA512_special = DFA.UnpackEncodedString(DFA512_specialS);
		private static readonly short[][] DFA512_transition;

		static DFA512()
		{
			int numStates = DFA512_transitionS.Length;
			DFA512_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA512_transition[i] = DFA.UnpackEncodedString(DFA512_transitionS[i]);
			}
		}

		public DFA512( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 512;
			this.eot = DFA512_eot;
			this.eof = DFA512_eof;
			this.min = DFA512_min;
			this.max = DFA512_max;
			this.accept = DFA512_accept;
			this.special = DFA512_special;
			this.transition = DFA512_transition;
		}

		public override string Description { get { return "650:52: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA516 : DFA
	{
		private const string DFA516_eotS =
			"\x4\xFFFF";
		private const string DFA516_eofS =
			"\x4\xFFFF";
		private const string DFA516_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA516_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA516_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA516_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA516_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x3\x5\x2\x1\xFFFF\x3"+
				"\x2\x1\x3\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x3\x5\x2\x1\xFFFF\x3"+
				"\x2\x1\x3\x2\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				""
			};

		private static readonly short[] DFA516_eot = DFA.UnpackEncodedString(DFA516_eotS);
		private static readonly short[] DFA516_eof = DFA.UnpackEncodedString(DFA516_eofS);
		private static readonly char[] DFA516_min = DFA.UnpackEncodedStringToUnsignedChars(DFA516_minS);
		private static readonly char[] DFA516_max = DFA.UnpackEncodedStringToUnsignedChars(DFA516_maxS);
		private static readonly short[] DFA516_accept = DFA.UnpackEncodedString(DFA516_acceptS);
		private static readonly short[] DFA516_special = DFA.UnpackEncodedString(DFA516_specialS);
		private static readonly short[][] DFA516_transition;

		static DFA516()
		{
			int numStates = DFA516_transitionS.Length;
			DFA516_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA516_transition[i] = DFA.UnpackEncodedString(DFA516_transitionS[i]);
			}
		}

		public DFA516( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 516;
			this.eot = DFA516_eot;
			this.eof = DFA516_eof;
			this.min = DFA516_min;
			this.max = DFA516_max;
			this.accept = DFA516_accept;
			this.special = DFA516_special;
			this.transition = DFA516_transition;
		}

		public override string Description { get { return "()* loopback of 658:23: ( ( WS )* shift_expr_op ( WS )* b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA521 : DFA
	{
		private const string DFA521_eotS =
			"\x5\xFFFF";
		private const string DFA521_eofS =
			"\x5\xFFFF";
		private const string DFA521_minS =
			"\x2\x8\x3\xFFFF";
		private const string DFA521_maxS =
			"\x2\xB9\x3\xFFFF";
		private const string DFA521_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA521_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA521_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x1"+
				"\x4\x2\xFFFF\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF"+
				"\x6\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1"+
				"\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x1"+
				"\x4\x2\xFFFF\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x6\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1"+
				"\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA521_eot = DFA.UnpackEncodedString(DFA521_eotS);
		private static readonly short[] DFA521_eof = DFA.UnpackEncodedString(DFA521_eofS);
		private static readonly char[] DFA521_min = DFA.UnpackEncodedStringToUnsignedChars(DFA521_minS);
		private static readonly char[] DFA521_max = DFA.UnpackEncodedStringToUnsignedChars(DFA521_maxS);
		private static readonly short[] DFA521_accept = DFA.UnpackEncodedString(DFA521_acceptS);
		private static readonly short[] DFA521_special = DFA.UnpackEncodedString(DFA521_specialS);
		private static readonly short[][] DFA521_transition;

		static DFA521()
		{
			int numStates = DFA521_transitionS.Length;
			DFA521_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA521_transition[i] = DFA.UnpackEncodedString(DFA521_transitionS[i]);
			}
		}

		public DFA521( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 521;
			this.eot = DFA521_eot;
			this.eof = DFA521_eof;
			this.min = DFA521_min;
			this.max = DFA521_max;
			this.accept = DFA521_accept;
			this.special = DFA521_special;
			this.transition = DFA521_transition;
		}

		public override string Description { get { return "()* loopback of 662:23: ( ( WS )* '+' ( WS )* b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | ( WS )* '-' ( WS )* b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA528 : DFA
	{
		private const string DFA528_eotS =
			"\x6\xFFFF";
		private const string DFA528_eofS =
			"\x6\xFFFF";
		private const string DFA528_minS =
			"\x2\x8\x4\xFFFF";
		private const string DFA528_maxS =
			"\x2\xB9\x4\xFFFF";
		private const string DFA528_acceptS =
			"\x2\xFFFF\x1\x4\x1\x1\x1\x2\x1\x3";
		private const string DFA528_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA528_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\x5\x4\x2\x1\xFFFF\x1\x2\x1\x3\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x4\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3"+
				"\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x1\x2"+
				"\x1\x5\x4\x2\x1\xFFFF\x1\x2\x1\x3\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x4\x2\x2\x1\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3"+
				"\xFFFF\x3\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3"+
				"\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF"+
				"\x2\x2\x3\xFFFF\x6\x2",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA528_eot = DFA.UnpackEncodedString(DFA528_eotS);
		private static readonly short[] DFA528_eof = DFA.UnpackEncodedString(DFA528_eofS);
		private static readonly char[] DFA528_min = DFA.UnpackEncodedStringToUnsignedChars(DFA528_minS);
		private static readonly char[] DFA528_max = DFA.UnpackEncodedStringToUnsignedChars(DFA528_maxS);
		private static readonly short[] DFA528_accept = DFA.UnpackEncodedString(DFA528_acceptS);
		private static readonly short[] DFA528_special = DFA.UnpackEncodedString(DFA528_specialS);
		private static readonly short[][] DFA528_transition;

		static DFA528()
		{
			int numStates = DFA528_transitionS.Length;
			DFA528_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA528_transition[i] = DFA.UnpackEncodedString(DFA528_transitionS[i]);
			}
		}

		public DFA528( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 528;
			this.eot = DFA528_eot;
			this.eof = DFA528_eof;
			this.min = DFA528_min;
			this.max = DFA528_max;
			this.accept = DFA528_accept;
			this.special = DFA528_special;
			this.transition = DFA528_transition;
		}

		public override string Description { get { return "()* loopback of 668:25: ( ( WS )* '*' ( WS )* b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | ( WS )* '/' ( WS )* b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | ( WS )* '%' ( WS )* b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA531 : DFA
	{
		private const string DFA531_eotS =
			"\x4\xFFFF";
		private const string DFA531_eofS =
			"\x4\xFFFF";
		private const string DFA531_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA531_maxS =
			"\x2\xB9\x2\xFFFF";
		private const string DFA531_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA531_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA531_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x4\xFFFF\x3\x2\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3\xFFFF\x3\x2\x1\x3\x2\x2\x5\xFFFF"+
				"\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x4\xFFFF\x3\x2\x1\xFFFF"+
				"\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3\xFFFF\x3\x2\x1\x3\x2\x2\x5\xFFFF"+
				"\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				""
			};

		private static readonly short[] DFA531_eot = DFA.UnpackEncodedString(DFA531_eotS);
		private static readonly short[] DFA531_eof = DFA.UnpackEncodedString(DFA531_eofS);
		private static readonly char[] DFA531_min = DFA.UnpackEncodedStringToUnsignedChars(DFA531_minS);
		private static readonly char[] DFA531_max = DFA.UnpackEncodedStringToUnsignedChars(DFA531_maxS);
		private static readonly short[] DFA531_accept = DFA.UnpackEncodedString(DFA531_acceptS);
		private static readonly short[] DFA531_special = DFA.UnpackEncodedString(DFA531_specialS);
		private static readonly short[][] DFA531_transition;

		static DFA531()
		{
			int numStates = DFA531_transitionS.Length;
			DFA531_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA531_transition[i] = DFA.UnpackEncodedString(DFA531_transitionS[i]);
			}
		}

		public DFA531( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 531;
			this.eot = DFA531_eot;
			this.eof = DFA531_eof;
			this.min = DFA531_min;
			this.max = DFA531_max;
			this.accept = DFA531_accept;
			this.special = DFA531_special;
			this.transition = DFA531_transition;
		}

		public override string Description { get { return "()* loopback of 675:28: ( ( WS )* infix_func ( WS )* b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA536 : DFA
	{
		private const string DFA536_eotS =
			"\x5\xFFFF";
		private const string DFA536_eofS =
			"\x5\xFFFF";
		private const string DFA536_minS =
			"\x2\x8\x3\xFFFF";
		private const string DFA536_maxS =
			"\x2\xB9\x3\xFFFF";
		private const string DFA536_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA536_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA536_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x4\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3\xFFFF\x6"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x4\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x4\x3\x2\x1\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x6\x2\x3\xFFFF\x6"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA536_eot = DFA.UnpackEncodedString(DFA536_eotS);
		private static readonly short[] DFA536_eof = DFA.UnpackEncodedString(DFA536_eofS);
		private static readonly char[] DFA536_min = DFA.UnpackEncodedStringToUnsignedChars(DFA536_minS);
		private static readonly char[] DFA536_max = DFA.UnpackEncodedStringToUnsignedChars(DFA536_maxS);
		private static readonly short[] DFA536_accept = DFA.UnpackEncodedString(DFA536_acceptS);
		private static readonly short[] DFA536_special = DFA.UnpackEncodedString(DFA536_specialS);
		private static readonly short[][] DFA536_transition;

		static DFA536()
		{
			int numStates = DFA536_transitionS.Length;
			DFA536_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA536_transition[i] = DFA.UnpackEncodedString(DFA536_transitionS[i]);
			}
		}

		public DFA536( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 536;
			this.eot = DFA536_eot;
			this.eof = DFA536_eof;
			this.min = DFA536_min;
			this.max = DFA536_max;
			this.accept = DFA536_accept;
			this.special = DFA536_special;
			this.transition = DFA536_transition;
		}

		public override string Description { get { return "()* loopback of 679:24: ( ( WS )* '->*' ( WS )* b= ident -> ^( Expr_Access '->*' $selector_expr $b) | ( WS )* '.*' ( WS )* b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA545 : DFA
	{
		private const string DFA545_eotS =
			"\x4\xFFFF";
		private const string DFA545_eofS =
			"\x4\xFFFF";
		private const string DFA545_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA545_maxS =
			"\x2\x84\x2\xFFFF";
		private const string DFA545_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA545_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA545_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x26\xFFFF\x1\x3",
				"\x1\x1\x7\xFFFF\x1\x2\x26\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA545_eot = DFA.UnpackEncodedString(DFA545_eotS);
		private static readonly short[] DFA545_eof = DFA.UnpackEncodedString(DFA545_eofS);
		private static readonly char[] DFA545_min = DFA.UnpackEncodedStringToUnsignedChars(DFA545_minS);
		private static readonly char[] DFA545_max = DFA.UnpackEncodedStringToUnsignedChars(DFA545_maxS);
		private static readonly short[] DFA545_accept = DFA.UnpackEncodedString(DFA545_acceptS);
		private static readonly short[] DFA545_special = DFA.UnpackEncodedString(DFA545_specialS);
		private static readonly short[][] DFA545_transition;

		static DFA545()
		{
			int numStates = DFA545_transitionS.Length;
			DFA545_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA545_transition[i] = DFA.UnpackEncodedString(DFA545_transitionS[i]);
			}
		}

		public DFA545( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 545;
			this.eot = DFA545_eot;
			this.eof = DFA545_eof;
			this.min = DFA545_min;
			this.max = DFA545_max;
			this.accept = DFA545_accept;
			this.special = DFA545_special;
			this.transition = DFA545_transition;
		}

		public override string Description { get { return "692:28: ( ( WS )* bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA550 : DFA
	{
		private const string DFA550_eotS =
			"\x4\xFFFF";
		private const string DFA550_eofS =
			"\x4\xFFFF";
		private const string DFA550_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA550_maxS =
			"\x2\x85\x2\xFFFF";
		private const string DFA550_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA550_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA550_transitionS =
			{
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"\x1\x1\xE\xFFFF\x1\x3\x20\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA550_eot = DFA.UnpackEncodedString(DFA550_eotS);
		private static readonly short[] DFA550_eof = DFA.UnpackEncodedString(DFA550_eofS);
		private static readonly char[] DFA550_min = DFA.UnpackEncodedStringToUnsignedChars(DFA550_minS);
		private static readonly char[] DFA550_max = DFA.UnpackEncodedStringToUnsignedChars(DFA550_maxS);
		private static readonly short[] DFA550_accept = DFA.UnpackEncodedString(DFA550_acceptS);
		private static readonly short[] DFA550_special = DFA.UnpackEncodedString(DFA550_specialS);
		private static readonly short[][] DFA550_transition;

		static DFA550()
		{
			int numStates = DFA550_transitionS.Length;
			DFA550_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA550_transition[i] = DFA.UnpackEncodedString(DFA550_transitionS[i]);
			}
		}

		public DFA550( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 550;
			this.eot = DFA550_eot;
			this.eof = DFA550_eof;
			this.min = DFA550_min;
			this.max = DFA550_max;
			this.accept = DFA550_accept;
			this.special = DFA550_special;
			this.transition = DFA550_transition;
		}

		public override string Description { get { return "()* loopback of 699:17: ( ( WS )* ',' ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA556 : DFA
	{
		private const string DFA556_eotS =
			"\x4\xFFFF";
		private const string DFA556_eofS =
			"\x4\xFFFF";
		private const string DFA556_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA556_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA556_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA556_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA556_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2"+
				"\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x3\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2"+
				"\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA556_eot = DFA.UnpackEncodedString(DFA556_eotS);
		private static readonly short[] DFA556_eof = DFA.UnpackEncodedString(DFA556_eofS);
		private static readonly char[] DFA556_min = DFA.UnpackEncodedStringToUnsignedChars(DFA556_minS);
		private static readonly char[] DFA556_max = DFA.UnpackEncodedStringToUnsignedChars(DFA556_maxS);
		private static readonly short[] DFA556_accept = DFA.UnpackEncodedString(DFA556_acceptS);
		private static readonly short[] DFA556_special = DFA.UnpackEncodedString(DFA556_specialS);
		private static readonly short[][] DFA556_transition;

		static DFA556()
		{
			int numStates = DFA556_transitionS.Length;
			DFA556_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA556_transition[i] = DFA.UnpackEncodedString(DFA556_transitionS[i]);
			}
		}

		public DFA556( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 556;
			this.eot = DFA556_eot;
			this.eof = DFA556_eof;
			this.min = DFA556_min;
			this.max = DFA556_max;
			this.accept = DFA556_accept;
			this.special = DFA556_special;
			this.transition = DFA556_transition;
		}

		public override string Description { get { return "703:8: ( ( WS )* expr ( ( WS )* ',' ( WS )* expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA555 : DFA
	{
		private const string DFA555_eotS =
			"\x4\xFFFF";
		private const string DFA555_eofS =
			"\x4\xFFFF";
		private const string DFA555_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA555_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA555_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA555_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA555_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA555_eot = DFA.UnpackEncodedString(DFA555_eotS);
		private static readonly short[] DFA555_eof = DFA.UnpackEncodedString(DFA555_eofS);
		private static readonly char[] DFA555_min = DFA.UnpackEncodedStringToUnsignedChars(DFA555_minS);
		private static readonly char[] DFA555_max = DFA.UnpackEncodedStringToUnsignedChars(DFA555_maxS);
		private static readonly short[] DFA555_accept = DFA.UnpackEncodedString(DFA555_acceptS);
		private static readonly short[] DFA555_special = DFA.UnpackEncodedString(DFA555_specialS);
		private static readonly short[][] DFA555_transition;

		static DFA555()
		{
			int numStates = DFA555_transitionS.Length;
			DFA555_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA555_transition[i] = DFA.UnpackEncodedString(DFA555_transitionS[i]);
			}
		}

		public DFA555( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 555;
			this.eot = DFA555_eot;
			this.eof = DFA555_eof;
			this.min = DFA555_min;
			this.max = DFA555_max;
			this.accept = DFA555_accept;
			this.special = DFA555_special;
			this.transition = DFA555_transition;
		}

		public override string Description { get { return "()* loopback of 703:18: ( ( WS )* ',' ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA583 : DFA
	{
		private const string DFA583_eotS =
			"\x4\xFFFF";
		private const string DFA583_eofS =
			"\x4\xFFFF";
		private const string DFA583_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA583_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA583_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA583_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA583_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA583_eot = DFA.UnpackEncodedString(DFA583_eotS);
		private static readonly short[] DFA583_eof = DFA.UnpackEncodedString(DFA583_eofS);
		private static readonly char[] DFA583_min = DFA.UnpackEncodedStringToUnsignedChars(DFA583_minS);
		private static readonly char[] DFA583_max = DFA.UnpackEncodedStringToUnsignedChars(DFA583_maxS);
		private static readonly short[] DFA583_accept = DFA.UnpackEncodedString(DFA583_acceptS);
		private static readonly short[] DFA583_special = DFA.UnpackEncodedString(DFA583_specialS);
		private static readonly short[][] DFA583_transition;

		static DFA583()
		{
			int numStates = DFA583_transitionS.Length;
			DFA583_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA583_transition[i] = DFA.UnpackEncodedString(DFA583_transitionS[i]);
			}
		}

		public DFA583( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 583;
			this.eot = DFA583_eot;
			this.eof = DFA583_eof;
			this.min = DFA583_min;
			this.max = DFA583_max;
			this.accept = DFA583_accept;
			this.special = DFA583_special;
			this.transition = DFA583_transition;
		}

		public override string Description { get { return "703:40: ( ( WS )* ')' -> ^( Expr_Args ( expr )* ) | ( WS )* ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* ( ( WS )* NEWLINE )* ( ( WS )* ')' ( WS )* ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ( WS )* ')' ) -> ^( Expr_Args ( expr )* ) | ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )? ( WS )* ')' -> ^( Expr_Args ( expr )* ) ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA565 : DFA
	{
		private const string DFA565_eotS =
			"\x6\xFFFF";
		private const string DFA565_eofS =
			"\x6\xFFFF";
		private const string DFA565_minS =
			"\x1\x8\x1\x38\x1\x8\x2\xFFFF\x1\x2F";
		private const string DFA565_maxS =
			"\x2\x64\x1\xBA\x2\xFFFF\x1\xBA";
		private const string DFA565_acceptS =
			"\x3\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA565_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA565_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x3\x5\xFFFF\x1\x4",
				"\x1\x2\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x3\x5\xFFFF\x1\x4",
				"\x1\x3\x26\xFFFF\x1\x4\x8\xFFFF\x1\x2\x1\x4\x4\xFFFF\x1\x4\x16\xFFFF"+
				"\x1\x5\x1\x4\x4\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\x3\x1\x4\x1\xFFFF\x2\x4"+
				"\x1\xFFFF\x3\x4\x1C\xFFFF\x2\x4\x16\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF"+
				"\x2\x4\x18\xFFFF\x1\x4",
				"",
				"",
				"\x1\x4\x8\xFFFF\x1\x2\x1\x4\x4\xFFFF\x1\x4\x16\xFFFF\x1\x5\x1\x4\x4"+
				"\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\x3\x1\x4\x1\xFFFF\x2\x4\x1\xFFFF\x3\x4"+
				"\x1C\xFFFF\x2\x4\x16\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF\x2\x4\x18\xFFFF"+
				"\x1\x4"
			};

		private static readonly short[] DFA565_eot = DFA.UnpackEncodedString(DFA565_eotS);
		private static readonly short[] DFA565_eof = DFA.UnpackEncodedString(DFA565_eofS);
		private static readonly char[] DFA565_min = DFA.UnpackEncodedStringToUnsignedChars(DFA565_minS);
		private static readonly char[] DFA565_max = DFA.UnpackEncodedStringToUnsignedChars(DFA565_maxS);
		private static readonly short[] DFA565_accept = DFA.UnpackEncodedString(DFA565_acceptS);
		private static readonly short[] DFA565_special = DFA.UnpackEncodedString(DFA565_specialS);
		private static readonly short[][] DFA565_transition;

		static DFA565()
		{
			int numStates = DFA565_transitionS.Length;
			DFA565_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA565_transition[i] = DFA.UnpackEncodedString(DFA565_transitionS[i]);
			}
		}

		public DFA565( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 565;
			this.eot = DFA565_eot;
			this.eof = DFA565_eof;
			this.min = DFA565_min;
			this.max = DFA565_max;
			this.accept = DFA565_accept;
			this.special = DFA565_special;
			this.transition = DFA565_transition;
		}

		public override string Description { get { return "()* loopback of 704:60: ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA563 : DFA
	{
		private const string DFA563_eotS =
			"\x5\xFFFF";
		private const string DFA563_eofS =
			"\x5\xFFFF";
		private const string DFA563_minS =
			"\x2\x2F\x3\xFFFF";
		private const string DFA563_maxS =
			"\x2\xBA\x3\xFFFF";
		private const string DFA563_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA563_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA563_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x3\x2\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x3\x2\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA563_eot = DFA.UnpackEncodedString(DFA563_eotS);
		private static readonly short[] DFA563_eof = DFA.UnpackEncodedString(DFA563_eofS);
		private static readonly char[] DFA563_min = DFA.UnpackEncodedStringToUnsignedChars(DFA563_minS);
		private static readonly char[] DFA563_max = DFA.UnpackEncodedStringToUnsignedChars(DFA563_maxS);
		private static readonly short[] DFA563_accept = DFA.UnpackEncodedString(DFA563_acceptS);
		private static readonly short[] DFA563_special = DFA.UnpackEncodedString(DFA563_specialS);
		private static readonly short[][] DFA563_transition;

		static DFA563()
		{
			int numStates = DFA563_transitionS.Length;
			DFA563_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA563_transition[i] = DFA.UnpackEncodedString(DFA563_transitionS[i]);
			}
		}

		public DFA563( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 563;
			this.eot = DFA563_eot;
			this.eof = DFA563_eof;
			this.min = DFA563_min;
			this.max = DFA563_max;
			this.accept = DFA563_accept;
			this.special = DFA563_special;
			this.transition = DFA563_transition;
		}

		public override string Description { get { return "()+ loopback of 704:61: ( ( WS )* ',' | ( WS )* NEWLINE )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA567 : DFA
	{
		private const string DFA567_eotS =
			"\x4\xFFFF";
		private const string DFA567_eofS =
			"\x4\xFFFF";
		private const string DFA567_minS =
			"\x1\x8\x1\x38\x2\xFFFF";
		private const string DFA567_maxS =
			"\x2\x5E\x2\xFFFF";
		private const string DFA567_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA567_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA567_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA567_eot = DFA.UnpackEncodedString(DFA567_eotS);
		private static readonly short[] DFA567_eof = DFA.UnpackEncodedString(DFA567_eofS);
		private static readonly char[] DFA567_min = DFA.UnpackEncodedStringToUnsignedChars(DFA567_minS);
		private static readonly char[] DFA567_max = DFA.UnpackEncodedStringToUnsignedChars(DFA567_maxS);
		private static readonly short[] DFA567_accept = DFA.UnpackEncodedString(DFA567_acceptS);
		private static readonly short[] DFA567_special = DFA.UnpackEncodedString(DFA567_specialS);
		private static readonly short[][] DFA567_transition;

		static DFA567()
		{
			int numStates = DFA567_transitionS.Length;
			DFA567_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA567_transition[i] = DFA.UnpackEncodedString(DFA567_transitionS[i]);
			}
		}

		public DFA567( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 567;
			this.eot = DFA567_eot;
			this.eof = DFA567_eof;
			this.min = DFA567_min;
			this.max = DFA567_max;
			this.accept = DFA567_accept;
			this.special = DFA567_special;
			this.transition = DFA567_transition;
		}

		public override string Description { get { return "()* loopback of 704:97: ( ( WS )* NEWLINE )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA580 : DFA
	{
		private const string DFA580_eotS =
			"\x4\xFFFF";
		private const string DFA580_eofS =
			"\x4\xFFFF";
		private const string DFA580_minS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA580_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA580_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA580_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA580_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x1\x3\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C"+
				"\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA580_eot = DFA.UnpackEncodedString(DFA580_eotS);
		private static readonly short[] DFA580_eof = DFA.UnpackEncodedString(DFA580_eofS);
		private static readonly char[] DFA580_min = DFA.UnpackEncodedStringToUnsignedChars(DFA580_minS);
		private static readonly char[] DFA580_max = DFA.UnpackEncodedStringToUnsignedChars(DFA580_maxS);
		private static readonly short[] DFA580_accept = DFA.UnpackEncodedString(DFA580_acceptS);
		private static readonly short[] DFA580_special = DFA.UnpackEncodedString(DFA580_specialS);
		private static readonly short[][] DFA580_transition;

		static DFA580()
		{
			int numStates = DFA580_transitionS.Length;
			DFA580_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA580_transition[i] = DFA.UnpackEncodedString(DFA580_transitionS[i]);
			}
		}

		public DFA580( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 580;
			this.eot = DFA580_eot;
			this.eof = DFA580_eof;
			this.min = DFA580_min;
			this.max = DFA580_max;
			this.accept = DFA580_accept;
			this.special = DFA580_special;
			this.transition = DFA580_transition;
		}

		public override string Description { get { return "707:30: ( ( WS )* expr ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA579 : DFA
	{
		private const string DFA579_eotS =
			"\x4\xFFFF";
		private const string DFA579_eofS =
			"\x4\xFFFF";
		private const string DFA579_minS =
			"\x2\x38\x2\xFFFF";
		private const string DFA579_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA579_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA579_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA579_transitionS =
			{
				"\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x1C\xFFFF\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA579_eot = DFA.UnpackEncodedString(DFA579_eotS);
		private static readonly short[] DFA579_eof = DFA.UnpackEncodedString(DFA579_eofS);
		private static readonly char[] DFA579_min = DFA.UnpackEncodedStringToUnsignedChars(DFA579_minS);
		private static readonly char[] DFA579_max = DFA.UnpackEncodedStringToUnsignedChars(DFA579_maxS);
		private static readonly short[] DFA579_accept = DFA.UnpackEncodedString(DFA579_acceptS);
		private static readonly short[] DFA579_special = DFA.UnpackEncodedString(DFA579_specialS);
		private static readonly short[][] DFA579_transition;

		static DFA579()
		{
			int numStates = DFA579_transitionS.Length;
			DFA579_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA579_transition[i] = DFA.UnpackEncodedString(DFA579_transitionS[i]);
			}
		}

		public DFA579( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 579;
			this.eot = DFA579_eot;
			this.eof = DFA579_eof;
			this.min = DFA579_min;
			this.max = DFA579_max;
			this.accept = DFA579_accept;
			this.special = DFA579_special;
			this.transition = DFA579_transition;
		}

		public override string Description { get { return "()* loopback of 707:40: ( ( ( WS )* ',' | ( WS )* NEWLINE )+ ( WS )* expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA577 : DFA
	{
		private const string DFA577_eotS =
			"\x5\xFFFF";
		private const string DFA577_eofS =
			"\x5\xFFFF";
		private const string DFA577_minS =
			"\x2\x2F\x3\xFFFF";
		private const string DFA577_maxS =
			"\x2\xBA\x3\xFFFF";
		private const string DFA577_acceptS =
			"\x2\xFFFF\x1\x3\x1\x1\x1\x2";
		private const string DFA577_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA577_transitionS =
			{
				"\x1\x2\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x3\x2\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"\x1\x2\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x2\x16\xFFFF\x1\x1\x1\x2\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1"+
				"\x3\x2\x2\x1C\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2"+
				"\x2\x18\xFFFF\x1\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA577_eot = DFA.UnpackEncodedString(DFA577_eotS);
		private static readonly short[] DFA577_eof = DFA.UnpackEncodedString(DFA577_eofS);
		private static readonly char[] DFA577_min = DFA.UnpackEncodedStringToUnsignedChars(DFA577_minS);
		private static readonly char[] DFA577_max = DFA.UnpackEncodedStringToUnsignedChars(DFA577_maxS);
		private static readonly short[] DFA577_accept = DFA.UnpackEncodedString(DFA577_acceptS);
		private static readonly short[] DFA577_special = DFA.UnpackEncodedString(DFA577_specialS);
		private static readonly short[][] DFA577_transition;

		static DFA577()
		{
			int numStates = DFA577_transitionS.Length;
			DFA577_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA577_transition[i] = DFA.UnpackEncodedString(DFA577_transitionS[i]);
			}
		}

		public DFA577( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 577;
			this.eot = DFA577_eot;
			this.eof = DFA577_eof;
			this.min = DFA577_min;
			this.max = DFA577_max;
			this.accept = DFA577_accept;
			this.special = DFA577_special;
			this.transition = DFA577_transition;
		}

		public override string Description { get { return "()+ loopback of 707:41: ( ( WS )* ',' | ( WS )* NEWLINE )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA596 : DFA
	{
		private const string DFA596_eotS =
			"\xB\xFFFF";
		private const string DFA596_eofS =
			"\x1\x2\xA\xFFFF";
		private const string DFA596_minS =
			"\x2\x8\x9\xFFFF";
		private const string DFA596_maxS =
			"\x2\xB9\x9\xFFFF";
		private const string DFA596_acceptS =
			"\x2\xFFFF\x1\x9\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8";
		private const string DFA596_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA596_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\x7\x4\x2\x1\x3\x3\x2\x1\x4\x1\xFFFF\x1\x2\x1\x6\x1\x2\x1\x5\x4\x2"+
				"\x1\xFFFF\x2\x2\x1\x8\x1\xFFFF\x6\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\xA\x1"+
				"\x9\x6\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF"+
				"\x6\x2",
				"\x1\x2\x27\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x6\x2"+
				"\x1\x7\x4\x2\x1\x3\x3\x2\x1\x4\x1\xFFFF\x1\x2\x1\x6\x1\x2\x1\x5\x4\x2"+
				"\x1\xFFFF\x3\x2\x1\xFFFF\x6\x2\x1\xFFFF\x6\x2\x1\xFFFF\x1\xA\x1\x9\x6"+
				"\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x6\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA596_eot = DFA.UnpackEncodedString(DFA596_eotS);
		private static readonly short[] DFA596_eof = DFA.UnpackEncodedString(DFA596_eofS);
		private static readonly char[] DFA596_min = DFA.UnpackEncodedStringToUnsignedChars(DFA596_minS);
		private static readonly char[] DFA596_max = DFA.UnpackEncodedStringToUnsignedChars(DFA596_maxS);
		private static readonly short[] DFA596_accept = DFA.UnpackEncodedString(DFA596_acceptS);
		private static readonly short[] DFA596_special = DFA.UnpackEncodedString(DFA596_specialS);
		private static readonly short[][] DFA596_transition;

		static DFA596()
		{
			int numStates = DFA596_transitionS.Length;
			DFA596_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA596_transition[i] = DFA.UnpackEncodedString(DFA596_transitionS[i]);
			}
		}

		public DFA596( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 596;
			this.eot = DFA596_eot;
			this.eof = DFA596_eof;
			this.min = DFA596_min;
			this.max = DFA596_max;
			this.accept = DFA596_accept;
			this.special = DFA596_special;
			this.transition = DFA596_transition;
		}

		public override string Description { get { return "()* loopback of 713:24: ( ( WS )* '++' -> ^( Expr_Suffix '++' $suffix_expr) | ( WS )* '--' -> ^( Expr_Suffix '--' $suffix_expr) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $suffix_expr ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $suffix_expr generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | ( WS )* '@' ( WS )* ident ( WS )* bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA604 : DFA
	{
		private const string DFA604_eotS =
			"\x4\xFFFF";
		private const string DFA604_eofS =
			"\x4\xFFFF";
		private const string DFA604_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA604_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA604_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA604_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA604_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x3\x5\xFFFF\x1\x2",
				"\x1\x1\x8\xFFFF\x1\x3\x5\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA604_eot = DFA.UnpackEncodedString(DFA604_eotS);
		private static readonly short[] DFA604_eof = DFA.UnpackEncodedString(DFA604_eofS);
		private static readonly char[] DFA604_min = DFA.UnpackEncodedStringToUnsignedChars(DFA604_minS);
		private static readonly char[] DFA604_max = DFA.UnpackEncodedStringToUnsignedChars(DFA604_maxS);
		private static readonly short[] DFA604_accept = DFA.UnpackEncodedString(DFA604_acceptS);
		private static readonly short[] DFA604_special = DFA.UnpackEncodedString(DFA604_specialS);
		private static readonly short[][] DFA604_transition;

		static DFA604()
		{
			int numStates = DFA604_transitionS.Length;
			DFA604_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA604_transition[i] = DFA.UnpackEncodedString(DFA604_transitionS[i]);
			}
		}

		public DFA604( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 604;
			this.eot = DFA604_eot;
			this.eof = DFA604_eof;
			this.min = DFA604_min;
			this.max = DFA604_max;
			this.accept = DFA604_accept;
			this.special = DFA604_special;
			this.transition = DFA604_transition;
		}

		public override string Description { get { return "729:19: ( ( ( WS )* ',' ( WS )* expr )+ ( WS )* ')' -> ^( Expr_Tuple ( expr )+ ) | ( WS )* ')' -> ^( Expr_Bracket expr ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA601 : DFA
	{
		private const string DFA601_eotS =
			"\x4\xFFFF";
		private const string DFA601_eofS =
			"\x4\xFFFF";
		private const string DFA601_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA601_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA601_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA601_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA601_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA601_eot = DFA.UnpackEncodedString(DFA601_eotS);
		private static readonly short[] DFA601_eof = DFA.UnpackEncodedString(DFA601_eofS);
		private static readonly char[] DFA601_min = DFA.UnpackEncodedStringToUnsignedChars(DFA601_minS);
		private static readonly char[] DFA601_max = DFA.UnpackEncodedStringToUnsignedChars(DFA601_maxS);
		private static readonly short[] DFA601_accept = DFA.UnpackEncodedString(DFA601_acceptS);
		private static readonly short[] DFA601_special = DFA.UnpackEncodedString(DFA601_specialS);
		private static readonly short[][] DFA601_transition;

		static DFA601()
		{
			int numStates = DFA601_transitionS.Length;
			DFA601_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA601_transition[i] = DFA.UnpackEncodedString(DFA601_transitionS[i]);
			}
		}

		public DFA601( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 601;
			this.eot = DFA601_eot;
			this.eof = DFA601_eof;
			this.min = DFA601_min;
			this.max = DFA601_max;
			this.accept = DFA601_accept;
			this.special = DFA601_special;
			this.transition = DFA601_transition;
		}

		public override string Description { get { return "()+ loopback of 729:21: ( ( WS )* ',' ( WS )* expr )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA616 : DFA
	{
		private const string DFA616_eotS =
			"\xA\xFFFF";
		private const string DFA616_eofS =
			"\xA\xFFFF";
		private const string DFA616_minS =
			"\x1\x8\x1\x38\x8\xFFFF";
		private const string DFA616_maxS =
			"\x2\xB7\x8\xFFFF";
		private const string DFA616_acceptS =
			"\x2\xFFFF\x1\x8\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7";
		private const string DFA616_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA616_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x1\x7\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x4\x1\xFFFF"+
				"\x1\x2\x1\x6\x1\xFFFF\x1\x5\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\x8\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x9\x2"+
				"\xFFFF\x1\x2\xD\xFFFF\x2\x2\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x1\x1\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\x7\x1\x2\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x3\x2\x2\x1\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\x6"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF"+
				"\x1\x2\x5\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x9\x2\xFFFF\x1\x2\xD"+
				"\xFFFF\x2\x2\x1\xFFFF\x1\x2\x16\xFFFF\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA616_eot = DFA.UnpackEncodedString(DFA616_eotS);
		private static readonly short[] DFA616_eof = DFA.UnpackEncodedString(DFA616_eofS);
		private static readonly char[] DFA616_min = DFA.UnpackEncodedStringToUnsignedChars(DFA616_minS);
		private static readonly char[] DFA616_max = DFA.UnpackEncodedStringToUnsignedChars(DFA616_maxS);
		private static readonly short[] DFA616_accept = DFA.UnpackEncodedString(DFA616_acceptS);
		private static readonly short[] DFA616_special = DFA.UnpackEncodedString(DFA616_specialS);
		private static readonly short[][] DFA616_transition;

		static DFA616()
		{
			int numStates = DFA616_transitionS.Length;
			DFA616_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA616_transition[i] = DFA.UnpackEncodedString(DFA616_transitionS[i]);
			}
		}

		public DFA616( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 616;
			this.eot = DFA616_eot;
			this.eof = DFA616_eof;
			this.min = DFA616_min;
			this.max = DFA616_max;
			this.accept = DFA616_accept;
			this.special = DFA616_special;
			this.transition = DFA616_transition;
		}

		public override string Description { get { return "()* loopback of 744:26: ( ( WS )* '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | ( WS )* '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | ( WS )* '.' ( WS )* ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | ( WS )* '->' ( WS )* ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix bracket_expr_list ) | generic_parameter ( WS )* bracket_expr_list -> ^( Expr_Call $lvalue_suffix generic_parameter bracket_expr_list ) | ( WS )* square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA622 : DFA
	{
		private const string DFA622_eotS =
			"\x4\xFFFF";
		private const string DFA622_eofS =
			"\x4\xFFFF";
		private const string DFA622_minS =
			"\x2\x55\x2\xFFFF";
		private const string DFA622_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA622_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA622_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA622_transitionS =
			{
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x1\x8\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA622_eot = DFA.UnpackEncodedString(DFA622_eotS);
		private static readonly short[] DFA622_eof = DFA.UnpackEncodedString(DFA622_eofS);
		private static readonly char[] DFA622_min = DFA.UnpackEncodedStringToUnsignedChars(DFA622_minS);
		private static readonly char[] DFA622_max = DFA.UnpackEncodedStringToUnsignedChars(DFA622_maxS);
		private static readonly short[] DFA622_accept = DFA.UnpackEncodedString(DFA622_acceptS);
		private static readonly short[] DFA622_special = DFA.UnpackEncodedString(DFA622_specialS);
		private static readonly short[][] DFA622_transition;

		static DFA622()
		{
			int numStates = DFA622_transitionS.Length;
			DFA622_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA622_transition[i] = DFA.UnpackEncodedString(DFA622_transitionS[i]);
			}
		}

		public DFA622( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 622;
			this.eot = DFA622_eot;
			this.eof = DFA622_eof;
			this.min = DFA622_min;
			this.max = DFA622_max;
			this.accept = DFA622_accept;
			this.special = DFA622_special;
			this.transition = DFA622_transition;
		}

		public override string Description { get { return "()+ loopback of 760:24: ( ( WS )* ',' ( WS )* lvalue_item )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA627 : DFA
	{
		private const string DFA627_eotS =
			"\x4\xFFFF";
		private const string DFA627_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA627_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA627_maxS =
			"\x2\xBA\x2\xFFFF";
		private const string DFA627_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA627_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA627_transitionS =
			{
				"\x1\x2\x26\xFFFF\x2\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x10\x2"+
				"\x1\xFFFF\x8\x2\x1\x3\xA\x2\x1\xFFFF\xF\x2\x5\xFFFF\x1\x2\x4\xFFFF\x2"+
				"\x2\x1\xFFFF\x3\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x7\x2",
				"\x1\x2\x26\xFFFF\x2\x2\x7\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x1\xFFFF\x10"+
				"\x2\x1\xFFFF\x8\x2\x1\x3\xA\x2\x1\xFFFF\xF\x2\x5\xFFFF\x1\x2\x4\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x3\xFFFF\x7\x2",
				"",
				""
			};

		private static readonly short[] DFA627_eot = DFA.UnpackEncodedString(DFA627_eotS);
		private static readonly short[] DFA627_eof = DFA.UnpackEncodedString(DFA627_eofS);
		private static readonly char[] DFA627_min = DFA.UnpackEncodedStringToUnsignedChars(DFA627_minS);
		private static readonly char[] DFA627_max = DFA.UnpackEncodedStringToUnsignedChars(DFA627_maxS);
		private static readonly short[] DFA627_accept = DFA.UnpackEncodedString(DFA627_acceptS);
		private static readonly short[] DFA627_special = DFA.UnpackEncodedString(DFA627_specialS);
		private static readonly short[][] DFA627_transition;

		static DFA627()
		{
			int numStates = DFA627_transitionS.Length;
			DFA627_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA627_transition[i] = DFA.UnpackEncodedString(DFA627_transitionS[i]);
			}
		}

		public DFA627( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 627;
			this.eot = DFA627_eot;
			this.eof = DFA627_eof;
			this.min = DFA627_min;
			this.max = DFA627_max;
			this.accept = DFA627_accept;
			this.special = DFA627_special;
			this.transition = DFA627_transition;
		}

		public override string Description { get { return "()* loopback of 765:10: ( ( WS )* '::' ( WS )* IDENT )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root572 = new BitSet(new ulong[]{0x100800000000000UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _global_block_in_root575 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block597 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_global_block599 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_global_block602 = new BitSet(new ulong[]{0x100800000000002UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _func_def_in_node625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_attribute_args_list692 = new BitSet(new ulong[]{0x4200800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_attribute_args_list694 = new BitSet(new ulong[]{0x4200800000000000UL,0x200000UL});
		public static readonly BitSet _attribute_args_in_attribute_args_list697 = new BitSet(new ulong[]{0x0UL,0x1040200000UL});
		public static readonly BitSet _WS_in_attribute_args_list700 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_attribute_args_list703 = new BitSet(new ulong[]{0x4200800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_attribute_args_list705 = new BitSet(new ulong[]{0x4200800000000000UL,0x200000UL});
		public static readonly BitSet _attribute_args_in_attribute_args_list708 = new BitSet(new ulong[]{0x0UL,0x1040200000UL});
		public static readonly BitSet _WS_in_attribute_args_list712 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_attribute_args_list715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item731 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _WS_in_attribute_item734 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _attribute_args_list_in_attribute_item737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_attribute_item755 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _WS_in_attribute_item758 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _attribute_args_list_in_attribute_item761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_attribute_item779 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _WS_in_attribute_item782 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _attribute_args_list_in_attribute_item785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_attribute_item803 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _WS_in_attribute_item806 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _attribute_args_list_in_attribute_item809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_attribute_item827 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _WS_in_attribute_item830 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _attribute_args_list_in_attribute_item833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_attribute858 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4004800004000UL});
		public static readonly BitSet _WS_in_attribute860 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4004800004000UL});
		public static readonly BitSet _attribute_item_in_attribute863 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_attribute866 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_attribute869 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4004800004000UL});
		public static readonly BitSet _WS_in_attribute871 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4004800004000UL});
		public static readonly BitSet _attribute_item_in_attribute874 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_attribute878 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20UL});
		public static readonly BitSet _133_in_attribute881 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_attribute883 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_attribute886 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_in_global_alloc905 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_global_alloc909 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_global_alloc911 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_list_in_global_alloc916 = new BitSet(new ulong[]{0x0UL,0x2800000200000UL});
		public static readonly BitSet _WS_in_global_alloc920 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_global_alloc923 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_global_alloc925 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_global_alloc928 = new BitSet(new ulong[]{0x2UL,0x202000020200000UL});
		public static readonly BitSet _WS_in_global_alloc932 = new BitSet(new ulong[]{0x0UL,0x202000000200000UL});
		public static readonly BitSet _121_in_global_alloc936 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _113_in_global_alloc940 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_global_alloc943 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_global_alloc946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_global_alloc1001 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_global_alloc1128 = new BitSet(new ulong[]{0x0UL,0x2000000200000UL});
		public static readonly BitSet _113_in_global_alloc1131 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_global_alloc1133 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_global_alloc1137 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_global_alloc1140 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_global_alloc1143 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_global_alloc1145 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_global_alloc1148 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _attribute_in_global_using1202 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_global_using1205 = new BitSet(new ulong[]{0x800000000002UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _WS_in_global_using1208 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1211 = new BitSet(new ulong[]{0x800000000002UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_typedef1236 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_global_typedef1239 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_global_typedef1241 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_global_typedef1244 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _WS_in_global_typedef1246 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _121_in_global_typedef1249 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_global_typedef1251 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_global_typedef1254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1278 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_import_def1281 = new BitSet(new ulong[]{0x4100000000000002UL,0x200000UL});
		public static readonly BitSet _WS_in_import_def1284 = new BitSet(new ulong[]{0x4000000000000000UL,0x200000UL});
		public static readonly BitSet _STRING_in_import_def1287 = new BitSet(new ulong[]{0x100000000000002UL,0x200000UL});
		public static readonly BitSet _WS_in_import_def1292 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_import_def1295 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_import_def1298 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1300 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _STRING_in_import_def1304 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_import_def1306 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_import_def1309 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1339 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_enum_def1342 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_enum_def1344 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_enum_def1347 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _WS_in_enum_def1349 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _121_in_enum_def1352 = new BitSet(new ulong[]{0x800000000002UL,0x200000UL});
		public static readonly BitSet _WS_in_enum_def1355 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_enum_def1358 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _WS_in_enum_def1361 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _182_in_enum_def1364 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_enum_def1366 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_enum_def1369 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_namespace_def1405 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_namespace_def1407 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_namespace_def1410 = new BitSet(new ulong[]{0x100000000000002UL,0x200000UL});
		public static readonly BitSet _WS_in_namespace_def1413 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1416 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1419 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1421 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _global_block_in_namespace_def1424 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_class_args1453 = new BitSet(new ulong[]{0x800000000000UL,0x40200000UL});
		public static readonly BitSet _WS_in_class_args1457 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _func_args_in_class_args1460 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_class_args1462 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_class_args1465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_class_args1477 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_class_args1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1504 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800002800UL});
		public static readonly BitSet _163_in_class_def1508 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2800UL});
		public static readonly BitSet _WS_in_class_def1510 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2800UL});
		public static readonly BitSet _141_in_class_def1517 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1519 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1522 = new BitSet(new ulong[]{0x100000000000002UL,0x8800000200000UL});
		public static readonly BitSet _generic_parameter_in_class_def1525 = new BitSet(new ulong[]{0x100000000000002UL,0x800000200000UL});
		public static readonly BitSet _WS_in_class_def1530 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_class_def1533 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1535 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1538 = new BitSet(new ulong[]{0x100000000000002UL,0x1000200000UL});
		public static readonly BitSet _WS_in_class_def1541 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_class_def1544 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1546 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1549 = new BitSet(new ulong[]{0x100000000000002UL,0x1000200000UL});
		public static readonly BitSet _WS_in_class_def1556 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_class_def1559 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_class_def1562 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _NEWLINE_in_class_def1564 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _global_block_in_class_def1567 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_class_def1618 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2000UL});
		public static readonly BitSet _WS_in_class_def1620 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2000UL});
		public static readonly BitSet _141_in_class_def1623 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1625 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1628 = new BitSet(new ulong[]{0x100000000000002UL,0x8800020200000UL});
		public static readonly BitSet _generic_parameter_in_class_def1631 = new BitSet(new ulong[]{0x100000000000002UL,0x800020200000UL});
		public static readonly BitSet _WS_in_class_def1636 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _class_args_in_class_def1639 = new BitSet(new ulong[]{0x100000000000002UL,0x800000200000UL});
		public static readonly BitSet _WS_in_class_def1644 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_class_def1647 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1649 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1652 = new BitSet(new ulong[]{0x100000000000002UL,0x1000200000UL});
		public static readonly BitSet _WS_in_class_def1655 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_class_def1658 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_class_def1660 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_class_def1663 = new BitSet(new ulong[]{0x100000000000002UL,0x1000200000UL});
		public static readonly BitSet _WS_in_class_def1670 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_class_def1673 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_class_def1676 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _NEWLINE_in_class_def1678 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x40644C8908C6810UL});
		public static readonly BitSet _global_block_in_class_def1681 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1743 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_type_list1746 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_type_list1749 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_list1752 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_type_list1755 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _type_single_in_type_name1777 = new BitSet(new ulong[]{0x2UL,0x20000200000UL});
		public static readonly BitSet _WS_in_type_name1781 = new BitSet(new ulong[]{0x0UL,0x20000200000UL});
		public static readonly BitSet _105_in_type_name1784 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_name1786 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_type_name1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1794 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_type_name1796 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_type_name1799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1840 = new BitSet(new ulong[]{0x800000000000UL,0x60200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_name1843 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_list_in_type_name1846 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_type_name1850 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_type_name1853 = new BitSet(new ulong[]{0x0UL,0x20000200000UL});
		public static readonly BitSet _WS_in_type_name1855 = new BitSet(new ulong[]{0x0UL,0x20000200000UL});
		public static readonly BitSet _105_in_type_name1858 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_name1860 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_type_name1864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1868 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_type_name1870 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_type_name1873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1897 = new BitSet(new ulong[]{0x2UL,0x8200000UL,0x10UL});
		public static readonly BitSet _WS_in_type_single1901 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_type_single1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_type_single1920 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1923 = new BitSet(new ulong[]{0x4200800000000000UL,0x76A8600000UL,0x400000348000038UL});
		public static readonly BitSet _WS_in_type_single1927 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_type_single1930 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_type_single1933 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_type_single1936 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_type_single1938 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_type_single1941 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_type_single1945 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_type_single1978 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_type_single1981 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_type_single1985 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array2039 = new BitSet(new ulong[]{0x2UL,0x8200000UL});
		public static readonly BitSet _WS_in_type_no_array2043 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_type_no_array2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star2081 = new BitSet(new ulong[]{0x2UL,0x80200000UL});
		public static readonly BitSet _WS_in_type_star2086 = new BitSet(new ulong[]{0x0UL,0x80200000UL});
		public static readonly BitSet _95_in_type_star2089 = new BitSet(new ulong[]{0x2UL,0x80200000UL});
		public static readonly BitSet _type_ident_in_type_template_type2135 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_template_type2139 = new BitSet(new ulong[]{0x800000000000UL,0x2000000020200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_template_type2142 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_type_template_type2145 = new BitSet(new ulong[]{0x0UL,0x2000001000200000UL});
		public static readonly BitSet _WS_in_type_template_type2148 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_type_template_type2151 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_type_template_type2153 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_type_template_type2156 = new BitSet(new ulong[]{0x0UL,0x2000001000200000UL});
		public static readonly BitSet _WS_in_type_template_type2162 = new BitSet(new ulong[]{0x0UL,0x2000000000200000UL});
		public static readonly BitSet _125_in_type_template_type2165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_type_ident2206 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x48010004000UL});
		public static readonly BitSet _WS_in_type_ident2208 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x48010004000UL});
		public static readonly BitSet _142_in_type_ident2214 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x48010000000UL});
		public static readonly BitSet _WS_in_type_ident2216 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x48010000000UL});
		public static readonly BitSet _167_in_type_ident2222 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x40010000000UL});
		public static readonly BitSet _WS_in_type_ident2224 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x40010000000UL});
		public static readonly BitSet _156_in_type_ident2230 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x40000000000UL});
		public static readonly BitSet _WS_in_type_ident2232 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x40000000000UL});
		public static readonly BitSet _170_in_type_ident2238 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_type_ident2240 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_type_ident2245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_generic_parameter_inside2279 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_generic_parameter_inside2282 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_generic_parameter_inside2285 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_generic_parameter_inside2287 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_generic_parameter_inside2290 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _115_in_generic_parameter2312 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_generic_parameter2314 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter2317 = new BitSet(new ulong[]{0x0UL,0x2000000000200000UL});
		public static readonly BitSet _WS_in_generic_parameter2319 = new BitSet(new ulong[]{0x0UL,0x2000000000200000UL});
		public static readonly BitSet _125_in_generic_parameter2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_generic_parameter_ident2337 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_generic_parameter_ident2339 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _type_ident_in_generic_parameter_ident2342 = new BitSet(new ulong[]{0x0UL,0x2000001000200000UL});
		public static readonly BitSet _WS_in_generic_parameter_ident2345 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_generic_parameter_ident2348 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_generic_parameter_ident2350 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _type_ident_in_generic_parameter_ident2353 = new BitSet(new ulong[]{0x0UL,0x2000001000200000UL});
		public static readonly BitSet _WS_in_generic_parameter_ident2357 = new BitSet(new ulong[]{0x0UL,0x2000000000200000UL});
		public static readonly BitSet _125_in_generic_parameter_ident2360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args2380 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_func_args2383 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_func_args2386 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_func_args2388 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _func_args_item_in_func_args2391 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _ident_list_in_func_args_item2414 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _WS_in_func_args_item2416 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_func_args_item2419 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_func_args_item2421 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_func_args_item2424 = new BitSet(new ulong[]{0x2UL,0x202000020200000UL});
		public static readonly BitSet _WS_in_func_args_item2428 = new BitSet(new ulong[]{0x0UL,0x202000000200000UL});
		public static readonly BitSet _121_in_func_args_item2432 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _113_in_func_args_item2436 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_func_args_item2439 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_func_args_item2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_func_args_item2499 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_func_name2612 = new BitSet(new ulong[]{0x0UL,0x202280200000UL});
		public static readonly BitSet _WS_in_func_name2614 = new BitSet(new ulong[]{0x0UL,0x202280200000UL});
		public static readonly BitSet _operator_in_func_name2617 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_func_name2619 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_func_name2622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2648 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x40404C810004000UL});
		public static readonly BitSet _163_in_func_def2652 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x40404C010004000UL});
		public static readonly BitSet _WS_in_func_def2654 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x40404C010004000UL});
		public static readonly BitSet _178_in_func_def2660 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x40004C010004000UL});
		public static readonly BitSet _WS_in_func_def2662 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x40004C010004000UL});
		public static readonly BitSet _func_type_in_func_def2668 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x400000000000000UL});
		public static readonly BitSet _WS_in_func_def2670 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x400000000000000UL});
		public static readonly BitSet _186_in_func_def2676 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL});
		public static readonly BitSet _WS_in_func_def2678 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL});
		public static readonly BitSet _func_name_in_func_def2683 = new BitSet(new ulong[]{0x0UL,0x8000020200000UL});
		public static readonly BitSet _WS_in_func_def2686 = new BitSet(new ulong[]{0x0UL,0x8000000200000UL});
		public static readonly BitSet _generic_parameter_ident_in_func_def2689 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _WS_in_func_def2693 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _93_in_func_def2696 = new BitSet(new ulong[]{0x800000000000UL,0x40200000UL});
		public static readonly BitSet _WS_in_func_def2699 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _func_args_in_func_def2702 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_func_def2706 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_func_def2709 = new BitSet(new ulong[]{0x100000000000002UL,0x200000000200000UL});
		public static readonly BitSet _WS_in_func_def2713 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_func_def2716 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_func_def2831 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _121_in_func_def2834 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_func_def2838 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_func_def2841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_func_def2957 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_func_def2960 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_func_def2963 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2965 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _match_item_in_func_def2969 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_func_def2971 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_func_def2974 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item3301 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_block_item3303 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item3306 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item3316 = new BitSet(new ulong[]{0x100000000000000UL,0x4000000200000UL});
		public static readonly BitSet _WS_in_stmt_block_item3318 = new BitSet(new ulong[]{0x100000000000000UL,0x4000000200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item3322 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _114_in_stmt_block_item3327 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item3329 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block3346 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _NEWLINE_in_stmt_block3348 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block3351 = new BitSet(new ulong[]{0x800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _DEDENT_in_stmt_block3354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt3374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt3379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple3390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex3401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex3406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex3411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex3416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex3421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex3426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr3440 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3450 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x400000UL});
		public static readonly BitSet _150_in_stmt_expr3453 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3455 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_expr3458 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3487 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x800000000000UL});
		public static readonly BitSet _175_in_stmt_expr3490 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3492 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_expr3495 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3524 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000000UL});
		public static readonly BitSet _181_in_stmt_expr3527 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3529 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_expr3532 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3561 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x1000000000000UL});
		public static readonly BitSet _176_in_stmt_expr3564 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3566 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_expr3569 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3598 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000UL});
		public static readonly BitSet _149_in_stmt_expr3601 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3603 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_stmt_expr3606 = new BitSet(new ulong[]{0x2UL,0x1000200000UL,0x21800000600000UL});
		public static readonly BitSet _WS_in_stmt_expr3609 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_stmt_expr3612 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_expr3614 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_stmt_expr3617 = new BitSet(new ulong[]{0x2UL,0x1000200000UL,0x21800000600000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item3659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item3664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item3669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item3674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item3679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_defer3690 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _WS_in_stmt_defer3692 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _stmt_in_stmt_defer3695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_defer3708 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _WS_in_stmt_defer3710 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _stmt_in_stmt_defer3713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_stmt_typedef3732 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_typedef3734 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_stmt_typedef3737 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _WS_in_stmt_typedef3739 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _121_in_stmt_typedef3742 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_stmt_typedef3744 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_stmt_typedef3747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item3766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_using_item3770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_stmt_using3778 = new BitSet(new ulong[]{0x800000000002UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _WS_in_stmt_using3781 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using3784 = new BitSet(new ulong[]{0x800000000002UL,0x200000UL,0x80000000UL});
		public static readonly BitSet _164_in_stmt_return3806 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_return3809 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_return3812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block3834 = new BitSet(new ulong[]{0x2UL,0x4000000200000UL});
		public static readonly BitSet _WS_in_inline_stmt_block3837 = new BitSet(new ulong[]{0x0UL,0x4000000200000UL});
		public static readonly BitSet _114_in_inline_stmt_block3840 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _WS_in_inline_stmt_block3842 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block3845 = new BitSet(new ulong[]{0x2UL,0x4000000200000UL});
		public static readonly BitSet _150_in_stmt_if3867 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_if3869 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_if3872 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_stmt_if3876 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3879 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3882 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3885 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_stmt_if3888 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3890 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_if3929 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _169_in_stmt_if3932 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _WS_in_stmt_if3934 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stmt_if3962 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_if3964 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_if3967 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_stmt_if3971 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3973 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3976 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3979 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_stmt_if3982 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3984 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_if4027 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _169_in_stmt_if4030 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x402401200000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if4032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_stmt_while4067 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_while4069 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_while4072 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_stmt_while4076 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while4079 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while4082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_while4110 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _169_in_stmt_while4113 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _WS_in_stmt_while4115 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while4118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_stmt_while4146 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_while4148 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_stmt_while4152 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while4155 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while4158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_while4182 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _169_in_stmt_while4185 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _WS_in_stmt_while4187 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while4190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_while4214 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_while4217 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_while4220 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_while4224 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while4227 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while4230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range4252 = new BitSet(new ulong[]{0x0UL,0x10000000200000UL});
		public static readonly BitSet _WS_in_for_range4254 = new BitSet(new ulong[]{0x0UL,0x10000000200000UL});
		public static readonly BitSet _116_in_for_range4257 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4259 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4264 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x180000010000UL});
		public static readonly BitSet _WS_in_for_range4268 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x100000000000UL});
		public static readonly BitSet _172_in_for_range4271 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4273 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4278 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x400UL});
		public static readonly BitSet _WS_in_for_range4281 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x400UL});
		public static readonly BitSet _138_in_for_range4284 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4286 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_for_range4329 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x80000000000UL});
		public static readonly BitSet _171_in_for_range4332 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4334 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4339 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x400UL});
		public static readonly BitSet _WS_in_for_range4342 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x400UL});
		public static readonly BitSet _138_in_for_range4345 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4347 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_for_range4390 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10000UL});
		public static readonly BitSet _144_in_for_range4393 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4395 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4400 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x400UL});
		public static readonly BitSet _WS_in_for_range4403 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x400UL});
		public static readonly BitSet _138_in_for_range4406 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_range4408 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_range4413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when4487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map4506 = new BitSet(new ulong[]{0x0UL,0x1000000000200000UL});
		public static readonly BitSet _WS_in_for_map4508 = new BitSet(new ulong[]{0x0UL,0x1000000000200000UL});
		public static readonly BitSet _124_in_for_map4511 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_for_map4513 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_for_map4516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item4537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item4542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item4547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_for4559 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _155_in_stmt_for4563 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_for4568 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_stmt_for4571 = new BitSet(new ulong[]{0x100000000000000UL,0x1000200000UL});
		public static readonly BitSet _WS_in_stmt_for4574 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_stmt_for4577 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_for4579 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_stmt_for4582 = new BitSet(new ulong[]{0x100000000000000UL,0x1000200000UL});
		public static readonly BitSet _WS_in_stmt_for4586 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for4589 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for4592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_stmt_try4641 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_try4643 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try4646 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try4649 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try4651 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_try4654 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_try4656 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try4659 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_try4661 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try4664 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try4667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_switch_item4690 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_switch_item4692 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_switch_item4695 = new BitSet(new ulong[]{0x100000000000000UL,0x1000200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_switch_item4698 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_switch_item4701 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_switch_item4703 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_switch_item4706 = new BitSet(new ulong[]{0x100000000000000UL,0x1000200000UL,0x20000000000UL});
		public static readonly BitSet _WS_in_switch_item4712 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_switch_item4715 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item4718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_switch_item4776 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20000000000UL});
		public static readonly BitSet _169_in_switch_item4779 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _WS_in_switch_item4781 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x402401200000008UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item4784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_switch4836 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_switch4839 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_stmt_switch4842 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_switch4846 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch4849 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch4852 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch4854 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch4858 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_stmt_switch4860 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch4863 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x8000000020000UL});
		public static readonly BitSet _145_in_stmt_switch4869 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch4871 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch4874 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch4876 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch4881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list4907 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_ident_list4910 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_ident_list4913 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_ident_list4915 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_ident_list4918 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc4940 = new BitSet(new ulong[]{0x0UL,0x2800000200000UL});
		public static readonly BitSet _WS_in_stmt_alloc4944 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_stmt_alloc4947 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_stmt_alloc4949 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_stmt_alloc4952 = new BitSet(new ulong[]{0x2UL,0x202000020200000UL});
		public static readonly BitSet _WS_in_stmt_alloc4956 = new BitSet(new ulong[]{0x0UL,0x202000000200000UL});
		public static readonly BitSet _121_in_stmt_alloc4960 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _113_in_stmt_alloc4964 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_alloc4967 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc4970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_alloc5029 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc5032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_alloc5112 = new BitSet(new ulong[]{0x0UL,0x2000000200000UL});
		public static readonly BitSet _113_in_stmt_alloc5115 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_alloc5118 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc5121 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _WS_in_stmt_alloc5124 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_stmt_alloc5127 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_alloc5129 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc5132 = new BitSet(new ulong[]{0x2UL,0x1000200000UL});
		public static readonly BitSet _lvalue_in_stmt_modify5162 = new BitSet(new ulong[]{0x2UL,0x8260410912200000UL,0x80000000000085UL});
		public static readonly BitSet _WS_in_stmt_modify5166 = new BitSet(new ulong[]{0x0UL,0x240410912200000UL,0x80000000000081UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify5169 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_modify5171 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify5174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_modify5198 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x4UL});
		public static readonly BitSet _130_in_stmt_modify5201 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_modify5203 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify5206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_modify5233 = new BitSet(new ulong[]{0x0UL,0x20000000200000UL});
		public static readonly BitSet _117_in_stmt_modify5236 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_modify5238 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify5241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_stmt_modify5270 = new BitSet(new ulong[]{0x0UL,0x8000000000200000UL});
		public static readonly BitSet _127_in_stmt_modify5273 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_stmt_modify5275 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify5278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item5312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr5326 = new BitSet(new ulong[]{0x100000000000002UL,0x200000UL,0x10000000000000UL});
		public static readonly BitSet _WS_in_where_expr5336 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5339 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr5342 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5344 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_where_expr5347 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _WS_in_where_expr5351 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_where_expr5354 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr5358 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr5361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr5402 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr5405 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _NEWLINE_in_where_expr5407 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_where_expr5411 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_where_expr5413 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5416 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _DEDENT_in_where_expr5421 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr5423 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr5426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_where_expr5488 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5491 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr5494 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _NEWLINE_in_where_expr5496 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_where_expr5500 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_where_expr5502 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5505 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _DEDENT_in_where_expr5510 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr5512 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr5515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_where_expr5557 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10000000000000UL});
		public static readonly BitSet _180_in_where_expr5560 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_where_expr5562 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5565 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr5568 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _NEWLINE_in_where_expr5570 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_where_expr5574 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_where_expr5576 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_where_expr5579 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _DEDENT_in_where_expr5584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_let_expr5642 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _WS_in_let_expr5644 = new BitSet(new ulong[]{0x800000000000UL,0x66A8600000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_let_expr5647 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x1000000UL});
		public static readonly BitSet _WS_in_let_expr5651 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x1000000UL});
		public static readonly BitSet _152_in_let_expr5654 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_let_expr5658 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_let_expr5661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_let_expr5693 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr5696 = new BitSet(new ulong[]{0x4301800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _INDENT_in_let_expr5701 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x400000348000018UL});
		public static readonly BitSet _NEWLINE_in_let_expr5703 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_let_expr5706 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_let_expr5708 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr5711 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr5714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_let_expr5752 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_let_expr5755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_let_expr5826 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr5829 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_let_expr5832 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _NEWLINE_in_let_expr5834 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x423E11228708008UL});
		public static readonly BitSet _where_item_in_let_expr5838 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_let_expr5840 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr5843 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8600000UL,0x423E11229708008UL});
		public static readonly BitSet _WS_in_let_expr5848 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x1000000UL});
		public static readonly BitSet _152_in_let_expr5851 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_let_expr5853 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_let_expr5856 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_let_expr5858 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr5861 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr5864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_match_item5900 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_match_item5902 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_match_item5905 = new BitSet(new ulong[]{0x0UL,0x1000000000200000UL});
		public static readonly BitSet _WS_in_match_item5907 = new BitSet(new ulong[]{0x0UL,0x1000000000200000UL});
		public static readonly BitSet _124_in_match_item5910 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_match_item5912 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _where_expr_in_match_item5915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_match_expr5936 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400002348000018UL});
		public static readonly BitSet _WS_in_match_expr5939 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_match_expr5942 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL,0x2000000000UL});
		public static readonly BitSet _WS_in_match_expr5947 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2000000000UL});
		public static readonly BitSet _165_in_match_expr5950 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_match_expr5952 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_match_expr5955 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_match_expr5959 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_match_expr5962 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_match_expr5965 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr5967 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _match_item_in_match_expr5971 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_match_expr5973 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_match_expr5976 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr5981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr6007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr6012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr6017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr6049 = new BitSet(new ulong[]{0x0UL,0x100000000200000UL,0x100000000000000UL});
		public static readonly BitSet _WS_in_feed_expr6059 = new BitSet(new ulong[]{0x0UL,0x100000000200000UL});
		public static readonly BitSet _120_in_feed_expr6062 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _WS_in_feed_expr6064 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _list_expr_in_feed_expr6067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_feed_expr6105 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x100000000000000UL});
		public static readonly BitSet _184_in_feed_expr6108 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _WS_in_feed_expr6110 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _list_expr_in_feed_expr6113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr6154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr6181 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _WS_in_list_expr6183 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _feed_expr_in_list_expr6186 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000UL});
		public static readonly BitSet _WS_in_list_expr6188 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000UL});
		public static readonly BitSet _149_in_list_expr6191 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_list_expr6193 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_list_expr6196 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_list_expr6199 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_list_expr6202 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_list_expr6204 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _for_item_in_list_expr6207 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_list_expr6211 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr6214 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _WS_in_list_expr6216 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_list_expr6219 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_list_expr6221 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_list_expr6224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr6252 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000038UL});
		public static readonly BitSet _WS_in_list_expr6256 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _100_in_list_expr6260 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr6264 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _INDENT_in_list_expr6268 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _DEDENT_in_list_expr6272 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _feed_expr_in_list_expr6276 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_list_expr6279 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL});
		public static readonly BitSet _100_in_list_expr6283 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr6287 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _INDENT_in_list_expr6291 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _DEDENT_in_list_expr6295 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8600000UL,0x400000300000018UL});
		public static readonly BitSet _WS_in_list_expr6299 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _feed_expr_in_list_expr6302 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_list_expr6309 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr6313 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_list_expr6317 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _INDENT_in_list_expr6321 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _DEDENT_in_list_expr6325 = new BitSet(new ulong[]{0x101000000000100UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr6329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr6343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value6354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value6371 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value6374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_type6389 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_lambda_type6391 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_lambda_type6394 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_lambda_type6396 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_lambda_type6399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_expr6434 = new BitSet(new ulong[]{0x800000000000UL,0x40200000UL});
		public static readonly BitSet _WS_in_lambda_expr6437 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _func_args_in_lambda_expr6440 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_lambda_expr6444 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_lambda_expr6447 = new BitSet(new ulong[]{0x0UL,0x1800028020200000UL});
		public static readonly BitSet _WS_in_lambda_expr6450 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr6453 = new BitSet(new ulong[]{0x0UL,0x1800028000200000UL});
		public static readonly BitSet _WS_in_lambda_expr6457 = new BitSet(new ulong[]{0x0UL,0x1800028000200000UL});
		public static readonly BitSet _lambda_expr_op_in_lambda_expr6460 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_lambda_expr6462 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr6465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr6486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr6543 = new BitSet(new ulong[]{0x2UL,0x242410912200000UL,0x80000000000081UL});
		public static readonly BitSet _WS_in_modify_expr6547 = new BitSet(new ulong[]{0x0UL,0x42410912200000UL,0x80000000000081UL});
		public static readonly BitSet _set_in_modify_expr6550 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_modify_expr6595 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr6598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_modify_expr6607 = new BitSet(new ulong[]{0x0UL,0x200000000200000UL});
		public static readonly BitSet _121_in_modify_expr6610 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_modify_expr6613 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr6616 = new BitSet(new ulong[]{0x2UL,0x200000000200000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item6634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr6646 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _WS_in_cond_expr6655 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2UL});
		public static readonly BitSet _129_in_cond_expr6658 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_cond_expr6662 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr6667 = new BitSet(new ulong[]{0x2UL,0x800000200000UL});
		public static readonly BitSet _WS_in_cond_expr6671 = new BitSet(new ulong[]{0x0UL,0x800000200000UL});
		public static readonly BitSet _111_in_cond_expr6674 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_cond_expr6676 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr6681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr6835 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x200000400000000UL});
		public static readonly BitSet _WS_in_or_expr6844 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000400000000UL});
		public static readonly BitSet _or_op_in_or_expr6849 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_or_expr6851 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _and_expr_in_or_expr6856 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x200000400000000UL});
		public static readonly BitSet _bit_or_in_and_expr6898 = new BitSet(new ulong[]{0x2UL,0x4200000UL,0x200UL});
		public static readonly BitSet _WS_in_and_expr6907 = new BitSet(new ulong[]{0x0UL,0x4200000UL,0x200UL});
		public static readonly BitSet _and_op_in_and_expr6912 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_and_expr6914 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _bit_or_in_and_expr6919 = new BitSet(new ulong[]{0x2UL,0x4200000UL,0x200UL});
		public static readonly BitSet _bit_xor_in_bit_or6950 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _WS_in_bit_or6959 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _182_in_bit_or6962 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_bit_or6964 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _bit_xor_in_bit_or6969 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor6999 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40UL});
		public static readonly BitSet _WS_in_bit_xor7008 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x40UL});
		public static readonly BitSet _134_in_bit_xor7011 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_bit_xor7013 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _bit_and_in_bit_xor7018 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x40UL});
		public static readonly BitSet _cmp_expr_in_bit_and7048 = new BitSet(new ulong[]{0x2UL,0x8200000UL});
		public static readonly BitSet _WS_in_bit_and7057 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_bit_and7060 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_bit_and7062 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _cmp_expr_in_bit_and7067 = new BitSet(new ulong[]{0x2UL,0x8200000UL});
		public static readonly BitSet _WS_in_chain_op7094 = new BitSet(new ulong[]{0x0UL,0x8000000200000UL});
		public static readonly BitSet _115_in_chain_op7097 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7099 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7112 = new BitSet(new ulong[]{0x0UL,0x80000000200000UL});
		public static readonly BitSet _119_in_chain_op7115 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7117 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7127 = new BitSet(new ulong[]{0x0UL,0x2000000000200000UL});
		public static readonly BitSet _125_in_chain_op7130 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7132 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7142 = new BitSet(new ulong[]{0x0UL,0x4000000000200000UL});
		public static readonly BitSet _126_in_chain_op7145 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7147 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7157 = new BitSet(new ulong[]{0x0UL,0xA00000UL});
		public static readonly BitSet _87_in_chain_op7160 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7162 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7172 = new BitSet(new ulong[]{0x0UL,0x400000000200000UL});
		public static readonly BitSet _122_in_chain_op7175 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7177 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7187 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x2000000UL});
		public static readonly BitSet _153_in_chain_op7190 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7192 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7202 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x4000000UL});
		public static readonly BitSet _154_in_chain_op7205 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _WS_in_chain_op7207 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _chain_op_in_chain_list7222 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x400000300000008UL});
		public static readonly BitSet _shift_expr_in_chain_list7224 = new BitSet(new ulong[]{0x2UL,0x6480000000A00000UL,0x6000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr7238 = new BitSet(new ulong[]{0x2UL,0x6480000000A00000UL,0x6000000UL});
		public static readonly BitSet _chain_op_in_cmp_expr7250 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x400000300000008UL});
		public static readonly BitSet _shift_expr_in_cmp_expr7254 = new BitSet(new ulong[]{0x2UL,0x6480000000A00000UL,0x6000000UL});
		public static readonly BitSet _chain_list_in_cmp_expr7258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr7378 = new BitSet(new ulong[]{0x2UL,0x8020000000200000UL});
		public static readonly BitSet _WS_in_shift_expr7387 = new BitSet(new ulong[]{0x0UL,0x8020000000200000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr7390 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_shift_expr7392 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _add_expr_in_shift_expr7397 = new BitSet(new ulong[]{0x2UL,0x8020000000200000UL});
		public static readonly BitSet _mul_expr_in_add_expr7427 = new BitSet(new ulong[]{0x2UL,0x2200200000UL});
		public static readonly BitSet _WS_in_add_expr7437 = new BitSet(new ulong[]{0x0UL,0x200200000UL});
		public static readonly BitSet _97_in_add_expr7440 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_add_expr7442 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _mul_expr_in_add_expr7447 = new BitSet(new ulong[]{0x2UL,0x2200200000UL});
		public static readonly BitSet _WS_in_add_expr7472 = new BitSet(new ulong[]{0x0UL,0x2000200000UL});
		public static readonly BitSet _101_in_add_expr7475 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_add_expr7477 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _mul_expr_in_add_expr7482 = new BitSet(new ulong[]{0x2UL,0x2200200000UL});
		public static readonly BitSet _infix_expr_in_mul_expr7520 = new BitSet(new ulong[]{0x2UL,0x200081200000UL});
		public static readonly BitSet _WS_in_mul_expr7530 = new BitSet(new ulong[]{0x0UL,0x80200000UL});
		public static readonly BitSet _95_in_mul_expr7533 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_mul_expr7535 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr7540 = new BitSet(new ulong[]{0x2UL,0x200081200000UL});
		public static readonly BitSet _WS_in_mul_expr7567 = new BitSet(new ulong[]{0x0UL,0x200000200000UL});
		public static readonly BitSet _109_in_mul_expr7570 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_mul_expr7572 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr7577 = new BitSet(new ulong[]{0x2UL,0x200081200000UL});
		public static readonly BitSet _WS_in_mul_expr7604 = new BitSet(new ulong[]{0x0UL,0x1200000UL});
		public static readonly BitSet _88_in_mul_expr7607 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_mul_expr7609 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr7614 = new BitSet(new ulong[]{0x2UL,0x200081200000UL});
		public static readonly BitSet _selector_expr_in_infix_expr7654 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x100UL});
		public static readonly BitSet _WS_in_infix_expr7664 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x100UL});
		public static readonly BitSet _infix_func_in_infix_expr7667 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_infix_expr7669 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _selector_expr_in_infix_expr7674 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x100UL});
		public static readonly BitSet _cast_expr_in_selector_expr7706 = new BitSet(new ulong[]{0x2UL,0x140000200000UL});
		public static readonly BitSet _WS_in_selector_expr7716 = new BitSet(new ulong[]{0x0UL,0x40000200000UL});
		public static readonly BitSet _106_in_selector_expr7719 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_selector_expr7721 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_selector_expr7726 = new BitSet(new ulong[]{0x2UL,0x140000200000UL});
		public static readonly BitSet _WS_in_selector_expr7752 = new BitSet(new ulong[]{0x0UL,0x100000200000UL});
		public static readonly BitSet _108_in_selector_expr7755 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_selector_expr7758 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_selector_expr7763 = new BitSet(new ulong[]{0x2UL,0x140000200000UL});
		public static readonly BitSet _93_in_cast_expr7821 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_cast_expr7823 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_cast_expr7826 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_cast_expr7828 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_cast_expr7831 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_cast_expr7833 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _prefix_expr_in_cast_expr7836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr7851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr7901 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_prefix_expr7903 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr7906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_prefix_expr7922 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_prefix_expr7924 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL,0x4C010004000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr7927 = new BitSet(new ulong[]{0x0UL,0x20200000UL,0x10UL});
		public static readonly BitSet _WS_in_prefix_expr7931 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr7934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_prefix_expr7960 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr7963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr7992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_square_expr_list8003 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_square_expr_list8005 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_square_expr_list8008 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_square_expr_list8011 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_square_expr_list8014 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_square_expr_list8016 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_square_expr_list8019 = new BitSet(new ulong[]{0x0UL,0x1000200000UL,0x20UL});
		public static readonly BitSet _WS_in_square_expr_list8023 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x20UL});
		public static readonly BitSet _133_in_square_expr_list8026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_bracket_expr_list8046 = new BitSet(new ulong[]{0x4300800000000000UL,0x66E8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8049 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8052 = new BitSet(new ulong[]{0x100000000000000UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8055 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_bracket_expr_list8058 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8060 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8063 = new BitSet(new ulong[]{0x100000000000000UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8071 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_bracket_expr_list8074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_bracket_expr_list8108 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8111 = new BitSet(new ulong[]{0x4301800000000000UL,0x66E8600000UL,0x400000348000018UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list8116 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x400000348000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8118 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8121 = new BitSet(new ulong[]{0x100000000000100UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8125 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_bracket_expr_list8128 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8132 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8135 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8139 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8142 = new BitSet(new ulong[]{0x100000000000100UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8147 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8150 = new BitSet(new ulong[]{0x100000000000100UL,0x40200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8156 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_bracket_expr_list8159 = new BitSet(new ulong[]{0x100000000000100UL,0x200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8161 = new BitSet(new ulong[]{0x100000000000100UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8164 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list8167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list8269 = new BitSet(new ulong[]{0x100000000000000UL,0x40200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8271 = new BitSet(new ulong[]{0x100000000000000UL,0x40200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8274 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_bracket_expr_list8277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_bracket_expr_list8367 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8370 = new BitSet(new ulong[]{0x100000000000000UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8374 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_bracket_expr_list8378 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8382 = new BitSet(new ulong[]{0x100000000000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list8386 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_bracket_expr_list8390 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list8393 = new BitSet(new ulong[]{0x100000000000000UL,0x1040200000UL});
		public static readonly BitSet _WS_in_bracket_expr_list8399 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_bracket_expr_list8402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr8477 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8487 = new BitSet(new ulong[]{0x0UL,0x400200000UL});
		public static readonly BitSet _98_in_suffix_expr8490 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8516 = new BitSet(new ulong[]{0x0UL,0x4000200000UL});
		public static readonly BitSet _102_in_suffix_expr8519 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8542 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _107_in_suffix_expr8545 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_suffix_expr8547 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_suffix_expr8550 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8575 = new BitSet(new ulong[]{0x0UL,0x20000200000UL});
		public static readonly BitSet _105_in_suffix_expr8578 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_suffix_expr8580 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_suffix_expr8583 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8608 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr8611 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr8634 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _WS_in_suffix_expr8636 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr8639 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8664 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr8667 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _WS_in_suffix_expr8690 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x8UL});
		public static readonly BitSet _131_in_suffix_expr8693 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_suffix_expr8695 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_suffix_expr8698 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _WS_in_suffix_expr8700 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr8703 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x18UL});
		public static readonly BitSet _NUMBER_in_atom_expr8741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr8746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr8751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_atom_expr8756 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_atom_expr8758 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_atom_expr8761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr8774 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_atom_expr8776 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_atom_expr8781 = new BitSet(new ulong[]{0x0UL,0x1040200000UL});
		public static readonly BitSet _WS_in_atom_expr8786 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_atom_expr8789 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _WS_in_atom_expr8791 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000348000018UL});
		public static readonly BitSet _expr_in_atom_expr8794 = new BitSet(new ulong[]{0x0UL,0x1040200000UL});
		public static readonly BitSet _WS_in_atom_expr8798 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_atom_expr8801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WS_in_atom_expr8832 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_atom_expr8835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item8868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix8880 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x400000200000008UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix8882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix8898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix8912 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix8922 = new BitSet(new ulong[]{0x0UL,0x400200000UL});
		public static readonly BitSet _98_in_lvalue_suffix8925 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix8953 = new BitSet(new ulong[]{0x0UL,0x4000200000UL});
		public static readonly BitSet _102_in_lvalue_suffix8956 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix8981 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _107_in_lvalue_suffix8984 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_lvalue_suffix8986 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_lvalue_suffix8989 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix9016 = new BitSet(new ulong[]{0x0UL,0x20000200000UL});
		public static readonly BitSet _105_in_lvalue_suffix9019 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_lvalue_suffix9021 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_lvalue_suffix9024 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix9051 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix9054 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix9079 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _WS_in_lvalue_suffix9081 = new BitSet(new ulong[]{0x0UL,0x20200000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix9084 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _WS_in_lvalue_suffix9111 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x10UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix9114 = new BitSet(new ulong[]{0x2UL,0x80A4420200000UL,0x10UL});
		public static readonly BitSet _ident_in_lvalue_atom9152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_lvalue_atom9157 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_lvalue_atom9159 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_lvalue_atom9162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lvalue9181 = new BitSet(new ulong[]{0x800000000000UL,0x6688600000UL,0x400000200000008UL});
		public static readonly BitSet _WS_in_lvalue9183 = new BitSet(new ulong[]{0x800000000000UL,0x6688600000UL,0x400000200000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue9186 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _WS_in_lvalue9189 = new BitSet(new ulong[]{0x0UL,0x1000200000UL});
		public static readonly BitSet _100_in_lvalue9192 = new BitSet(new ulong[]{0x800000000000UL,0x6688600000UL,0x400000200000008UL});
		public static readonly BitSet _WS_in_lvalue9194 = new BitSet(new ulong[]{0x800000000000UL,0x6688600000UL,0x400000200000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue9197 = new BitSet(new ulong[]{0x0UL,0x1040200000UL});
		public static readonly BitSet _WS_in_lvalue9201 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_lvalue9204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue9218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident9229 = new BitSet(new ulong[]{0x2UL,0x1000000200000UL});
		public static readonly BitSet _WS_in_ident9232 = new BitSet(new ulong[]{0x0UL,0x1000000200000UL});
		public static readonly BitSet _112_in_ident9235 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_ident9237 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _IDENT_in_ident9240 = new BitSet(new ulong[]{0x2UL,0x1000000200000UL});
		public static readonly BitSet _136_in_infix_func9253 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _WS_in_infix_func9256 = new BitSet(new ulong[]{0x800000000000UL,0x200000UL});
		public static readonly BitSet _ident_in_infix_func9259 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x100UL});
		public static readonly BitSet _WS_in_infix_func9261 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x100UL});
		public static readonly BitSet _136_in_infix_func9264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp6029 = new BitSet(new ulong[]{0x0UL,0x100000000200000UL,0x100000000000000UL});
		public static readonly BitSet _WS_in_synpred1_SugarCpp6031 = new BitSet(new ulong[]{0x0UL,0x100000000200000UL,0x100000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp6034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_synpred2_SugarCpp6166 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _WS_in_synpred2_SugarCpp6168 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000018UL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp6171 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000UL});
		public static readonly BitSet _WS_in_synpred2_SugarCpp6173 = new BitSet(new ulong[]{0x0UL,0x200000UL,0x200000UL});
		public static readonly BitSet _149_in_synpred2_SugarCpp6176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred3_SugarCpp7801 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _WS_in_synpred3_SugarCpp7803 = new BitSet(new ulong[]{0x800000000000UL,0x20200000UL,0x4C010004000UL});
		public static readonly BitSet _type_name_in_synpred3_SugarCpp7806 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_synpred3_SugarCpp7808 = new BitSet(new ulong[]{0x0UL,0x40200000UL});
		public static readonly BitSet _94_in_synpred3_SugarCpp7811 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _WS_in_synpred3_SugarCpp7813 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8600000UL,0x400000300000008UL});
		public static readonly BitSet _prefix_expr_in_synpred3_SugarCpp7816 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
